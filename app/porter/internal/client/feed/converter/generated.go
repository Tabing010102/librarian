// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package converter

import (
	gofeed "github.com/mmcdole/gofeed"
	bizfeed "github.com/tuihub/librarian/app/porter/internal/biz/bizfeed"
)

type ConverterImpl struct{}

func (c *ConverterImpl) ToPBFeed(source *gofeed.Feed) *bizfeed.Feed {
	var pBizfeedFeed *bizfeed.Feed
	if source != nil {
		var bizfeedFeed bizfeed.Feed
		bizfeedFeed.Title = (*source).Title
		bizfeedFeed.Description = (*source).Description
		bizfeedFeed.Link = (*source).Link
		var pBizfeedPersonList []*bizfeed.Person
		if (*source).Authors != nil {
			pBizfeedPersonList = make([]*bizfeed.Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				pBizfeedPersonList[i] = c.pGofeedPersonToPBizfeedPerson((*source).Authors[i])
			}
		}
		bizfeedFeed.Authors = pBizfeedPersonList
		bizfeedFeed.Language = (*source).Language
		bizfeedFeed.Image = c.pGofeedImageToPBizfeedImage((*source).Image)
		var pBizfeedItemList []*bizfeed.Item
		if (*source).Items != nil {
			pBizfeedItemList = make([]*bizfeed.Item, len((*source).Items))
			for j := 0; j < len((*source).Items); j++ {
				pBizfeedItemList[j] = c.ToPBFeedItem((*source).Items[j])
			}
		}
		bizfeedFeed.Items = pBizfeedItemList
		bizfeedFeed.FeedType = (*source).FeedType
		bizfeedFeed.FeedVersion = (*source).FeedVersion
		pBizfeedFeed = &bizfeedFeed
	}
	return pBizfeedFeed
}
func (c *ConverterImpl) ToPBFeedItem(source *gofeed.Item) *bizfeed.Item {
	var pBizfeedItem *bizfeed.Item
	if source != nil {
		var bizfeedItem bizfeed.Item
		bizfeedItem.Title = (*source).Title
		bizfeedItem.Description = (*source).Description
		bizfeedItem.Content = (*source).Content
		bizfeedItem.Link = (*source).Link
		bizfeedItem.Updated = (*source).Updated
		bizfeedItem.UpdatedParsed = TimeToTime((*source).UpdatedParsed)
		bizfeedItem.Published = (*source).Published
		bizfeedItem.PublishedParsed = TimeToTime((*source).PublishedParsed)
		var pBizfeedPersonList []*bizfeed.Person
		if (*source).Authors != nil {
			pBizfeedPersonList = make([]*bizfeed.Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				pBizfeedPersonList[i] = c.pGofeedPersonToPBizfeedPerson((*source).Authors[i])
			}
		}
		bizfeedItem.Authors = pBizfeedPersonList
		bizfeedItem.GUID = (*source).GUID
		bizfeedItem.Image = c.pGofeedImageToPBizfeedImage((*source).Image)
		var pBizfeedEnclosureList []*bizfeed.Enclosure
		if (*source).Enclosures != nil {
			pBizfeedEnclosureList = make([]*bizfeed.Enclosure, len((*source).Enclosures))
			for j := 0; j < len((*source).Enclosures); j++ {
				pBizfeedEnclosureList[j] = c.pGofeedEnclosureToPBizfeedEnclosure((*source).Enclosures[j])
			}
		}
		bizfeedItem.Enclosures = pBizfeedEnclosureList
		pBizfeedItem = &bizfeedItem
	}
	return pBizfeedItem
}
func (c *ConverterImpl) pGofeedEnclosureToPBizfeedEnclosure(source *gofeed.Enclosure) *bizfeed.Enclosure {
	var pBizfeedEnclosure *bizfeed.Enclosure
	if source != nil {
		var bizfeedEnclosure bizfeed.Enclosure
		bizfeedEnclosure.URL = (*source).URL
		bizfeedEnclosure.Length = (*source).Length
		bizfeedEnclosure.Type = (*source).Type
		pBizfeedEnclosure = &bizfeedEnclosure
	}
	return pBizfeedEnclosure
}
func (c *ConverterImpl) pGofeedImageToPBizfeedImage(source *gofeed.Image) *bizfeed.Image {
	var pBizfeedImage *bizfeed.Image
	if source != nil {
		var bizfeedImage bizfeed.Image
		bizfeedImage.URL = (*source).URL
		bizfeedImage.Title = (*source).Title
		pBizfeedImage = &bizfeedImage
	}
	return pBizfeedImage
}
func (c *ConverterImpl) pGofeedPersonToPBizfeedPerson(source *gofeed.Person) *bizfeed.Person {
	var pBizfeedPerson *bizfeed.Person
	if source != nil {
		var bizfeedPerson bizfeed.Person
		bizfeedPerson.Name = (*source).Name
		bizfeedPerson.Email = (*source).Email
		pBizfeedPerson = &bizfeedPerson
	}
	return pBizfeedPerson
}
