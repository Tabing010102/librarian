// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/tuihub/librarian/app/porter/internal/biz/bizfeed"
	"github.com/tuihub/librarian/app/porter/internal/biz/bizs3"
	"github.com/tuihub/librarian/app/porter/internal/biz/bizsteam"
	"github.com/tuihub/librarian/app/porter/internal/client"
	"github.com/tuihub/librarian/app/porter/internal/client/feed"
	"github.com/tuihub/librarian/app/porter/internal/client/steam"
	"github.com/tuihub/librarian/app/porter/internal/data"
	"github.com/tuihub/librarian/app/porter/internal/server"
	"github.com/tuihub/librarian/app/porter/internal/service"
	"github.com/tuihub/librarian/internal/conf"
	"github.com/tuihub/librarian/internal/lib/libapp"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(porter_Server *conf.Porter_Server, porter_Data *conf.Porter_Data, settings *libapp.Settings) (*kratos.App, func(), error) {
	collector := client.NewColly()
	rssRepo, err := feed.NewRSSRepo(collector)
	if err != nil {
		return nil, nil, err
	}
	feedUseCase := bizfeed.NewFeed(rssRepo)
	storeAPI, err := steam.NewStoreAPI(collector)
	if err != nil {
		return nil, nil, err
	}
	webAPI, err := steam.NewWebAPI(collector, porter_Data)
	if err != nil {
		return nil, nil, err
	}
	steamSteam := steam.NewSteam(storeAPI, webAPI)
	dataData, err := data.NewData(porter_Data)
	if err != nil {
		return nil, nil, err
	}
	steamUseCase := bizsteam.NewSteamUseCase(steamSteam, dataData)
	s3Repo := data.NewS3Repo(dataData)
	s3 := bizs3.NewS3(s3Repo)
	librarianPorterServiceServer := service.NewLibrarianPorterServiceService(feedUseCase, steamUseCase, s3)
	grpcServer := server.NewGRPCServer(porter_Server, librarianPorterServiceServer, settings)
	registrar, err := libapp.NewRegistrar()
	if err != nil {
		return nil, nil, err
	}
	app := newApp(grpcServer, registrar)
	return app, func() {
	}, nil
}
