// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/tuihub/librarian/app/sephirah/internal/biz/bizangela"
	"github.com/tuihub/librarian/app/sephirah/internal/biz/bizbinah"
	"github.com/tuihub/librarian/app/sephirah/internal/biz/bizchesed"
	"github.com/tuihub/librarian/app/sephirah/internal/biz/bizgebura"
	"github.com/tuihub/librarian/app/sephirah/internal/biz/biznetzach"
	"github.com/tuihub/librarian/app/sephirah/internal/biz/biztiphereth"
	"github.com/tuihub/librarian/app/sephirah/internal/biz/bizyesod"
	"github.com/tuihub/librarian/app/sephirah/internal/client"
	"github.com/tuihub/librarian/app/sephirah/internal/data"
	"github.com/tuihub/librarian/app/sephirah/internal/service"
	"github.com/tuihub/librarian/app/sephirah/internal/supervisor"
	client2 "github.com/tuihub/librarian/internal/client"
	"github.com/tuihub/librarian/internal/conf"
	"github.com/tuihub/librarian/internal/lib/libapp"
	"github.com/tuihub/librarian/internal/lib/libauth"
	"github.com/tuihub/librarian/internal/lib/libcache"
	"github.com/tuihub/librarian/internal/lib/libcron"
	"github.com/tuihub/librarian/internal/lib/libmq"
	"github.com/tuihub/librarian/internal/lib/libobserve"
	"github.com/tuihub/librarian/internal/server"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(sephirahServer *conf.SephirahServer, database *conf.Database, s3 *conf.S3, porter *conf.Porter, auth *conf.Auth, mq *conf.MQ, cache *conf.Cache, consul *conf.Consul, settings *libapp.Settings) (*kratos.App, func(), error) {
	libauthAuth, err := libauth.NewAuth(auth)
	if err != nil {
		return nil, nil, err
	}
	builtInObserver, err := libobserve.NewBuiltInObserver()
	if err != nil {
		return nil, nil, err
	}
	libmqMQ, cleanup, err := libmq.NewMQ(mq, database, cache, settings, builtInObserver)
	if err != nil {
		return nil, nil, err
	}
	entClient, cleanup2, err := data.NewSQLClient(database, settings)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	dataData := data.NewData(entClient)
	angelaRepo := data.NewAngelaRepo(dataData)
	librarianPorterServiceClient, err := client.NewPorterClient(consul, porter, settings)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	clientPorter, err := client.NewPorter(librarianPorterServiceClient, consul, porter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	netzachRepo := data.NewNetzachRepo(dataData)
	librarianSearcherServiceClient, err := client2.NewSearcherClient(consul, settings)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	searcher := client.NewSearcher(librarianSearcherServiceClient)
	topic := biznetzach.NewSystemNotificationTopic(netzachRepo, searcher)
	tipherethRepo := data.NewTipherethRepo(dataData)
	store, err := libcache.NewStore(cache)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	libcacheMap := biztiphereth.NewPorterInstanceCache(tipherethRepo, store)
	supervisorSupervisor, err := supervisor.NewSupervisor(porter, libauthAuth, clientPorter, topic, libcacheMap)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	geburaRepo := data.NewGeburaRepo(dataData)
	angelaBase, err := bizangela.NewAngelaBase(angelaRepo, supervisorSupervisor, geburaRepo, librarianPorterServiceClient, searcher)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	map2 := bizangela.NewAppInfoCache(geburaRepo, store)
	libmqTopic := bizangela.NewUpdateAppInfoIndexTopic(angelaBase)
	topic2 := bizangela.NewPullAppInfoTopic(angelaBase, map2, libmqTopic)
	topic3 := bizangela.NewPullAccountAppInfoRelationTopic(angelaBase, topic2)
	topic4 := bizangela.NewPullAccountTopic(angelaBase, topic3)
	map3 := bizangela.NewNotifyFlowCache(netzachRepo, store)
	map4 := bizangela.NewFeedToNotifyFlowCache(netzachRepo, store)
	map5 := bizangela.NewNotifyTargetCache(netzachRepo, store)
	topic5 := bizangela.NewNotifyPushTopic(angelaBase, map5)
	topic6 := bizangela.NewNotifyRouterTopic(angelaBase, map3, map4, topic5)
	topic7 := bizangela.NewFeedItemPostprocessTopic(angelaBase, topic6, topic)
	topic8 := bizangela.NewPullFeedTopic(angelaBase, topic7, topic)
	angela, err := bizangela.NewAngela(libmqMQ, topic4, topic3, topic2, topic8, topic6, topic5, topic7, libmqTopic)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cron, err := libcron.NewCron()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	key := biztiphereth.NewUserCountCache(tipherethRepo, store)
	tiphereth, err := biztiphereth.NewTiphereth(settings, tipherethRepo, libauthAuth, supervisorSupervisor, searcher, topic4, cron, key, libcacheMap)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	gebura := bizgebura.NewGebura(geburaRepo, libauthAuth, searcher, librarianPorterServiceClient, supervisorSupervisor, libmqTopic, topic2, map2)
	binahRepo, err := data.NewBinahRepo(s3)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	controlBlock := bizbinah.NewControlBlock(libauthAuth)
	binah := bizbinah.NewBinah(binahRepo, controlBlock, libauthAuth, librarianSearcherServiceClient)
	yesodRepo := data.NewYesodRepo(dataData)
	map6 := bizyesod.NewFeedOwnerCache(yesodRepo, store)
	yesod, err := bizyesod.NewYesod(yesodRepo, supervisorSupervisor, cron, searcher, topic8, topic, map6)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	netzach, err := biznetzach.NewNetzach(netzachRepo, supervisorSupervisor, searcher, libmqMQ, map4, map3, map5, topic)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	chesedRepo := data.NewChesedRepo(dataData)
	librarianMinerServiceClient, err := client2.NewMinerClient(consul, settings)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	map7 := bizchesed.NewImageCache(store)
	chesed, err := bizchesed.NewChesed(chesedRepo, binahRepo, cron, librarianPorterServiceClient, searcher, librarianMinerServiceClient, controlBlock, map7)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v := server.NewAuthMiddleware(libauthAuth)
	librarianSephirahServiceServer := service.NewLibrarianSephirahServiceService(angela, tiphereth, gebura, binah, yesod, netzach, chesed, supervisorSupervisor, settings, libauthAuth, v, sephirahServer, store)
	grpcServer, err := server.NewGRPCServer(sephirahServer, libauthAuth, librarianSephirahServiceServer, settings, builtInObserver)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	httpServer, err := server.NewGrpcWebServer(grpcServer, sephirahServer, libauthAuth, settings, builtInObserver)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	registrar, err := libapp.NewRegistrar(consul)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := newApp(grpcServer, httpServer, libmqMQ, cron, registrar)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
