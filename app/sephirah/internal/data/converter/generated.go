// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package converter

import (
	bizgebura "github.com/tuihub/librarian/app/sephirah/internal/biz/bizgebura"
	biztiphereth "github.com/tuihub/librarian/app/sephirah/internal/biz/biztiphereth"
	bizyesod "github.com/tuihub/librarian/app/sephirah/internal/biz/bizyesod"
	ent "github.com/tuihub/librarian/app/sephirah/internal/ent"
	feedconfig "github.com/tuihub/librarian/app/sephirah/internal/ent/feedconfig"
	user "github.com/tuihub/librarian/app/sephirah/internal/ent/user"
	libauth "github.com/tuihub/librarian/internal/lib/libauth"
	model "github.com/tuihub/librarian/internal/model"
	"time"
)

type toBizConverterImpl struct{}

func (c *toBizConverterImpl) ToBizAccount(source *ent.Account) *biztiphereth.Account {
	var pBiztipherethAccount *biztiphereth.Account
	if source != nil {
		var biztipherethAccount biztiphereth.Account
		biztipherethAccount.InternalID = (*source).ID
		biztipherethAccount.Platform = ToBizAccountPlatform((*source).Platform)
		biztipherethAccount.PlatformAccountID = (*source).PlatformAccountID
		biztipherethAccount.Name = (*source).Name
		biztipherethAccount.ProfileURL = (*source).ProfileURL
		biztipherethAccount.AvatarURL = (*source).AvatarURL
		pBiztipherethAccount = &biztipherethAccount
	}
	return pBiztipherethAccount
}
func (c *toBizConverterImpl) ToBizAccountList(source []*ent.Account) []*biztiphereth.Account {
	var pBiztipherethAccountList []*biztiphereth.Account
	if source != nil {
		pBiztipherethAccountList = make([]*biztiphereth.Account, len(source))
		for i := 0; i < len(source); i++ {
			pBiztipherethAccountList[i] = c.ToBizAccount(source[i])
		}
	}
	return pBiztipherethAccountList
}
func (c *toBizConverterImpl) ToBizApp(source *ent.App) *bizgebura.App {
	var pBizgeburaApp *bizgebura.App
	if source != nil {
		var bizgeburaApp bizgebura.App
		bizgeburaApp.InternalID = (*source).ID
		bizgeburaApp.Source = ToBizAppSource((*source).Source)
		bizgeburaApp.SourceAppID = (*source).SourceAppID
		bizgeburaApp.SourceURL = (*source).SourceURL
		bizgeburaApp.Name = (*source).Name
		bizgeburaApp.Type = ToBizAppType((*source).Type)
		bizgeburaApp.ShortDescription = (*source).ShortDescription
		bizgeburaApp.ImageURL = (*source).ImageURL
		bizgeburaApp.Details = c.entAppToPBizgeburaAppDetails((*source))
		pBizgeburaApp = &bizgeburaApp
	}
	return pBizgeburaApp
}
func (c *toBizConverterImpl) ToBizAppPacakgeBinary(source ent.AppPackage) bizgebura.AppPackageBinary {
	var bizgeburaAppPackageBinary bizgebura.AppPackageBinary
	bizgeburaAppPackageBinary.Name = source.BinaryName
	bizgeburaAppPackageBinary.Size = source.BinarySize
	bizgeburaAppPackageBinary.PublicURL = source.BinaryPublicURL
	return bizgeburaAppPackageBinary
}
func (c *toBizConverterImpl) ToBizAppPackage(source *ent.AppPackage) *bizgebura.AppPackage {
	var pBizgeburaAppPackage *bizgebura.AppPackage
	if source != nil {
		var bizgeburaAppPackage bizgebura.AppPackage
		bizgeburaAppPackage.InternalID = (*source).ID
		bizgeburaAppPackage.Source = ToBizAppPackageSource((*source).Source)
		bizgeburaAppPackage.SourceID = (*source).SourceID
		bizgeburaAppPackage.SourcePackageID = (*source).SourcePackageID
		bizgeburaAppPackage.Name = (*source).Name
		bizgeburaAppPackage.Description = (*source).Description
		bizgeburaAppPackage.Binary = c.entAppPackageToPBizgeburaAppPackageBinary((*source))
		pBizgeburaAppPackage = &bizgeburaAppPackage
	}
	return pBizgeburaAppPackage
}
func (c *toBizConverterImpl) ToBizAppPackageList(source []*ent.AppPackage) []*bizgebura.AppPackage {
	var pBizgeburaAppPackageList []*bizgebura.AppPackage
	if source != nil {
		pBizgeburaAppPackageList = make([]*bizgebura.AppPackage, len(source))
		for i := 0; i < len(source); i++ {
			pBizgeburaAppPackageList[i] = c.ToBizAppPackage(source[i])
		}
	}
	return pBizgeburaAppPackageList
}
func (c *toBizConverterImpl) ToBizFeedConfig(source *ent.FeedConfig) *bizyesod.FeedConfig {
	var pBizyesodFeedConfig *bizyesod.FeedConfig
	if source != nil {
		var bizyesodFeedConfig bizyesod.FeedConfig
		bizyesodFeedConfig.InternalID = (*source).ID
		bizyesodFeedConfig.FeedURL = (*source).FeedURL
		bizyesodFeedConfig.AuthorAccount = (*source).AuthorAccount
		bizyesodFeedConfig.Source = ToBizFeedConfigSource((*source).Source)
		bizyesodFeedConfig.Status = ToBizFeedConfigStatus((*source).Status)
		bizyesodFeedConfig.PullInterval = time.Duration((*source).PullInterval)
		pBizyesodFeedConfig = &bizyesodFeedConfig
	}
	return pBizyesodFeedConfig
}
func (c *toBizConverterImpl) ToBizFeedConfigList(source []*ent.FeedConfig) []*bizyesod.FeedConfig {
	var pBizyesodFeedConfigList []*bizyesod.FeedConfig
	if source != nil {
		pBizyesodFeedConfigList = make([]*bizyesod.FeedConfig, len(source))
		for i := 0; i < len(source); i++ {
			pBizyesodFeedConfigList[i] = c.ToBizFeedConfig(source[i])
		}
	}
	return pBizyesodFeedConfigList
}
func (c *toBizConverterImpl) ToBizUser(source *ent.User) *biztiphereth.User {
	var pBiztipherethUser *biztiphereth.User
	if source != nil {
		var biztipherethUser biztiphereth.User
		biztipherethUser.InternalID = (*source).ID
		biztipherethUser.UserName = (*source).Username
		biztipherethUser.Type = ToLibAuthUserType((*source).Type)
		biztipherethUser.Status = ToBizUserStatus((*source).Status)
		pBiztipherethUser = &biztipherethUser
	}
	return pBiztipherethUser
}
func (c *toBizConverterImpl) ToBizUserList(source []*ent.User) []*biztiphereth.User {
	var pBiztipherethUserList []*biztiphereth.User
	if source != nil {
		pBiztipherethUserList = make([]*biztiphereth.User, len(source))
		for i := 0; i < len(source); i++ {
			pBiztipherethUserList[i] = c.ToBizUser(source[i])
		}
	}
	return pBiztipherethUserList
}
func (c *toBizConverterImpl) entAppPackageToPBizgeburaAppPackageBinary(source ent.AppPackage) *bizgebura.AppPackageBinary {
	bizgeburaAppPackageBinary := c.ToBizAppPacakgeBinary(source)
	return &bizgeburaAppPackageBinary
}
func (c *toBizConverterImpl) entAppToBizgeburaAppDetails(source ent.App) bizgebura.AppDetails {
	var bizgeburaAppDetails bizgebura.AppDetails
	bizgeburaAppDetails.Description = source.Description
	bizgeburaAppDetails.ReleaseDate = source.ReleaseDate
	bizgeburaAppDetails.Developer = source.Developer
	bizgeburaAppDetails.Publisher = source.Publisher
	bizgeburaAppDetails.Version = source.Version
	return bizgeburaAppDetails
}
func (c *toBizConverterImpl) entAppToPBizgeburaAppDetails(source ent.App) *bizgebura.AppDetails {
	bizgeburaAppDetails := c.entAppToBizgeburaAppDetails(source)
	return &bizgeburaAppDetails
}

type toEntConverterImpl struct{}

func (c *toEntConverterImpl) ToEntFeedConfigSourceList(source []bizyesod.FeedConfigSource) []feedconfig.Source {
	var feedconfigSourceList []feedconfig.Source
	if source != nil {
		feedconfigSourceList = make([]feedconfig.Source, len(source))
		for i := 0; i < len(source); i++ {
			feedconfigSourceList[i] = ToEntFeedConfigSource(source[i])
		}
	}
	return feedconfigSourceList
}
func (c *toEntConverterImpl) ToEntFeedConfigStatusList(source []bizyesod.FeedConfigStatus) []feedconfig.Status {
	var feedconfigStatusList []feedconfig.Status
	if source != nil {
		feedconfigStatusList = make([]feedconfig.Status, len(source))
		for i := 0; i < len(source); i++ {
			feedconfigStatusList[i] = ToEntFeedConfigStatus(source[i])
		}
	}
	return feedconfigStatusList
}
func (c *toEntConverterImpl) ToEntInternalIDList(source []model.InternalID) []int64 {
	var int64List []int64
	if source != nil {
		int64List = make([]int64, len(source))
		for i := 0; i < len(source); i++ {
			int64List[i] = ToEntInternalID(source[i])
		}
	}
	return int64List
}
func (c *toEntConverterImpl) ToEntUserStatusList(source []biztiphereth.UserStatus) []user.Status {
	var userStatusList []user.Status
	if source != nil {
		userStatusList = make([]user.Status, len(source))
		for i := 0; i < len(source); i++ {
			userStatusList[i] = ToEntUserStatus(source[i])
		}
	}
	return userStatusList
}
func (c *toEntConverterImpl) ToEntUserTypeList(source []libauth.UserType) []user.Type {
	var userTypeList []user.Type
	if source != nil {
		userTypeList = make([]user.Type, len(source))
		for i := 0; i < len(source); i++ {
			userTypeList[i] = ToEntUserType(source[i])
		}
	}
	return userTypeList
}
