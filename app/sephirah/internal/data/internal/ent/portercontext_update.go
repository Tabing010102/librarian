// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/portercontext"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/app/sephirah/internal/model/modeltiphereth"
	"github.com/tuihub/librarian/internal/model"
)

// PorterContextUpdate is the builder for updating PorterContext entities.
type PorterContextUpdate struct {
	config
	hooks    []Hook
	mutation *PorterContextMutation
}

// Where appends a list predicates to the PorterContextUpdate builder.
func (pcu *PorterContextUpdate) Where(ps ...predicate.PorterContext) *PorterContextUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetUserID sets the "user_id" field.
func (pcu *PorterContextUpdate) SetUserID(mi model.InternalID) *PorterContextUpdate {
	pcu.mutation.ResetUserID()
	pcu.mutation.SetUserID(mi)
	return pcu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableUserID(mi *model.InternalID) *PorterContextUpdate {
	if mi != nil {
		pcu.SetUserID(*mi)
	}
	return pcu
}

// AddUserID adds mi to the "user_id" field.
func (pcu *PorterContextUpdate) AddUserID(mi model.InternalID) *PorterContextUpdate {
	pcu.mutation.AddUserID(mi)
	return pcu
}

// SetPorterID sets the "porter_id" field.
func (pcu *PorterContextUpdate) SetPorterID(mi model.InternalID) *PorterContextUpdate {
	pcu.mutation.ResetPorterID()
	pcu.mutation.SetPorterID(mi)
	return pcu
}

// SetNillablePorterID sets the "porter_id" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillablePorterID(mi *model.InternalID) *PorterContextUpdate {
	if mi != nil {
		pcu.SetPorterID(*mi)
	}
	return pcu
}

// AddPorterID adds mi to the "porter_id" field.
func (pcu *PorterContextUpdate) AddPorterID(mi model.InternalID) *PorterContextUpdate {
	pcu.mutation.AddPorterID(mi)
	return pcu
}

// SetContext sets the "context" field.
func (pcu *PorterContextUpdate) SetContext(mic *modeltiphereth.PorterInstanceContext) *PorterContextUpdate {
	pcu.mutation.SetContext(mic)
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PorterContextUpdate) SetUpdatedAt(t time.Time) *PorterContextUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetCreatedAt sets the "created_at" field.
func (pcu *PorterContextUpdate) SetCreatedAt(t time.Time) *PorterContextUpdate {
	pcu.mutation.SetCreatedAt(t)
	return pcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcu *PorterContextUpdate) SetNillableCreatedAt(t *time.Time) *PorterContextUpdate {
	if t != nil {
		pcu.SetCreatedAt(*t)
	}
	return pcu
}

// Mutation returns the PorterContextMutation object of the builder.
func (pcu *PorterContextUpdate) Mutation() *PorterContextMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PorterContextUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PorterContextUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PorterContextUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PorterContextUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PorterContextUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := portercontext.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

func (pcu *PorterContextUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(portercontext.Table, portercontext.Columns, sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.UserID(); ok {
		_spec.SetField(portercontext.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := pcu.mutation.AddedUserID(); ok {
		_spec.AddField(portercontext.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := pcu.mutation.PorterID(); ok {
		_spec.SetField(portercontext.FieldPorterID, field.TypeInt64, value)
	}
	if value, ok := pcu.mutation.AddedPorterID(); ok {
		_spec.AddField(portercontext.FieldPorterID, field.TypeInt64, value)
	}
	if value, ok := pcu.mutation.Context(); ok {
		_spec.SetField(portercontext.FieldContext, field.TypeJSON, value)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(portercontext.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.CreatedAt(); ok {
		_spec.SetField(portercontext.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portercontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PorterContextUpdateOne is the builder for updating a single PorterContext entity.
type PorterContextUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PorterContextMutation
}

// SetUserID sets the "user_id" field.
func (pcuo *PorterContextUpdateOne) SetUserID(mi model.InternalID) *PorterContextUpdateOne {
	pcuo.mutation.ResetUserID()
	pcuo.mutation.SetUserID(mi)
	return pcuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableUserID(mi *model.InternalID) *PorterContextUpdateOne {
	if mi != nil {
		pcuo.SetUserID(*mi)
	}
	return pcuo
}

// AddUserID adds mi to the "user_id" field.
func (pcuo *PorterContextUpdateOne) AddUserID(mi model.InternalID) *PorterContextUpdateOne {
	pcuo.mutation.AddUserID(mi)
	return pcuo
}

// SetPorterID sets the "porter_id" field.
func (pcuo *PorterContextUpdateOne) SetPorterID(mi model.InternalID) *PorterContextUpdateOne {
	pcuo.mutation.ResetPorterID()
	pcuo.mutation.SetPorterID(mi)
	return pcuo
}

// SetNillablePorterID sets the "porter_id" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillablePorterID(mi *model.InternalID) *PorterContextUpdateOne {
	if mi != nil {
		pcuo.SetPorterID(*mi)
	}
	return pcuo
}

// AddPorterID adds mi to the "porter_id" field.
func (pcuo *PorterContextUpdateOne) AddPorterID(mi model.InternalID) *PorterContextUpdateOne {
	pcuo.mutation.AddPorterID(mi)
	return pcuo
}

// SetContext sets the "context" field.
func (pcuo *PorterContextUpdateOne) SetContext(mic *modeltiphereth.PorterInstanceContext) *PorterContextUpdateOne {
	pcuo.mutation.SetContext(mic)
	return pcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PorterContextUpdateOne) SetUpdatedAt(t time.Time) *PorterContextUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetCreatedAt sets the "created_at" field.
func (pcuo *PorterContextUpdateOne) SetCreatedAt(t time.Time) *PorterContextUpdateOne {
	pcuo.mutation.SetCreatedAt(t)
	return pcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcuo *PorterContextUpdateOne) SetNillableCreatedAt(t *time.Time) *PorterContextUpdateOne {
	if t != nil {
		pcuo.SetCreatedAt(*t)
	}
	return pcuo
}

// Mutation returns the PorterContextMutation object of the builder.
func (pcuo *PorterContextUpdateOne) Mutation() *PorterContextMutation {
	return pcuo.mutation
}

// Where appends a list predicates to the PorterContextUpdate builder.
func (pcuo *PorterContextUpdateOne) Where(ps ...predicate.PorterContext) *PorterContextUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PorterContextUpdateOne) Select(field string, fields ...string) *PorterContextUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PorterContext entity.
func (pcuo *PorterContextUpdateOne) Save(ctx context.Context) (*PorterContext, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PorterContextUpdateOne) SaveX(ctx context.Context) *PorterContext {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PorterContextUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PorterContextUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PorterContextUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := portercontext.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

func (pcuo *PorterContextUpdateOne) sqlSave(ctx context.Context) (_node *PorterContext, err error) {
	_spec := sqlgraph.NewUpdateSpec(portercontext.Table, portercontext.Columns, sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PorterContext.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portercontext.FieldID)
		for _, f := range fields {
			if !portercontext.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portercontext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.UserID(); ok {
		_spec.SetField(portercontext.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := pcuo.mutation.AddedUserID(); ok {
		_spec.AddField(portercontext.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := pcuo.mutation.PorterID(); ok {
		_spec.SetField(portercontext.FieldPorterID, field.TypeInt64, value)
	}
	if value, ok := pcuo.mutation.AddedPorterID(); ok {
		_spec.AddField(portercontext.FieldPorterID, field.TypeInt64, value)
	}
	if value, ok := pcuo.mutation.Context(); ok {
		_spec.SetField(portercontext.FieldContext, field.TypeJSON, value)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(portercontext.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.CreatedAt(); ok {
		_spec.SetField(portercontext.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &PorterContext{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portercontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
