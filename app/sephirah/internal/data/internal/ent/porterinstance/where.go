// Code generated by ent, DO NOT EDIT.

package porterinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/model"
)

// ID filters vertices based on their ID field.
func ID(id model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id model.InternalID) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldVersion, v))
}

// GlobalName applies equality check predicate on the "global_name" field. It's identical to GlobalNameEQ.
func GlobalName(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldGlobalName, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldAddress, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldContainsFold(FieldName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldContainsFold(FieldVersion, v))
}

// GlobalNameEQ applies the EQ predicate on the "global_name" field.
func GlobalNameEQ(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldGlobalName, v))
}

// GlobalNameNEQ applies the NEQ predicate on the "global_name" field.
func GlobalNameNEQ(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNEQ(FieldGlobalName, v))
}

// GlobalNameIn applies the In predicate on the "global_name" field.
func GlobalNameIn(vs ...string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldIn(FieldGlobalName, vs...))
}

// GlobalNameNotIn applies the NotIn predicate on the "global_name" field.
func GlobalNameNotIn(vs ...string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNotIn(FieldGlobalName, vs...))
}

// GlobalNameGT applies the GT predicate on the "global_name" field.
func GlobalNameGT(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGT(FieldGlobalName, v))
}

// GlobalNameGTE applies the GTE predicate on the "global_name" field.
func GlobalNameGTE(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGTE(FieldGlobalName, v))
}

// GlobalNameLT applies the LT predicate on the "global_name" field.
func GlobalNameLT(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLT(FieldGlobalName, v))
}

// GlobalNameLTE applies the LTE predicate on the "global_name" field.
func GlobalNameLTE(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLTE(FieldGlobalName, v))
}

// GlobalNameContains applies the Contains predicate on the "global_name" field.
func GlobalNameContains(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldContains(FieldGlobalName, v))
}

// GlobalNameHasPrefix applies the HasPrefix predicate on the "global_name" field.
func GlobalNameHasPrefix(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldHasPrefix(FieldGlobalName, v))
}

// GlobalNameHasSuffix applies the HasSuffix predicate on the "global_name" field.
func GlobalNameHasSuffix(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldHasSuffix(FieldGlobalName, v))
}

// GlobalNameEqualFold applies the EqualFold predicate on the "global_name" field.
func GlobalNameEqualFold(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEqualFold(FieldGlobalName, v))
}

// GlobalNameContainsFold applies the ContainsFold predicate on the "global_name" field.
func GlobalNameContainsFold(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldContainsFold(FieldGlobalName, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldContainsFold(FieldAddress, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNotIn(FieldStatus, vs...))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PorterInstance {
	return predicate.PorterInstance(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PorterInstance) predicate.PorterInstance {
	return predicate.PorterInstance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PorterInstance) predicate.PorterInstance {
	return predicate.PorterInstance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PorterInstance) predicate.PorterInstance {
	return predicate.PorterInstance(sql.NotPredicates(p))
}
