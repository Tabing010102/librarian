// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/porterprivilege"
	"github.com/tuihub/librarian/app/sephirah/internal/model/modeltiphereth"
	"github.com/tuihub/librarian/model"
)

// PorterPrivilegeCreate is the builder for creating a PorterPrivilege entity.
type PorterPrivilegeCreate struct {
	config
	mutation *PorterPrivilegeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (ppc *PorterPrivilegeCreate) SetUserID(mi model.InternalID) *PorterPrivilegeCreate {
	ppc.mutation.SetUserID(mi)
	return ppc
}

// SetPorterID sets the "porter_id" field.
func (ppc *PorterPrivilegeCreate) SetPorterID(mi model.InternalID) *PorterPrivilegeCreate {
	ppc.mutation.SetPorterID(mi)
	return ppc
}

// SetPrivilege sets the "privilege" field.
func (ppc *PorterPrivilegeCreate) SetPrivilege(mip *modeltiphereth.PorterInstancePrivilege) *PorterPrivilegeCreate {
	ppc.mutation.SetPrivilege(mip)
	return ppc
}

// SetUpdatedAt sets the "updated_at" field.
func (ppc *PorterPrivilegeCreate) SetUpdatedAt(t time.Time) *PorterPrivilegeCreate {
	ppc.mutation.SetUpdatedAt(t)
	return ppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ppc *PorterPrivilegeCreate) SetNillableUpdatedAt(t *time.Time) *PorterPrivilegeCreate {
	if t != nil {
		ppc.SetUpdatedAt(*t)
	}
	return ppc
}

// SetCreatedAt sets the "created_at" field.
func (ppc *PorterPrivilegeCreate) SetCreatedAt(t time.Time) *PorterPrivilegeCreate {
	ppc.mutation.SetCreatedAt(t)
	return ppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppc *PorterPrivilegeCreate) SetNillableCreatedAt(t *time.Time) *PorterPrivilegeCreate {
	if t != nil {
		ppc.SetCreatedAt(*t)
	}
	return ppc
}

// Mutation returns the PorterPrivilegeMutation object of the builder.
func (ppc *PorterPrivilegeCreate) Mutation() *PorterPrivilegeMutation {
	return ppc.mutation
}

// Save creates the PorterPrivilege in the database.
func (ppc *PorterPrivilegeCreate) Save(ctx context.Context) (*PorterPrivilege, error) {
	ppc.defaults()
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PorterPrivilegeCreate) SaveX(ctx context.Context) *PorterPrivilege {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PorterPrivilegeCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PorterPrivilegeCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PorterPrivilegeCreate) defaults() {
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		v := porterprivilege.DefaultUpdatedAt()
		ppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		v := porterprivilege.DefaultCreatedAt()
		ppc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PorterPrivilegeCreate) check() error {
	if _, ok := ppc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PorterPrivilege.user_id"`)}
	}
	if _, ok := ppc.mutation.PorterID(); !ok {
		return &ValidationError{Name: "porter_id", err: errors.New(`ent: missing required field "PorterPrivilege.porter_id"`)}
	}
	if _, ok := ppc.mutation.Privilege(); !ok {
		return &ValidationError{Name: "privilege", err: errors.New(`ent: missing required field "PorterPrivilege.privilege"`)}
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PorterPrivilege.updated_at"`)}
	}
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PorterPrivilege.created_at"`)}
	}
	return nil
}

func (ppc *PorterPrivilegeCreate) sqlSave(ctx context.Context) (*PorterPrivilege, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PorterPrivilegeCreate) createSpec() (*PorterPrivilege, *sqlgraph.CreateSpec) {
	var (
		_node = &PorterPrivilege{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(porterprivilege.Table, sqlgraph.NewFieldSpec(porterprivilege.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ppc.conflict
	if value, ok := ppc.mutation.UserID(); ok {
		_spec.SetField(porterprivilege.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := ppc.mutation.PorterID(); ok {
		_spec.SetField(porterprivilege.FieldPorterID, field.TypeInt64, value)
		_node.PorterID = value
	}
	if value, ok := ppc.mutation.Privilege(); ok {
		_spec.SetField(porterprivilege.FieldPrivilege, field.TypeJSON, value)
		_node.Privilege = value
	}
	if value, ok := ppc.mutation.UpdatedAt(); ok {
		_spec.SetField(porterprivilege.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ppc.mutation.CreatedAt(); ok {
		_spec.SetField(porterprivilege.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PorterPrivilege.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PorterPrivilegeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ppc *PorterPrivilegeCreate) OnConflict(opts ...sql.ConflictOption) *PorterPrivilegeUpsertOne {
	ppc.conflict = opts
	return &PorterPrivilegeUpsertOne{
		create: ppc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PorterPrivilege.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppc *PorterPrivilegeCreate) OnConflictColumns(columns ...string) *PorterPrivilegeUpsertOne {
	ppc.conflict = append(ppc.conflict, sql.ConflictColumns(columns...))
	return &PorterPrivilegeUpsertOne{
		create: ppc,
	}
}

type (
	// PorterPrivilegeUpsertOne is the builder for "upsert"-ing
	//  one PorterPrivilege node.
	PorterPrivilegeUpsertOne struct {
		create *PorterPrivilegeCreate
	}

	// PorterPrivilegeUpsert is the "OnConflict" setter.
	PorterPrivilegeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *PorterPrivilegeUpsert) SetUserID(v model.InternalID) *PorterPrivilegeUpsert {
	u.Set(porterprivilege.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PorterPrivilegeUpsert) UpdateUserID() *PorterPrivilegeUpsert {
	u.SetExcluded(porterprivilege.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *PorterPrivilegeUpsert) AddUserID(v model.InternalID) *PorterPrivilegeUpsert {
	u.Add(porterprivilege.FieldUserID, v)
	return u
}

// SetPorterID sets the "porter_id" field.
func (u *PorterPrivilegeUpsert) SetPorterID(v model.InternalID) *PorterPrivilegeUpsert {
	u.Set(porterprivilege.FieldPorterID, v)
	return u
}

// UpdatePorterID sets the "porter_id" field to the value that was provided on create.
func (u *PorterPrivilegeUpsert) UpdatePorterID() *PorterPrivilegeUpsert {
	u.SetExcluded(porterprivilege.FieldPorterID)
	return u
}

// AddPorterID adds v to the "porter_id" field.
func (u *PorterPrivilegeUpsert) AddPorterID(v model.InternalID) *PorterPrivilegeUpsert {
	u.Add(porterprivilege.FieldPorterID, v)
	return u
}

// SetPrivilege sets the "privilege" field.
func (u *PorterPrivilegeUpsert) SetPrivilege(v *modeltiphereth.PorterInstancePrivilege) *PorterPrivilegeUpsert {
	u.Set(porterprivilege.FieldPrivilege, v)
	return u
}

// UpdatePrivilege sets the "privilege" field to the value that was provided on create.
func (u *PorterPrivilegeUpsert) UpdatePrivilege() *PorterPrivilegeUpsert {
	u.SetExcluded(porterprivilege.FieldPrivilege)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PorterPrivilegeUpsert) SetUpdatedAt(v time.Time) *PorterPrivilegeUpsert {
	u.Set(porterprivilege.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PorterPrivilegeUpsert) UpdateUpdatedAt() *PorterPrivilegeUpsert {
	u.SetExcluded(porterprivilege.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PorterPrivilegeUpsert) SetCreatedAt(v time.Time) *PorterPrivilegeUpsert {
	u.Set(porterprivilege.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PorterPrivilegeUpsert) UpdateCreatedAt() *PorterPrivilegeUpsert {
	u.SetExcluded(porterprivilege.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PorterPrivilege.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PorterPrivilegeUpsertOne) UpdateNewValues() *PorterPrivilegeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PorterPrivilege.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PorterPrivilegeUpsertOne) Ignore() *PorterPrivilegeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PorterPrivilegeUpsertOne) DoNothing() *PorterPrivilegeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PorterPrivilegeCreate.OnConflict
// documentation for more info.
func (u *PorterPrivilegeUpsertOne) Update(set func(*PorterPrivilegeUpsert)) *PorterPrivilegeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PorterPrivilegeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *PorterPrivilegeUpsertOne) SetUserID(v model.InternalID) *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *PorterPrivilegeUpsertOne) AddUserID(v model.InternalID) *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertOne) UpdateUserID() *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdateUserID()
	})
}

// SetPorterID sets the "porter_id" field.
func (u *PorterPrivilegeUpsertOne) SetPorterID(v model.InternalID) *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetPorterID(v)
	})
}

// AddPorterID adds v to the "porter_id" field.
func (u *PorterPrivilegeUpsertOne) AddPorterID(v model.InternalID) *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.AddPorterID(v)
	})
}

// UpdatePorterID sets the "porter_id" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertOne) UpdatePorterID() *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdatePorterID()
	})
}

// SetPrivilege sets the "privilege" field.
func (u *PorterPrivilegeUpsertOne) SetPrivilege(v *modeltiphereth.PorterInstancePrivilege) *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetPrivilege(v)
	})
}

// UpdatePrivilege sets the "privilege" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertOne) UpdatePrivilege() *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdatePrivilege()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PorterPrivilegeUpsertOne) SetUpdatedAt(v time.Time) *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertOne) UpdateUpdatedAt() *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PorterPrivilegeUpsertOne) SetCreatedAt(v time.Time) *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertOne) UpdateCreatedAt() *PorterPrivilegeUpsertOne {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *PorterPrivilegeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PorterPrivilegeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PorterPrivilegeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PorterPrivilegeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PorterPrivilegeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PorterPrivilegeCreateBulk is the builder for creating many PorterPrivilege entities in bulk.
type PorterPrivilegeCreateBulk struct {
	config
	err      error
	builders []*PorterPrivilegeCreate
	conflict []sql.ConflictOption
}

// Save creates the PorterPrivilege entities in the database.
func (ppcb *PorterPrivilegeCreateBulk) Save(ctx context.Context) ([]*PorterPrivilege, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PorterPrivilege, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PorterPrivilegeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ppcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PorterPrivilegeCreateBulk) SaveX(ctx context.Context) []*PorterPrivilege {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PorterPrivilegeCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PorterPrivilegeCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PorterPrivilege.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PorterPrivilegeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ppcb *PorterPrivilegeCreateBulk) OnConflict(opts ...sql.ConflictOption) *PorterPrivilegeUpsertBulk {
	ppcb.conflict = opts
	return &PorterPrivilegeUpsertBulk{
		create: ppcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PorterPrivilege.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppcb *PorterPrivilegeCreateBulk) OnConflictColumns(columns ...string) *PorterPrivilegeUpsertBulk {
	ppcb.conflict = append(ppcb.conflict, sql.ConflictColumns(columns...))
	return &PorterPrivilegeUpsertBulk{
		create: ppcb,
	}
}

// PorterPrivilegeUpsertBulk is the builder for "upsert"-ing
// a bulk of PorterPrivilege nodes.
type PorterPrivilegeUpsertBulk struct {
	create *PorterPrivilegeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PorterPrivilege.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PorterPrivilegeUpsertBulk) UpdateNewValues() *PorterPrivilegeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PorterPrivilege.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PorterPrivilegeUpsertBulk) Ignore() *PorterPrivilegeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PorterPrivilegeUpsertBulk) DoNothing() *PorterPrivilegeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PorterPrivilegeCreateBulk.OnConflict
// documentation for more info.
func (u *PorterPrivilegeUpsertBulk) Update(set func(*PorterPrivilegeUpsert)) *PorterPrivilegeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PorterPrivilegeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *PorterPrivilegeUpsertBulk) SetUserID(v model.InternalID) *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *PorterPrivilegeUpsertBulk) AddUserID(v model.InternalID) *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertBulk) UpdateUserID() *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdateUserID()
	})
}

// SetPorterID sets the "porter_id" field.
func (u *PorterPrivilegeUpsertBulk) SetPorterID(v model.InternalID) *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetPorterID(v)
	})
}

// AddPorterID adds v to the "porter_id" field.
func (u *PorterPrivilegeUpsertBulk) AddPorterID(v model.InternalID) *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.AddPorterID(v)
	})
}

// UpdatePorterID sets the "porter_id" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertBulk) UpdatePorterID() *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdatePorterID()
	})
}

// SetPrivilege sets the "privilege" field.
func (u *PorterPrivilegeUpsertBulk) SetPrivilege(v *modeltiphereth.PorterInstancePrivilege) *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetPrivilege(v)
	})
}

// UpdatePrivilege sets the "privilege" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertBulk) UpdatePrivilege() *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdatePrivilege()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PorterPrivilegeUpsertBulk) SetUpdatedAt(v time.Time) *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertBulk) UpdateUpdatedAt() *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PorterPrivilegeUpsertBulk) SetCreatedAt(v time.Time) *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PorterPrivilegeUpsertBulk) UpdateCreatedAt() *PorterPrivilegeUpsertBulk {
	return u.Update(func(s *PorterPrivilegeUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *PorterPrivilegeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PorterPrivilegeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PorterPrivilegeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PorterPrivilegeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
