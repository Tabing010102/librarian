// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBindAccount holds the string denoting the bind_account edge name in mutations.
	EdgeBindAccount = "bind_account"
	// EdgePurchasedApp holds the string denoting the purchased_app edge name in mutations.
	EdgePurchasedApp = "purchased_app"
	// EdgeAppPackage holds the string denoting the app_package edge name in mutations.
	EdgeAppPackage = "app_package"
	// EdgeFeedConfig holds the string denoting the feed_config edge name in mutations.
	EdgeFeedConfig = "feed_config"
	// EdgeNotifyTarget holds the string denoting the notify_target edge name in mutations.
	EdgeNotifyTarget = "notify_target"
	// EdgeNotifyFlow holds the string denoting the notify_flow edge name in mutations.
	EdgeNotifyFlow = "notify_flow"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeCreatedUser holds the string denoting the created_user edge name in mutations.
	EdgeCreatedUser = "created_user"
	// Table holds the table name of the user in the database.
	Table = "users"
	// BindAccountTable is the table that holds the bind_account relation/edge.
	BindAccountTable = "accounts"
	// BindAccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	BindAccountInverseTable = "accounts"
	// BindAccountColumn is the table column denoting the bind_account relation/edge.
	BindAccountColumn = "user_bind_account"
	// PurchasedAppTable is the table that holds the purchased_app relation/edge. The primary key declared below.
	PurchasedAppTable = "user_purchased_app"
	// PurchasedAppInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	PurchasedAppInverseTable = "apps"
	// AppPackageTable is the table that holds the app_package relation/edge.
	AppPackageTable = "app_packages"
	// AppPackageInverseTable is the table name for the AppPackage entity.
	// It exists in this package in order to avoid circular dependency with the "apppackage" package.
	AppPackageInverseTable = "app_packages"
	// AppPackageColumn is the table column denoting the app_package relation/edge.
	AppPackageColumn = "user_app_package"
	// FeedConfigTable is the table that holds the feed_config relation/edge.
	FeedConfigTable = "feed_configs"
	// FeedConfigInverseTable is the table name for the FeedConfig entity.
	// It exists in this package in order to avoid circular dependency with the "feedconfig" package.
	FeedConfigInverseTable = "feed_configs"
	// FeedConfigColumn is the table column denoting the feed_config relation/edge.
	FeedConfigColumn = "user_feed_config"
	// NotifyTargetTable is the table that holds the notify_target relation/edge.
	NotifyTargetTable = "notify_targets"
	// NotifyTargetInverseTable is the table name for the NotifyTarget entity.
	// It exists in this package in order to avoid circular dependency with the "notifytarget" package.
	NotifyTargetInverseTable = "notify_targets"
	// NotifyTargetColumn is the table column denoting the notify_target relation/edge.
	NotifyTargetColumn = "user_notify_target"
	// NotifyFlowTable is the table that holds the notify_flow relation/edge.
	NotifyFlowTable = "notify_flows"
	// NotifyFlowInverseTable is the table name for the NotifyFlow entity.
	// It exists in this package in order to avoid circular dependency with the "notifyflow" package.
	NotifyFlowInverseTable = "notify_flows"
	// NotifyFlowColumn is the table column denoting the notify_flow relation/edge.
	NotifyFlowColumn = "user_notify_flow"
	// ImageTable is the table that holds the image relation/edge.
	ImageTable = "images"
	// ImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImageInverseTable = "images"
	// ImageColumn is the table column denoting the image relation/edge.
	ImageColumn = "user_image"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "files"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "user_file"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "user_created_user"
	// CreatedUserTable is the table that holds the created_user relation/edge.
	CreatedUserTable = "users"
	// CreatedUserColumn is the table column denoting the created_user relation/edge.
	CreatedUserColumn = "user_created_user"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldStatus,
	FieldType,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_created_user",
}

var (
	// PurchasedAppPrimaryKey and PurchasedAppColumn2 are the table columns denoting the
	// primary key for the purchased_app relation (M2M).
	PurchasedAppPrimaryKey = []string{"user_id", "app_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActive  Status = "active"
	StatusBlocked Status = "blocked"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusBlocked:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeAdmin    Type = "admin"
	TypeNormal   Type = "normal"
	TypeSentinel Type = "sentinel"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeAdmin, TypeNormal, TypeSentinel:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for type field: %q", _type)
	}
}
