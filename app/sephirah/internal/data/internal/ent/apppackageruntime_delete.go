// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/apppackageruntime"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/predicate"
)

// AppPackageRunTimeDelete is the builder for deleting a AppPackageRunTime entity.
type AppPackageRunTimeDelete struct {
	config
	hooks    []Hook
	mutation *AppPackageRunTimeMutation
}

// Where appends a list predicates to the AppPackageRunTimeDelete builder.
func (aprtd *AppPackageRunTimeDelete) Where(ps ...predicate.AppPackageRunTime) *AppPackageRunTimeDelete {
	aprtd.mutation.Where(ps...)
	return aprtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aprtd *AppPackageRunTimeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aprtd.sqlExec, aprtd.mutation, aprtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aprtd *AppPackageRunTimeDelete) ExecX(ctx context.Context) int {
	n, err := aprtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aprtd *AppPackageRunTimeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(apppackageruntime.Table, sqlgraph.NewFieldSpec(apppackageruntime.FieldID, field.TypeInt))
	if ps := aprtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aprtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aprtd.mutation.done = true
	return affected, err
}

// AppPackageRunTimeDeleteOne is the builder for deleting a single AppPackageRunTime entity.
type AppPackageRunTimeDeleteOne struct {
	aprtd *AppPackageRunTimeDelete
}

// Where appends a list predicates to the AppPackageRunTimeDelete builder.
func (aprtdo *AppPackageRunTimeDeleteOne) Where(ps ...predicate.AppPackageRunTime) *AppPackageRunTimeDeleteOne {
	aprtdo.aprtd.mutation.Where(ps...)
	return aprtdo
}

// Exec executes the deletion query.
func (aprtdo *AppPackageRunTimeDeleteOne) Exec(ctx context.Context) error {
	n, err := aprtdo.aprtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{apppackageruntime.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aprtdo *AppPackageRunTimeDeleteOne) ExecX(ctx context.Context) {
	if err := aprtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
