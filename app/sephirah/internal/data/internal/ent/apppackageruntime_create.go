// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/apppackageruntime"
	"github.com/tuihub/librarian/model"
)

// AppPackageRunTimeCreate is the builder for creating a AppPackageRunTime entity.
type AppPackageRunTimeCreate struct {
	config
	mutation *AppPackageRunTimeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (aprtc *AppPackageRunTimeCreate) SetUserID(mi model.InternalID) *AppPackageRunTimeCreate {
	aprtc.mutation.SetUserID(mi)
	return aprtc
}

// SetAppPackageID sets the "app_package_id" field.
func (aprtc *AppPackageRunTimeCreate) SetAppPackageID(mi model.InternalID) *AppPackageRunTimeCreate {
	aprtc.mutation.SetAppPackageID(mi)
	return aprtc
}

// SetStartTime sets the "start_time" field.
func (aprtc *AppPackageRunTimeCreate) SetStartTime(t time.Time) *AppPackageRunTimeCreate {
	aprtc.mutation.SetStartTime(t)
	return aprtc
}

// SetRunDuration sets the "run_duration" field.
func (aprtc *AppPackageRunTimeCreate) SetRunDuration(t time.Duration) *AppPackageRunTimeCreate {
	aprtc.mutation.SetRunDuration(t)
	return aprtc
}

// SetUpdatedAt sets the "updated_at" field.
func (aprtc *AppPackageRunTimeCreate) SetUpdatedAt(t time.Time) *AppPackageRunTimeCreate {
	aprtc.mutation.SetUpdatedAt(t)
	return aprtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aprtc *AppPackageRunTimeCreate) SetNillableUpdatedAt(t *time.Time) *AppPackageRunTimeCreate {
	if t != nil {
		aprtc.SetUpdatedAt(*t)
	}
	return aprtc
}

// SetCreatedAt sets the "created_at" field.
func (aprtc *AppPackageRunTimeCreate) SetCreatedAt(t time.Time) *AppPackageRunTimeCreate {
	aprtc.mutation.SetCreatedAt(t)
	return aprtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aprtc *AppPackageRunTimeCreate) SetNillableCreatedAt(t *time.Time) *AppPackageRunTimeCreate {
	if t != nil {
		aprtc.SetCreatedAt(*t)
	}
	return aprtc
}

// Mutation returns the AppPackageRunTimeMutation object of the builder.
func (aprtc *AppPackageRunTimeCreate) Mutation() *AppPackageRunTimeMutation {
	return aprtc.mutation
}

// Save creates the AppPackageRunTime in the database.
func (aprtc *AppPackageRunTimeCreate) Save(ctx context.Context) (*AppPackageRunTime, error) {
	aprtc.defaults()
	return withHooks(ctx, aprtc.sqlSave, aprtc.mutation, aprtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aprtc *AppPackageRunTimeCreate) SaveX(ctx context.Context) *AppPackageRunTime {
	v, err := aprtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aprtc *AppPackageRunTimeCreate) Exec(ctx context.Context) error {
	_, err := aprtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aprtc *AppPackageRunTimeCreate) ExecX(ctx context.Context) {
	if err := aprtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aprtc *AppPackageRunTimeCreate) defaults() {
	if _, ok := aprtc.mutation.UpdatedAt(); !ok {
		v := apppackageruntime.DefaultUpdatedAt()
		aprtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := aprtc.mutation.CreatedAt(); !ok {
		v := apppackageruntime.DefaultCreatedAt()
		aprtc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aprtc *AppPackageRunTimeCreate) check() error {
	if _, ok := aprtc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AppPackageRunTime.user_id"`)}
	}
	if _, ok := aprtc.mutation.AppPackageID(); !ok {
		return &ValidationError{Name: "app_package_id", err: errors.New(`ent: missing required field "AppPackageRunTime.app_package_id"`)}
	}
	if _, ok := aprtc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "AppPackageRunTime.start_time"`)}
	}
	if _, ok := aprtc.mutation.RunDuration(); !ok {
		return &ValidationError{Name: "run_duration", err: errors.New(`ent: missing required field "AppPackageRunTime.run_duration"`)}
	}
	if _, ok := aprtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppPackageRunTime.updated_at"`)}
	}
	if _, ok := aprtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppPackageRunTime.created_at"`)}
	}
	return nil
}

func (aprtc *AppPackageRunTimeCreate) sqlSave(ctx context.Context) (*AppPackageRunTime, error) {
	if err := aprtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aprtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aprtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aprtc.mutation.id = &_node.ID
	aprtc.mutation.done = true
	return _node, nil
}

func (aprtc *AppPackageRunTimeCreate) createSpec() (*AppPackageRunTime, *sqlgraph.CreateSpec) {
	var (
		_node = &AppPackageRunTime{config: aprtc.config}
		_spec = sqlgraph.NewCreateSpec(apppackageruntime.Table, sqlgraph.NewFieldSpec(apppackageruntime.FieldID, field.TypeInt))
	)
	_spec.OnConflict = aprtc.conflict
	if value, ok := aprtc.mutation.UserID(); ok {
		_spec.SetField(apppackageruntime.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := aprtc.mutation.AppPackageID(); ok {
		_spec.SetField(apppackageruntime.FieldAppPackageID, field.TypeInt64, value)
		_node.AppPackageID = value
	}
	if value, ok := aprtc.mutation.StartTime(); ok {
		_spec.SetField(apppackageruntime.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := aprtc.mutation.RunDuration(); ok {
		_spec.SetField(apppackageruntime.FieldRunDuration, field.TypeInt64, value)
		_node.RunDuration = value
	}
	if value, ok := aprtc.mutation.UpdatedAt(); ok {
		_spec.SetField(apppackageruntime.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aprtc.mutation.CreatedAt(); ok {
		_spec.SetField(apppackageruntime.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppPackageRunTime.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppPackageRunTimeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (aprtc *AppPackageRunTimeCreate) OnConflict(opts ...sql.ConflictOption) *AppPackageRunTimeUpsertOne {
	aprtc.conflict = opts
	return &AppPackageRunTimeUpsertOne{
		create: aprtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppPackageRunTime.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aprtc *AppPackageRunTimeCreate) OnConflictColumns(columns ...string) *AppPackageRunTimeUpsertOne {
	aprtc.conflict = append(aprtc.conflict, sql.ConflictColumns(columns...))
	return &AppPackageRunTimeUpsertOne{
		create: aprtc,
	}
}

type (
	// AppPackageRunTimeUpsertOne is the builder for "upsert"-ing
	//  one AppPackageRunTime node.
	AppPackageRunTimeUpsertOne struct {
		create *AppPackageRunTimeCreate
	}

	// AppPackageRunTimeUpsert is the "OnConflict" setter.
	AppPackageRunTimeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *AppPackageRunTimeUpsert) SetUserID(v model.InternalID) *AppPackageRunTimeUpsert {
	u.Set(apppackageruntime.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsert) UpdateUserID() *AppPackageRunTimeUpsert {
	u.SetExcluded(apppackageruntime.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *AppPackageRunTimeUpsert) AddUserID(v model.InternalID) *AppPackageRunTimeUpsert {
	u.Add(apppackageruntime.FieldUserID, v)
	return u
}

// SetAppPackageID sets the "app_package_id" field.
func (u *AppPackageRunTimeUpsert) SetAppPackageID(v model.InternalID) *AppPackageRunTimeUpsert {
	u.Set(apppackageruntime.FieldAppPackageID, v)
	return u
}

// UpdateAppPackageID sets the "app_package_id" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsert) UpdateAppPackageID() *AppPackageRunTimeUpsert {
	u.SetExcluded(apppackageruntime.FieldAppPackageID)
	return u
}

// AddAppPackageID adds v to the "app_package_id" field.
func (u *AppPackageRunTimeUpsert) AddAppPackageID(v model.InternalID) *AppPackageRunTimeUpsert {
	u.Add(apppackageruntime.FieldAppPackageID, v)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *AppPackageRunTimeUpsert) SetStartTime(v time.Time) *AppPackageRunTimeUpsert {
	u.Set(apppackageruntime.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsert) UpdateStartTime() *AppPackageRunTimeUpsert {
	u.SetExcluded(apppackageruntime.FieldStartTime)
	return u
}

// SetRunDuration sets the "run_duration" field.
func (u *AppPackageRunTimeUpsert) SetRunDuration(v time.Duration) *AppPackageRunTimeUpsert {
	u.Set(apppackageruntime.FieldRunDuration, v)
	return u
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsert) UpdateRunDuration() *AppPackageRunTimeUpsert {
	u.SetExcluded(apppackageruntime.FieldRunDuration)
	return u
}

// AddRunDuration adds v to the "run_duration" field.
func (u *AppPackageRunTimeUpsert) AddRunDuration(v time.Duration) *AppPackageRunTimeUpsert {
	u.Add(apppackageruntime.FieldRunDuration, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppPackageRunTimeUpsert) SetUpdatedAt(v time.Time) *AppPackageRunTimeUpsert {
	u.Set(apppackageruntime.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsert) UpdateUpdatedAt() *AppPackageRunTimeUpsert {
	u.SetExcluded(apppackageruntime.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppPackageRunTimeUpsert) SetCreatedAt(v time.Time) *AppPackageRunTimeUpsert {
	u.Set(apppackageruntime.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsert) UpdateCreatedAt() *AppPackageRunTimeUpsert {
	u.SetExcluded(apppackageruntime.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AppPackageRunTime.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppPackageRunTimeUpsertOne) UpdateNewValues() *AppPackageRunTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppPackageRunTime.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppPackageRunTimeUpsertOne) Ignore() *AppPackageRunTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppPackageRunTimeUpsertOne) DoNothing() *AppPackageRunTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppPackageRunTimeCreate.OnConflict
// documentation for more info.
func (u *AppPackageRunTimeUpsertOne) Update(set func(*AppPackageRunTimeUpsert)) *AppPackageRunTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppPackageRunTimeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppPackageRunTimeUpsertOne) SetUserID(v model.InternalID) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AppPackageRunTimeUpsertOne) AddUserID(v model.InternalID) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertOne) UpdateUserID() *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateUserID()
	})
}

// SetAppPackageID sets the "app_package_id" field.
func (u *AppPackageRunTimeUpsertOne) SetAppPackageID(v model.InternalID) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetAppPackageID(v)
	})
}

// AddAppPackageID adds v to the "app_package_id" field.
func (u *AppPackageRunTimeUpsertOne) AddAppPackageID(v model.InternalID) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.AddAppPackageID(v)
	})
}

// UpdateAppPackageID sets the "app_package_id" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertOne) UpdateAppPackageID() *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateAppPackageID()
	})
}

// SetStartTime sets the "start_time" field.
func (u *AppPackageRunTimeUpsertOne) SetStartTime(v time.Time) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertOne) UpdateStartTime() *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateStartTime()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *AppPackageRunTimeUpsertOne) SetRunDuration(v time.Duration) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *AppPackageRunTimeUpsertOne) AddRunDuration(v time.Duration) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertOne) UpdateRunDuration() *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateRunDuration()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppPackageRunTimeUpsertOne) SetUpdatedAt(v time.Time) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertOne) UpdateUpdatedAt() *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppPackageRunTimeUpsertOne) SetCreatedAt(v time.Time) *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertOne) UpdateCreatedAt() *AppPackageRunTimeUpsertOne {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppPackageRunTimeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppPackageRunTimeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppPackageRunTimeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppPackageRunTimeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppPackageRunTimeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppPackageRunTimeCreateBulk is the builder for creating many AppPackageRunTime entities in bulk.
type AppPackageRunTimeCreateBulk struct {
	config
	err      error
	builders []*AppPackageRunTimeCreate
	conflict []sql.ConflictOption
}

// Save creates the AppPackageRunTime entities in the database.
func (aprtcb *AppPackageRunTimeCreateBulk) Save(ctx context.Context) ([]*AppPackageRunTime, error) {
	if aprtcb.err != nil {
		return nil, aprtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aprtcb.builders))
	nodes := make([]*AppPackageRunTime, len(aprtcb.builders))
	mutators := make([]Mutator, len(aprtcb.builders))
	for i := range aprtcb.builders {
		func(i int, root context.Context) {
			builder := aprtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppPackageRunTimeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aprtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aprtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aprtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aprtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aprtcb *AppPackageRunTimeCreateBulk) SaveX(ctx context.Context) []*AppPackageRunTime {
	v, err := aprtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aprtcb *AppPackageRunTimeCreateBulk) Exec(ctx context.Context) error {
	_, err := aprtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aprtcb *AppPackageRunTimeCreateBulk) ExecX(ctx context.Context) {
	if err := aprtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppPackageRunTime.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppPackageRunTimeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (aprtcb *AppPackageRunTimeCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppPackageRunTimeUpsertBulk {
	aprtcb.conflict = opts
	return &AppPackageRunTimeUpsertBulk{
		create: aprtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppPackageRunTime.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aprtcb *AppPackageRunTimeCreateBulk) OnConflictColumns(columns ...string) *AppPackageRunTimeUpsertBulk {
	aprtcb.conflict = append(aprtcb.conflict, sql.ConflictColumns(columns...))
	return &AppPackageRunTimeUpsertBulk{
		create: aprtcb,
	}
}

// AppPackageRunTimeUpsertBulk is the builder for "upsert"-ing
// a bulk of AppPackageRunTime nodes.
type AppPackageRunTimeUpsertBulk struct {
	create *AppPackageRunTimeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppPackageRunTime.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppPackageRunTimeUpsertBulk) UpdateNewValues() *AppPackageRunTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppPackageRunTime.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppPackageRunTimeUpsertBulk) Ignore() *AppPackageRunTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppPackageRunTimeUpsertBulk) DoNothing() *AppPackageRunTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppPackageRunTimeCreateBulk.OnConflict
// documentation for more info.
func (u *AppPackageRunTimeUpsertBulk) Update(set func(*AppPackageRunTimeUpsert)) *AppPackageRunTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppPackageRunTimeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppPackageRunTimeUpsertBulk) SetUserID(v model.InternalID) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AppPackageRunTimeUpsertBulk) AddUserID(v model.InternalID) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertBulk) UpdateUserID() *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateUserID()
	})
}

// SetAppPackageID sets the "app_package_id" field.
func (u *AppPackageRunTimeUpsertBulk) SetAppPackageID(v model.InternalID) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetAppPackageID(v)
	})
}

// AddAppPackageID adds v to the "app_package_id" field.
func (u *AppPackageRunTimeUpsertBulk) AddAppPackageID(v model.InternalID) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.AddAppPackageID(v)
	})
}

// UpdateAppPackageID sets the "app_package_id" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertBulk) UpdateAppPackageID() *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateAppPackageID()
	})
}

// SetStartTime sets the "start_time" field.
func (u *AppPackageRunTimeUpsertBulk) SetStartTime(v time.Time) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertBulk) UpdateStartTime() *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateStartTime()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *AppPackageRunTimeUpsertBulk) SetRunDuration(v time.Duration) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *AppPackageRunTimeUpsertBulk) AddRunDuration(v time.Duration) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertBulk) UpdateRunDuration() *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateRunDuration()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppPackageRunTimeUpsertBulk) SetUpdatedAt(v time.Time) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertBulk) UpdateUpdatedAt() *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppPackageRunTimeUpsertBulk) SetCreatedAt(v time.Time) *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppPackageRunTimeUpsertBulk) UpdateCreatedAt() *AppPackageRunTimeUpsertBulk {
	return u.Update(func(s *AppPackageRunTimeUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppPackageRunTimeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppPackageRunTimeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppPackageRunTimeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppPackageRunTimeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
