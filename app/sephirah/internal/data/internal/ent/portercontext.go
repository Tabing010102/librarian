// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/portercontext"
	"github.com/tuihub/librarian/app/sephirah/internal/model/modeltiphereth"
	"github.com/tuihub/librarian/internal/model"
)

// PorterContext is the model entity for the PorterContext schema.
type PorterContext struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID model.InternalID `json:"user_id,omitempty"`
	// PorterID holds the value of the "porter_id" field.
	PorterID model.InternalID `json:"porter_id,omitempty"`
	// Context holds the value of the "context" field.
	Context *modeltiphereth.PorterInstanceContext `json:"context,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PorterContext) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case portercontext.FieldContext:
			values[i] = new([]byte)
		case portercontext.FieldID, portercontext.FieldUserID, portercontext.FieldPorterID:
			values[i] = new(sql.NullInt64)
		case portercontext.FieldUpdatedAt, portercontext.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PorterContext fields.
func (pc *PorterContext) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portercontext.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pc.ID = model.InternalID(value.Int64)
			}
		case portercontext.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pc.UserID = model.InternalID(value.Int64)
			}
		case portercontext.FieldPorterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field porter_id", values[i])
			} else if value.Valid {
				pc.PorterID = model.InternalID(value.Int64)
			}
		case portercontext.FieldContext:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.Context); err != nil {
					return fmt.Errorf("unmarshal field context: %w", err)
				}
			}
		case portercontext.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case portercontext.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PorterContext.
// This includes values selected through modifiers, order, etc.
func (pc *PorterContext) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// Update returns a builder for updating this PorterContext.
// Note that you need to call PorterContext.Unwrap() before calling this method if this PorterContext
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PorterContext) Update() *PorterContextUpdateOne {
	return NewPorterContextClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PorterContext entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PorterContext) Unwrap() *PorterContext {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PorterContext is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PorterContext) String() string {
	var builder strings.Builder
	builder.WriteString("PorterContext(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.UserID))
	builder.WriteString(", ")
	builder.WriteString("porter_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.PorterID))
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(fmt.Sprintf("%v", pc.Context))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PorterContexts is a parsable slice of PorterContext.
type PorterContexts []*PorterContext
