// Code generated by ent, DO NOT EDIT.

package deviceinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deviceinfo type in the database.
	Label = "device_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeviceModel holds the string denoting the device_model field in the database.
	FieldDeviceModel = "device_model"
	// FieldSystemVersion holds the string denoting the system_version field in the database.
	FieldSystemVersion = "system_version"
	// FieldClientName holds the string denoting the client_name field in the database.
	FieldClientName = "client_name"
	// FieldClientSourceCodeAddress holds the string denoting the client_source_code_address field in the database.
	FieldClientSourceCodeAddress = "client_source_code_address"
	// FieldClientVersion holds the string denoting the client_version field in the database.
	FieldClientVersion = "client_version"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUserSession holds the string denoting the user_session edge name in mutations.
	EdgeUserSession = "user_session"
	// Table holds the table name of the deviceinfo in the database.
	Table = "device_infos"
	// UserSessionTable is the table that holds the user_session relation/edge.
	UserSessionTable = "user_sessions"
	// UserSessionInverseTable is the table name for the UserSession entity.
	// It exists in this package in order to avoid circular dependency with the "usersession" package.
	UserSessionInverseTable = "user_sessions"
	// UserSessionColumn is the table column denoting the user_session relation/edge.
	UserSessionColumn = "device_info_user_session"
)

// Columns holds all SQL columns for deviceinfo fields.
var Columns = []string{
	FieldID,
	FieldDeviceModel,
	FieldSystemVersion,
	FieldClientName,
	FieldClientSourceCodeAddress,
	FieldClientVersion,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "device_infos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_device_info",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the DeviceInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeviceModel orders the results by the device_model field.
func ByDeviceModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceModel, opts...).ToFunc()
}

// BySystemVersion orders the results by the system_version field.
func BySystemVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemVersion, opts...).ToFunc()
}

// ByClientName orders the results by the client_name field.
func ByClientName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientName, opts...).ToFunc()
}

// ByClientSourceCodeAddress orders the results by the client_source_code_address field.
func ByClientSourceCodeAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSourceCodeAddress, opts...).ToFunc()
}

// ByClientVersion orders the results by the client_version field.
func ByClientVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientVersion, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserSessionCount orders the results by user_session count.
func ByUserSessionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserSessionStep(), opts...)
	}
}

// ByUserSession orders the results by user_session terms.
func ByUserSession(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserSessionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserSessionTable, UserSessionColumn),
	)
}
