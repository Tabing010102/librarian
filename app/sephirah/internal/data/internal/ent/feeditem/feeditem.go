// Code generated by ent, DO NOT EDIT.

package feeditem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the feeditem type in the database.
	Label = "feed_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFeedID holds the string denoting the feed_id field in the database.
	FieldFeedID = "feed_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAuthors holds the string denoting the authors field in the database.
	FieldAuthors = "authors"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldGUID holds the string denoting the guid field in the database.
	FieldGUID = "guid"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldPublished holds the string denoting the published field in the database.
	FieldPublished = "published"
	// FieldPublishedParsed holds the string denoting the published_parsed field in the database.
	FieldPublishedParsed = "published_parsed"
	// FieldUpdated holds the string denoting the updated field in the database.
	FieldUpdated = "updated"
	// FieldUpdatedParsed holds the string denoting the updated_parsed field in the database.
	FieldUpdatedParsed = "updated_parsed"
	// FieldEnclosures holds the string denoting the enclosures field in the database.
	FieldEnclosures = "enclosures"
	// FieldPublishPlatform holds the string denoting the publish_platform field in the database.
	FieldPublishPlatform = "publish_platform"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFeed holds the string denoting the feed edge name in mutations.
	EdgeFeed = "feed"
	// Table holds the table name of the feeditem in the database.
	Table = "feed_items"
	// FeedTable is the table that holds the feed relation/edge.
	FeedTable = "feed_items"
	// FeedInverseTable is the table name for the Feed entity.
	// It exists in this package in order to avoid circular dependency with the "feed" package.
	FeedInverseTable = "feeds"
	// FeedColumn is the table column denoting the feed relation/edge.
	FeedColumn = "feed_id"
)

// Columns holds all SQL columns for feeditem fields.
var Columns = []string{
	FieldID,
	FieldFeedID,
	FieldTitle,
	FieldAuthors,
	FieldDescription,
	FieldContent,
	FieldGUID,
	FieldLink,
	FieldImage,
	FieldPublished,
	FieldPublishedParsed,
	FieldUpdated,
	FieldUpdatedParsed,
	FieldEnclosures,
	FieldPublishPlatform,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the FeedItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFeedID orders the results by the feed_id field.
func ByFeedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByGUID orders the results by the guid field.
func ByGUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGUID, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByPublished orders the results by the published field.
func ByPublished(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublished, opts...).ToFunc()
}

// ByPublishedParsed orders the results by the published_parsed field.
func ByPublishedParsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedParsed, opts...).ToFunc()
}

// ByUpdated orders the results by the updated field.
func ByUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdated, opts...).ToFunc()
}

// ByUpdatedParsed orders the results by the updated_parsed field.
func ByUpdatedParsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedParsed, opts...).ToFunc()
}

// ByPublishPlatform orders the results by the publish_platform field.
func ByPublishPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishPlatform, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByFeedField orders the results by feed field.
func ByFeedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedStep(), sql.OrderByField(field, opts...))
	}
}
func newFeedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeedTable, FeedColumn),
	)
}
