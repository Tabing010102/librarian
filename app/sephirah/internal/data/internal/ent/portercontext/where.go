// Code generated by ent, DO NOT EDIT.

package portercontext

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// ID filters vertices based on their ID field.
func ID(id model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id model.InternalID) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldEQ(FieldUserID, vc))
}

// PorterID applies equality check predicate on the "porter_id" field. It's identical to PorterIDEQ.
func PorterID(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldEQ(FieldPorterID, vc))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldEQ(FieldUserID, vc))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldNEQ(FieldUserID, vc))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...model.InternalID) predicate.PorterContext {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.PorterContext(sql.FieldIn(FieldUserID, v...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...model.InternalID) predicate.PorterContext {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.PorterContext(sql.FieldNotIn(FieldUserID, v...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldGT(FieldUserID, vc))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldGTE(FieldUserID, vc))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldLT(FieldUserID, vc))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldLTE(FieldUserID, vc))
}

// PorterIDEQ applies the EQ predicate on the "porter_id" field.
func PorterIDEQ(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldEQ(FieldPorterID, vc))
}

// PorterIDNEQ applies the NEQ predicate on the "porter_id" field.
func PorterIDNEQ(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldNEQ(FieldPorterID, vc))
}

// PorterIDIn applies the In predicate on the "porter_id" field.
func PorterIDIn(vs ...model.InternalID) predicate.PorterContext {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.PorterContext(sql.FieldIn(FieldPorterID, v...))
}

// PorterIDNotIn applies the NotIn predicate on the "porter_id" field.
func PorterIDNotIn(vs ...model.InternalID) predicate.PorterContext {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.PorterContext(sql.FieldNotIn(FieldPorterID, v...))
}

// PorterIDGT applies the GT predicate on the "porter_id" field.
func PorterIDGT(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldGT(FieldPorterID, vc))
}

// PorterIDGTE applies the GTE predicate on the "porter_id" field.
func PorterIDGTE(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldGTE(FieldPorterID, vc))
}

// PorterIDLT applies the LT predicate on the "porter_id" field.
func PorterIDLT(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldLT(FieldPorterID, vc))
}

// PorterIDLTE applies the LTE predicate on the "porter_id" field.
func PorterIDLTE(v model.InternalID) predicate.PorterContext {
	vc := int64(v)
	return predicate.PorterContext(sql.FieldLTE(FieldPorterID, vc))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PorterContext {
	return predicate.PorterContext(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PorterContext) predicate.PorterContext {
	return predicate.PorterContext(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PorterContext) predicate.PorterContext {
	return predicate.PorterContext(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PorterContext) predicate.PorterContext {
	return predicate.PorterContext(sql.NotPredicates(p))
}
