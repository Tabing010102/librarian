// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/porterprivilege"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/app/sephirah/internal/model/modeltiphereth"
	"github.com/tuihub/librarian/model"
)

// PorterPrivilegeUpdate is the builder for updating PorterPrivilege entities.
type PorterPrivilegeUpdate struct {
	config
	hooks    []Hook
	mutation *PorterPrivilegeMutation
}

// Where appends a list predicates to the PorterPrivilegeUpdate builder.
func (ppu *PorterPrivilegeUpdate) Where(ps ...predicate.PorterPrivilege) *PorterPrivilegeUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetUserID sets the "user_id" field.
func (ppu *PorterPrivilegeUpdate) SetUserID(mi model.InternalID) *PorterPrivilegeUpdate {
	ppu.mutation.ResetUserID()
	ppu.mutation.SetUserID(mi)
	return ppu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ppu *PorterPrivilegeUpdate) SetNillableUserID(mi *model.InternalID) *PorterPrivilegeUpdate {
	if mi != nil {
		ppu.SetUserID(*mi)
	}
	return ppu
}

// AddUserID adds mi to the "user_id" field.
func (ppu *PorterPrivilegeUpdate) AddUserID(mi model.InternalID) *PorterPrivilegeUpdate {
	ppu.mutation.AddUserID(mi)
	return ppu
}

// SetPorterID sets the "porter_id" field.
func (ppu *PorterPrivilegeUpdate) SetPorterID(mi model.InternalID) *PorterPrivilegeUpdate {
	ppu.mutation.ResetPorterID()
	ppu.mutation.SetPorterID(mi)
	return ppu
}

// SetNillablePorterID sets the "porter_id" field if the given value is not nil.
func (ppu *PorterPrivilegeUpdate) SetNillablePorterID(mi *model.InternalID) *PorterPrivilegeUpdate {
	if mi != nil {
		ppu.SetPorterID(*mi)
	}
	return ppu
}

// AddPorterID adds mi to the "porter_id" field.
func (ppu *PorterPrivilegeUpdate) AddPorterID(mi model.InternalID) *PorterPrivilegeUpdate {
	ppu.mutation.AddPorterID(mi)
	return ppu
}

// SetPrivilege sets the "privilege" field.
func (ppu *PorterPrivilegeUpdate) SetPrivilege(mip *modeltiphereth.PorterInstancePrivilege) *PorterPrivilegeUpdate {
	ppu.mutation.SetPrivilege(mip)
	return ppu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppu *PorterPrivilegeUpdate) SetUpdatedAt(t time.Time) *PorterPrivilegeUpdate {
	ppu.mutation.SetUpdatedAt(t)
	return ppu
}

// SetCreatedAt sets the "created_at" field.
func (ppu *PorterPrivilegeUpdate) SetCreatedAt(t time.Time) *PorterPrivilegeUpdate {
	ppu.mutation.SetCreatedAt(t)
	return ppu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppu *PorterPrivilegeUpdate) SetNillableCreatedAt(t *time.Time) *PorterPrivilegeUpdate {
	if t != nil {
		ppu.SetCreatedAt(*t)
	}
	return ppu
}

// Mutation returns the PorterPrivilegeMutation object of the builder.
func (ppu *PorterPrivilegeUpdate) Mutation() *PorterPrivilegeMutation {
	return ppu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PorterPrivilegeUpdate) Save(ctx context.Context) (int, error) {
	ppu.defaults()
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PorterPrivilegeUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PorterPrivilegeUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PorterPrivilegeUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *PorterPrivilegeUpdate) defaults() {
	if _, ok := ppu.mutation.UpdatedAt(); !ok {
		v := porterprivilege.UpdateDefaultUpdatedAt()
		ppu.mutation.SetUpdatedAt(v)
	}
}

func (ppu *PorterPrivilegeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(porterprivilege.Table, porterprivilege.Columns, sqlgraph.NewFieldSpec(porterprivilege.FieldID, field.TypeInt))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.UserID(); ok {
		_spec.SetField(porterprivilege.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ppu.mutation.AddedUserID(); ok {
		_spec.AddField(porterprivilege.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ppu.mutation.PorterID(); ok {
		_spec.SetField(porterprivilege.FieldPorterID, field.TypeInt64, value)
	}
	if value, ok := ppu.mutation.AddedPorterID(); ok {
		_spec.AddField(porterprivilege.FieldPorterID, field.TypeInt64, value)
	}
	if value, ok := ppu.mutation.Privilege(); ok {
		_spec.SetField(porterprivilege.FieldPrivilege, field.TypeJSON, value)
	}
	if value, ok := ppu.mutation.UpdatedAt(); ok {
		_spec.SetField(porterprivilege.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.CreatedAt(); ok {
		_spec.SetField(porterprivilege.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{porterprivilege.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// PorterPrivilegeUpdateOne is the builder for updating a single PorterPrivilege entity.
type PorterPrivilegeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PorterPrivilegeMutation
}

// SetUserID sets the "user_id" field.
func (ppuo *PorterPrivilegeUpdateOne) SetUserID(mi model.InternalID) *PorterPrivilegeUpdateOne {
	ppuo.mutation.ResetUserID()
	ppuo.mutation.SetUserID(mi)
	return ppuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ppuo *PorterPrivilegeUpdateOne) SetNillableUserID(mi *model.InternalID) *PorterPrivilegeUpdateOne {
	if mi != nil {
		ppuo.SetUserID(*mi)
	}
	return ppuo
}

// AddUserID adds mi to the "user_id" field.
func (ppuo *PorterPrivilegeUpdateOne) AddUserID(mi model.InternalID) *PorterPrivilegeUpdateOne {
	ppuo.mutation.AddUserID(mi)
	return ppuo
}

// SetPorterID sets the "porter_id" field.
func (ppuo *PorterPrivilegeUpdateOne) SetPorterID(mi model.InternalID) *PorterPrivilegeUpdateOne {
	ppuo.mutation.ResetPorterID()
	ppuo.mutation.SetPorterID(mi)
	return ppuo
}

// SetNillablePorterID sets the "porter_id" field if the given value is not nil.
func (ppuo *PorterPrivilegeUpdateOne) SetNillablePorterID(mi *model.InternalID) *PorterPrivilegeUpdateOne {
	if mi != nil {
		ppuo.SetPorterID(*mi)
	}
	return ppuo
}

// AddPorterID adds mi to the "porter_id" field.
func (ppuo *PorterPrivilegeUpdateOne) AddPorterID(mi model.InternalID) *PorterPrivilegeUpdateOne {
	ppuo.mutation.AddPorterID(mi)
	return ppuo
}

// SetPrivilege sets the "privilege" field.
func (ppuo *PorterPrivilegeUpdateOne) SetPrivilege(mip *modeltiphereth.PorterInstancePrivilege) *PorterPrivilegeUpdateOne {
	ppuo.mutation.SetPrivilege(mip)
	return ppuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ppuo *PorterPrivilegeUpdateOne) SetUpdatedAt(t time.Time) *PorterPrivilegeUpdateOne {
	ppuo.mutation.SetUpdatedAt(t)
	return ppuo
}

// SetCreatedAt sets the "created_at" field.
func (ppuo *PorterPrivilegeUpdateOne) SetCreatedAt(t time.Time) *PorterPrivilegeUpdateOne {
	ppuo.mutation.SetCreatedAt(t)
	return ppuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppuo *PorterPrivilegeUpdateOne) SetNillableCreatedAt(t *time.Time) *PorterPrivilegeUpdateOne {
	if t != nil {
		ppuo.SetCreatedAt(*t)
	}
	return ppuo
}

// Mutation returns the PorterPrivilegeMutation object of the builder.
func (ppuo *PorterPrivilegeUpdateOne) Mutation() *PorterPrivilegeMutation {
	return ppuo.mutation
}

// Where appends a list predicates to the PorterPrivilegeUpdate builder.
func (ppuo *PorterPrivilegeUpdateOne) Where(ps ...predicate.PorterPrivilege) *PorterPrivilegeUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PorterPrivilegeUpdateOne) Select(field string, fields ...string) *PorterPrivilegeUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PorterPrivilege entity.
func (ppuo *PorterPrivilegeUpdateOne) Save(ctx context.Context) (*PorterPrivilege, error) {
	ppuo.defaults()
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PorterPrivilegeUpdateOne) SaveX(ctx context.Context) *PorterPrivilege {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PorterPrivilegeUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PorterPrivilegeUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *PorterPrivilegeUpdateOne) defaults() {
	if _, ok := ppuo.mutation.UpdatedAt(); !ok {
		v := porterprivilege.UpdateDefaultUpdatedAt()
		ppuo.mutation.SetUpdatedAt(v)
	}
}

func (ppuo *PorterPrivilegeUpdateOne) sqlSave(ctx context.Context) (_node *PorterPrivilege, err error) {
	_spec := sqlgraph.NewUpdateSpec(porterprivilege.Table, porterprivilege.Columns, sqlgraph.NewFieldSpec(porterprivilege.FieldID, field.TypeInt))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PorterPrivilege.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, porterprivilege.FieldID)
		for _, f := range fields {
			if !porterprivilege.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != porterprivilege.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.UserID(); ok {
		_spec.SetField(porterprivilege.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ppuo.mutation.AddedUserID(); ok {
		_spec.AddField(porterprivilege.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ppuo.mutation.PorterID(); ok {
		_spec.SetField(porterprivilege.FieldPorterID, field.TypeInt64, value)
	}
	if value, ok := ppuo.mutation.AddedPorterID(); ok {
		_spec.AddField(porterprivilege.FieldPorterID, field.TypeInt64, value)
	}
	if value, ok := ppuo.mutation.Privilege(); ok {
		_spec.SetField(porterprivilege.FieldPrivilege, field.TypeJSON, value)
	}
	if value, ok := ppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(porterprivilege.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.CreatedAt(); ok {
		_spec.SetField(porterprivilege.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &PorterPrivilege{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{porterprivilege.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
