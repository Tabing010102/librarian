// Code generated by ent, DO NOT EDIT.

package account

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldPlatformAccountID holds the string denoting the platform_account_id field in the database.
	FieldPlatformAccountID = "platform_account_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProfileURL holds the string denoting the profile_url field in the database.
	FieldProfileURL = "profile_url"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBindUser holds the string denoting the bind_user edge name in mutations.
	EdgeBindUser = "bind_user"
	// Table holds the table name of the account in the database.
	Table = "accounts"
	// BindUserTable is the table that holds the bind_user relation/edge.
	BindUserTable = "accounts"
	// BindUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BindUserInverseTable = "users"
	// BindUserColumn is the table column denoting the bind_user relation/edge.
	BindUserColumn = "user_bind_account"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldPlatform,
	FieldPlatformAccountID,
	FieldName,
	FieldProfileURL,
	FieldAvatarURL,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "accounts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_bind_account",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Platform defines the type for the "platform" enum field.
type Platform string

// Platform values.
const (
	PlatformSteam Platform = "steam"
)

func (pl Platform) String() string {
	return string(pl)
}

// PlatformValidator is a validator for the "platform" field enum values. It is called by the builders before save.
func PlatformValidator(pl Platform) error {
	switch pl {
	case PlatformSteam:
		return nil
	default:
		return fmt.Errorf("account: invalid enum value for platform field: %q", pl)
	}
}
