// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/migrate"
	"github.com/tuihub/librarian/internal/model"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/account"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/apppackage"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feed"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/feeditem"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/file"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/image"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/notifyflowtarget"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/notifytarget"
	"github.com/tuihub/librarian/app/sephirah/internal/data/internal/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// App is the client for interacting with the App builders.
	App *AppClient
	// AppPackage is the client for interacting with the AppPackage builders.
	AppPackage *AppPackageClient
	// Feed is the client for interacting with the Feed builders.
	Feed *FeedClient
	// FeedConfig is the client for interacting with the FeedConfig builders.
	FeedConfig *FeedConfigClient
	// FeedItem is the client for interacting with the FeedItem builders.
	FeedItem *FeedItemClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// NotifyFlow is the client for interacting with the NotifyFlow builders.
	NotifyFlow *NotifyFlowClient
	// NotifyFlowTarget is the client for interacting with the NotifyFlowTarget builders.
	NotifyFlowTarget *NotifyFlowTargetClient
	// NotifyTarget is the client for interacting with the NotifyTarget builders.
	NotifyTarget *NotifyTargetClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.App = NewAppClient(c.config)
	c.AppPackage = NewAppPackageClient(c.config)
	c.Feed = NewFeedClient(c.config)
	c.FeedConfig = NewFeedConfigClient(c.config)
	c.FeedItem = NewFeedItemClient(c.config)
	c.File = NewFileClient(c.config)
	c.Image = NewImageClient(c.config)
	c.NotifyFlow = NewNotifyFlowClient(c.config)
	c.NotifyFlowTarget = NewNotifyFlowTargetClient(c.config)
	c.NotifyTarget = NewNotifyTargetClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Account:          NewAccountClient(cfg),
		App:              NewAppClient(cfg),
		AppPackage:       NewAppPackageClient(cfg),
		Feed:             NewFeedClient(cfg),
		FeedConfig:       NewFeedConfigClient(cfg),
		FeedItem:         NewFeedItemClient(cfg),
		File:             NewFileClient(cfg),
		Image:            NewImageClient(cfg),
		NotifyFlow:       NewNotifyFlowClient(cfg),
		NotifyFlowTarget: NewNotifyFlowTargetClient(cfg),
		NotifyTarget:     NewNotifyTargetClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Account:          NewAccountClient(cfg),
		App:              NewAppClient(cfg),
		AppPackage:       NewAppPackageClient(cfg),
		Feed:             NewFeedClient(cfg),
		FeedConfig:       NewFeedConfigClient(cfg),
		FeedItem:         NewFeedItemClient(cfg),
		File:             NewFileClient(cfg),
		Image:            NewImageClient(cfg),
		NotifyFlow:       NewNotifyFlowClient(cfg),
		NotifyFlowTarget: NewNotifyFlowTargetClient(cfg),
		NotifyTarget:     NewNotifyTargetClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Account, c.App, c.AppPackage, c.Feed, c.FeedConfig, c.FeedItem, c.File,
		c.Image, c.NotifyFlow, c.NotifyFlowTarget, c.NotifyTarget, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Account, c.App, c.AppPackage, c.Feed, c.FeedConfig, c.FeedItem, c.File,
		c.Image, c.NotifyFlow, c.NotifyFlowTarget, c.NotifyTarget, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountMutation:
		return c.Account.mutate(ctx, m)
	case *AppMutation:
		return c.App.mutate(ctx, m)
	case *AppPackageMutation:
		return c.AppPackage.mutate(ctx, m)
	case *FeedMutation:
		return c.Feed.mutate(ctx, m)
	case *FeedConfigMutation:
		return c.FeedConfig.mutate(ctx, m)
	case *FeedItemMutation:
		return c.FeedItem.mutate(ctx, m)
	case *FileMutation:
		return c.File.mutate(ctx, m)
	case *ImageMutation:
		return c.Image.mutate(ctx, m)
	case *NotifyFlowMutation:
		return c.NotifyFlow.mutate(ctx, m)
	case *NotifyFlowTargetMutation:
		return c.NotifyFlowTarget.mutate(ctx, m)
	case *NotifyTargetMutation:
		return c.NotifyTarget.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `account.Intercept(f(g(h())))`.
func (c *AccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Account = append(c.inters.Account, interceptors...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id model.InternalID) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id model.InternalID) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id model.InternalID) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id model.InternalID) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBindUser queries the bind_user edge of a Account.
func (c *AccountClient) QueryBindUser(a *Account) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(account.Table, account.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, account.BindUserTable, account.BindUserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// Interceptors returns the client interceptors.
func (c *AccountClient) Interceptors() []Interceptor {
	return c.inters.Account
}

func (c *AccountClient) mutate(ctx context.Context, m *AccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Account mutation op: %q", m.Op())
	}
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `app.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `app.Intercept(f(g(h())))`.
func (c *AppClient) Intercept(interceptors ...Interceptor) {
	c.inters.App = append(c.inters.App, interceptors...)
}

// Create returns a builder for creating a App entity.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id model.InternalID) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppClient) DeleteOneID(id model.InternalID) *AppDeleteOne {
	builder := c.Delete().Where(app.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApp},
		inters: c.Interceptors(),
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id model.InternalID) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id model.InternalID) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPurchasedBy queries the purchased_by edge of a App.
func (c *AppClient) QueryPurchasedBy(a *App) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, app.PurchasedByTable, app.PurchasedByPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppPackage queries the app_package edge of a App.
func (c *AppClient) QueryAppPackage(a *App) *AppPackageQuery {
	query := (&AppPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(apppackage.Table, apppackage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.AppPackageTable, app.AppPackageColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBindInternal queries the bind_internal edge of a App.
func (c *AppClient) QueryBindInternal(a *App) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, app.BindInternalTable, app.BindInternalColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBindExternal queries the bind_external edge of a App.
func (c *AppClient) QueryBindExternal(a *App) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.BindExternalTable, app.BindExternalColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	return c.hooks.App
}

// Interceptors returns the client interceptors.
func (c *AppClient) Interceptors() []Interceptor {
	return c.inters.App
}

func (c *AppClient) mutate(ctx context.Context, m *AppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown App mutation op: %q", m.Op())
	}
}

// AppPackageClient is a client for the AppPackage schema.
type AppPackageClient struct {
	config
}

// NewAppPackageClient returns a client for the AppPackage from the given config.
func NewAppPackageClient(c config) *AppPackageClient {
	return &AppPackageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apppackage.Hooks(f(g(h())))`.
func (c *AppPackageClient) Use(hooks ...Hook) {
	c.hooks.AppPackage = append(c.hooks.AppPackage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apppackage.Intercept(f(g(h())))`.
func (c *AppPackageClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppPackage = append(c.inters.AppPackage, interceptors...)
}

// Create returns a builder for creating a AppPackage entity.
func (c *AppPackageClient) Create() *AppPackageCreate {
	mutation := newAppPackageMutation(c.config, OpCreate)
	return &AppPackageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppPackage entities.
func (c *AppPackageClient) CreateBulk(builders ...*AppPackageCreate) *AppPackageCreateBulk {
	return &AppPackageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppPackage.
func (c *AppPackageClient) Update() *AppPackageUpdate {
	mutation := newAppPackageMutation(c.config, OpUpdate)
	return &AppPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppPackageClient) UpdateOne(ap *AppPackage) *AppPackageUpdateOne {
	mutation := newAppPackageMutation(c.config, OpUpdateOne, withAppPackage(ap))
	return &AppPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppPackageClient) UpdateOneID(id model.InternalID) *AppPackageUpdateOne {
	mutation := newAppPackageMutation(c.config, OpUpdateOne, withAppPackageID(id))
	return &AppPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppPackage.
func (c *AppPackageClient) Delete() *AppPackageDelete {
	mutation := newAppPackageMutation(c.config, OpDelete)
	return &AppPackageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppPackageClient) DeleteOne(ap *AppPackage) *AppPackageDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppPackageClient) DeleteOneID(id model.InternalID) *AppPackageDeleteOne {
	builder := c.Delete().Where(apppackage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppPackageDeleteOne{builder}
}

// Query returns a query builder for AppPackage.
func (c *AppPackageClient) Query() *AppPackageQuery {
	return &AppPackageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppPackage},
		inters: c.Interceptors(),
	}
}

// Get returns a AppPackage entity by its id.
func (c *AppPackageClient) Get(ctx context.Context, id model.InternalID) (*AppPackage, error) {
	return c.Query().Where(apppackage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppPackageClient) GetX(ctx context.Context, id model.InternalID) *AppPackage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a AppPackage.
func (c *AppPackageClient) QueryOwner(ap *AppPackage) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apppackage.Table, apppackage.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apppackage.OwnerTable, apppackage.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a AppPackage.
func (c *AppPackageClient) QueryApp(ap *AppPackage) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apppackage.Table, apppackage.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apppackage.AppTable, apppackage.AppColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppPackageClient) Hooks() []Hook {
	return c.hooks.AppPackage
}

// Interceptors returns the client interceptors.
func (c *AppPackageClient) Interceptors() []Interceptor {
	return c.inters.AppPackage
}

func (c *AppPackageClient) mutate(ctx context.Context, m *AppPackageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppPackageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppPackageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppPackage mutation op: %q", m.Op())
	}
}

// FeedClient is a client for the Feed schema.
type FeedClient struct {
	config
}

// NewFeedClient returns a client for the Feed from the given config.
func NewFeedClient(c config) *FeedClient {
	return &FeedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feed.Hooks(f(g(h())))`.
func (c *FeedClient) Use(hooks ...Hook) {
	c.hooks.Feed = append(c.hooks.Feed, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feed.Intercept(f(g(h())))`.
func (c *FeedClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feed = append(c.inters.Feed, interceptors...)
}

// Create returns a builder for creating a Feed entity.
func (c *FeedClient) Create() *FeedCreate {
	mutation := newFeedMutation(c.config, OpCreate)
	return &FeedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feed entities.
func (c *FeedClient) CreateBulk(builders ...*FeedCreate) *FeedCreateBulk {
	return &FeedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feed.
func (c *FeedClient) Update() *FeedUpdate {
	mutation := newFeedMutation(c.config, OpUpdate)
	return &FeedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedClient) UpdateOne(f *Feed) *FeedUpdateOne {
	mutation := newFeedMutation(c.config, OpUpdateOne, withFeed(f))
	return &FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedClient) UpdateOneID(id model.InternalID) *FeedUpdateOne {
	mutation := newFeedMutation(c.config, OpUpdateOne, withFeedID(id))
	return &FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feed.
func (c *FeedClient) Delete() *FeedDelete {
	mutation := newFeedMutation(c.config, OpDelete)
	return &FeedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedClient) DeleteOne(f *Feed) *FeedDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedClient) DeleteOneID(id model.InternalID) *FeedDeleteOne {
	builder := c.Delete().Where(feed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedDeleteOne{builder}
}

// Query returns a query builder for Feed.
func (c *FeedClient) Query() *FeedQuery {
	return &FeedQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeed},
		inters: c.Interceptors(),
	}
}

// Get returns a Feed entity by its id.
func (c *FeedClient) Get(ctx context.Context, id model.InternalID) (*Feed, error) {
	return c.Query().Where(feed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedClient) GetX(ctx context.Context, id model.InternalID) *Feed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItem queries the item edge of a Feed.
func (c *FeedClient) QueryItem(f *Feed) *FeedItemQuery {
	query := (&FeedItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feed.Table, feed.FieldID, id),
			sqlgraph.To(feeditem.Table, feeditem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, feed.ItemTable, feed.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfig queries the config edge of a Feed.
func (c *FeedClient) QueryConfig(f *Feed) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feed.Table, feed.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, feed.ConfigTable, feed.ConfigColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedClient) Hooks() []Hook {
	return c.hooks.Feed
}

// Interceptors returns the client interceptors.
func (c *FeedClient) Interceptors() []Interceptor {
	return c.inters.Feed
}

func (c *FeedClient) mutate(ctx context.Context, m *FeedMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feed mutation op: %q", m.Op())
	}
}

// FeedConfigClient is a client for the FeedConfig schema.
type FeedConfigClient struct {
	config
}

// NewFeedConfigClient returns a client for the FeedConfig from the given config.
func NewFeedConfigClient(c config) *FeedConfigClient {
	return &FeedConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedconfig.Hooks(f(g(h())))`.
func (c *FeedConfigClient) Use(hooks ...Hook) {
	c.hooks.FeedConfig = append(c.hooks.FeedConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedconfig.Intercept(f(g(h())))`.
func (c *FeedConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedConfig = append(c.inters.FeedConfig, interceptors...)
}

// Create returns a builder for creating a FeedConfig entity.
func (c *FeedConfigClient) Create() *FeedConfigCreate {
	mutation := newFeedConfigMutation(c.config, OpCreate)
	return &FeedConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedConfig entities.
func (c *FeedConfigClient) CreateBulk(builders ...*FeedConfigCreate) *FeedConfigCreateBulk {
	return &FeedConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedConfig.
func (c *FeedConfigClient) Update() *FeedConfigUpdate {
	mutation := newFeedConfigMutation(c.config, OpUpdate)
	return &FeedConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedConfigClient) UpdateOne(fc *FeedConfig) *FeedConfigUpdateOne {
	mutation := newFeedConfigMutation(c.config, OpUpdateOne, withFeedConfig(fc))
	return &FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedConfigClient) UpdateOneID(id model.InternalID) *FeedConfigUpdateOne {
	mutation := newFeedConfigMutation(c.config, OpUpdateOne, withFeedConfigID(id))
	return &FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedConfig.
func (c *FeedConfigClient) Delete() *FeedConfigDelete {
	mutation := newFeedConfigMutation(c.config, OpDelete)
	return &FeedConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedConfigClient) DeleteOne(fc *FeedConfig) *FeedConfigDeleteOne {
	return c.DeleteOneID(fc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedConfigClient) DeleteOneID(id model.InternalID) *FeedConfigDeleteOne {
	builder := c.Delete().Where(feedconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedConfigDeleteOne{builder}
}

// Query returns a query builder for FeedConfig.
func (c *FeedConfigClient) Query() *FeedConfigQuery {
	return &FeedConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedConfig entity by its id.
func (c *FeedConfigClient) Get(ctx context.Context, id model.InternalID) (*FeedConfig, error) {
	return c.Query().Where(feedconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedConfigClient) GetX(ctx context.Context, id model.InternalID) *FeedConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a FeedConfig.
func (c *FeedConfigClient) QueryOwner(fc *FeedConfig) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feedconfig.OwnerTable, feedconfig.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeed queries the feed edge of a FeedConfig.
func (c *FeedConfigClient) QueryFeed(fc *FeedConfig) *FeedQuery {
	query := (&FeedClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(feed.Table, feed.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, feedconfig.FeedTable, feedconfig.FeedColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a FeedConfig.
func (c *FeedConfigClient) QueryNotifyFlow(fc *FeedConfig) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedconfig.Table, feedconfig.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, feedconfig.NotifyFlowTable, feedconfig.NotifyFlowPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedConfigClient) Hooks() []Hook {
	return c.hooks.FeedConfig
}

// Interceptors returns the client interceptors.
func (c *FeedConfigClient) Interceptors() []Interceptor {
	return c.inters.FeedConfig
}

func (c *FeedConfigClient) mutate(ctx context.Context, m *FeedConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedConfig mutation op: %q", m.Op())
	}
}

// FeedItemClient is a client for the FeedItem schema.
type FeedItemClient struct {
	config
}

// NewFeedItemClient returns a client for the FeedItem from the given config.
func NewFeedItemClient(c config) *FeedItemClient {
	return &FeedItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feeditem.Hooks(f(g(h())))`.
func (c *FeedItemClient) Use(hooks ...Hook) {
	c.hooks.FeedItem = append(c.hooks.FeedItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feeditem.Intercept(f(g(h())))`.
func (c *FeedItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.FeedItem = append(c.inters.FeedItem, interceptors...)
}

// Create returns a builder for creating a FeedItem entity.
func (c *FeedItemClient) Create() *FeedItemCreate {
	mutation := newFeedItemMutation(c.config, OpCreate)
	return &FeedItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FeedItem entities.
func (c *FeedItemClient) CreateBulk(builders ...*FeedItemCreate) *FeedItemCreateBulk {
	return &FeedItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FeedItem.
func (c *FeedItemClient) Update() *FeedItemUpdate {
	mutation := newFeedItemMutation(c.config, OpUpdate)
	return &FeedItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedItemClient) UpdateOne(fi *FeedItem) *FeedItemUpdateOne {
	mutation := newFeedItemMutation(c.config, OpUpdateOne, withFeedItem(fi))
	return &FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedItemClient) UpdateOneID(id model.InternalID) *FeedItemUpdateOne {
	mutation := newFeedItemMutation(c.config, OpUpdateOne, withFeedItemID(id))
	return &FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FeedItem.
func (c *FeedItemClient) Delete() *FeedItemDelete {
	mutation := newFeedItemMutation(c.config, OpDelete)
	return &FeedItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedItemClient) DeleteOne(fi *FeedItem) *FeedItemDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedItemClient) DeleteOneID(id model.InternalID) *FeedItemDeleteOne {
	builder := c.Delete().Where(feeditem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedItemDeleteOne{builder}
}

// Query returns a query builder for FeedItem.
func (c *FeedItemClient) Query() *FeedItemQuery {
	return &FeedItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedItem},
		inters: c.Interceptors(),
	}
}

// Get returns a FeedItem entity by its id.
func (c *FeedItemClient) Get(ctx context.Context, id model.InternalID) (*FeedItem, error) {
	return c.Query().Where(feeditem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedItemClient) GetX(ctx context.Context, id model.InternalID) *FeedItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFeed queries the feed edge of a FeedItem.
func (c *FeedItemClient) QueryFeed(fi *FeedItem) *FeedQuery {
	query := (&FeedClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feeditem.Table, feeditem.FieldID, id),
			sqlgraph.To(feed.Table, feed.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feeditem.FeedTable, feeditem.FeedColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedItemClient) Hooks() []Hook {
	return c.hooks.FeedItem
}

// Interceptors returns the client interceptors.
func (c *FeedItemClient) Interceptors() []Interceptor {
	return c.inters.FeedItem
}

func (c *FeedItemClient) mutate(ctx context.Context, m *FeedItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FeedItem mutation op: %q", m.Op())
	}
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `file.Intercept(f(g(h())))`.
func (c *FileClient) Intercept(interceptors ...Interceptor) {
	c.inters.File = append(c.inters.File, interceptors...)
}

// Create returns a builder for creating a File entity.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id model.InternalID) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FileClient) DeleteOneID(id model.InternalID) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFile},
		inters: c.Interceptors(),
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id model.InternalID) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id model.InternalID) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a File.
func (c *FileClient) QueryOwner(f *File) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.OwnerTable, file.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a File.
func (c *FileClient) QueryImage(f *File) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, file.ImageTable, file.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// Interceptors returns the client interceptors.
func (c *FileClient) Interceptors() []Interceptor {
	return c.inters.File
}

func (c *FileClient) mutate(ctx context.Context, m *FileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown File mutation op: %q", m.Op())
	}
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `image.Intercept(f(g(h())))`.
func (c *ImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Image = append(c.inters.Image, interceptors...)
}

// Create returns a builder for creating a Image entity.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id model.InternalID) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageClient) DeleteOneID(id model.InternalID) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id model.InternalID) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id model.InternalID) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Image.
func (c *ImageClient) QueryOwner(i *Image) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.OwnerTable, image.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a Image.
func (c *ImageClient) QueryFile(i *Image) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, image.FileTable, image.FileColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// Interceptors returns the client interceptors.
func (c *ImageClient) Interceptors() []Interceptor {
	return c.inters.Image
}

func (c *ImageClient) mutate(ctx context.Context, m *ImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Image mutation op: %q", m.Op())
	}
}

// NotifyFlowClient is a client for the NotifyFlow schema.
type NotifyFlowClient struct {
	config
}

// NewNotifyFlowClient returns a client for the NotifyFlow from the given config.
func NewNotifyFlowClient(c config) *NotifyFlowClient {
	return &NotifyFlowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifyflow.Hooks(f(g(h())))`.
func (c *NotifyFlowClient) Use(hooks ...Hook) {
	c.hooks.NotifyFlow = append(c.hooks.NotifyFlow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifyflow.Intercept(f(g(h())))`.
func (c *NotifyFlowClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyFlow = append(c.inters.NotifyFlow, interceptors...)
}

// Create returns a builder for creating a NotifyFlow entity.
func (c *NotifyFlowClient) Create() *NotifyFlowCreate {
	mutation := newNotifyFlowMutation(c.config, OpCreate)
	return &NotifyFlowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyFlow entities.
func (c *NotifyFlowClient) CreateBulk(builders ...*NotifyFlowCreate) *NotifyFlowCreateBulk {
	return &NotifyFlowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyFlow.
func (c *NotifyFlowClient) Update() *NotifyFlowUpdate {
	mutation := newNotifyFlowMutation(c.config, OpUpdate)
	return &NotifyFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyFlowClient) UpdateOne(nf *NotifyFlow) *NotifyFlowUpdateOne {
	mutation := newNotifyFlowMutation(c.config, OpUpdateOne, withNotifyFlow(nf))
	return &NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyFlowClient) UpdateOneID(id model.InternalID) *NotifyFlowUpdateOne {
	mutation := newNotifyFlowMutation(c.config, OpUpdateOne, withNotifyFlowID(id))
	return &NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyFlow.
func (c *NotifyFlowClient) Delete() *NotifyFlowDelete {
	mutation := newNotifyFlowMutation(c.config, OpDelete)
	return &NotifyFlowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyFlowClient) DeleteOne(nf *NotifyFlow) *NotifyFlowDeleteOne {
	return c.DeleteOneID(nf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyFlowClient) DeleteOneID(id model.InternalID) *NotifyFlowDeleteOne {
	builder := c.Delete().Where(notifyflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyFlowDeleteOne{builder}
}

// Query returns a query builder for NotifyFlow.
func (c *NotifyFlowClient) Query() *NotifyFlowQuery {
	return &NotifyFlowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyFlow},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyFlow entity by its id.
func (c *NotifyFlowClient) Get(ctx context.Context, id model.InternalID) (*NotifyFlow, error) {
	return c.Query().Where(notifyflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyFlowClient) GetX(ctx context.Context, id model.InternalID) *NotifyFlow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryOwner(nf *NotifyFlow) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifyflow.OwnerTable, notifyflow.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifyTarget(nf *NotifyFlow) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, notifyflow.NotifyTargetTable, notifyflow.NotifyTargetPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfig queries the feed_config edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryFeedConfig(nf *NotifyFlow) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notifyflow.FeedConfigTable, notifyflow.FeedConfigPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowTarget queries the notify_flow_target edge of a NotifyFlow.
func (c *NotifyFlowClient) QueryNotifyFlowTarget(nf *NotifyFlow) *NotifyFlowTargetQuery {
	query := (&NotifyFlowTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflow.Table, notifyflow.FieldID, id),
			sqlgraph.To(notifyflowtarget.Table, notifyflowtarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifyflow.NotifyFlowTargetTable, notifyflow.NotifyFlowTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyFlowClient) Hooks() []Hook {
	return c.hooks.NotifyFlow
}

// Interceptors returns the client interceptors.
func (c *NotifyFlowClient) Interceptors() []Interceptor {
	return c.inters.NotifyFlow
}

func (c *NotifyFlowClient) mutate(ctx context.Context, m *NotifyFlowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyFlowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyFlowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyFlow mutation op: %q", m.Op())
	}
}

// NotifyFlowTargetClient is a client for the NotifyFlowTarget schema.
type NotifyFlowTargetClient struct {
	config
}

// NewNotifyFlowTargetClient returns a client for the NotifyFlowTarget from the given config.
func NewNotifyFlowTargetClient(c config) *NotifyFlowTargetClient {
	return &NotifyFlowTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifyflowtarget.Hooks(f(g(h())))`.
func (c *NotifyFlowTargetClient) Use(hooks ...Hook) {
	c.hooks.NotifyFlowTarget = append(c.hooks.NotifyFlowTarget, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifyflowtarget.Intercept(f(g(h())))`.
func (c *NotifyFlowTargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyFlowTarget = append(c.inters.NotifyFlowTarget, interceptors...)
}

// Create returns a builder for creating a NotifyFlowTarget entity.
func (c *NotifyFlowTargetClient) Create() *NotifyFlowTargetCreate {
	mutation := newNotifyFlowTargetMutation(c.config, OpCreate)
	return &NotifyFlowTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyFlowTarget entities.
func (c *NotifyFlowTargetClient) CreateBulk(builders ...*NotifyFlowTargetCreate) *NotifyFlowTargetCreateBulk {
	return &NotifyFlowTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Update() *NotifyFlowTargetUpdate {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdate)
	return &NotifyFlowTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyFlowTargetClient) UpdateOne(nft *NotifyFlowTarget) *NotifyFlowTargetUpdateOne {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdateOne, withNotifyFlowTarget(nft))
	return &NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyFlowTargetClient) UpdateOneID(id int) *NotifyFlowTargetUpdateOne {
	mutation := newNotifyFlowTargetMutation(c.config, OpUpdateOne, withNotifyFlowTargetID(id))
	return &NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Delete() *NotifyFlowTargetDelete {
	mutation := newNotifyFlowTargetMutation(c.config, OpDelete)
	return &NotifyFlowTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyFlowTargetClient) DeleteOne(nft *NotifyFlowTarget) *NotifyFlowTargetDeleteOne {
	return c.DeleteOneID(nft.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyFlowTargetClient) DeleteOneID(id int) *NotifyFlowTargetDeleteOne {
	builder := c.Delete().Where(notifyflowtarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyFlowTargetDeleteOne{builder}
}

// Query returns a query builder for NotifyFlowTarget.
func (c *NotifyFlowTargetClient) Query() *NotifyFlowTargetQuery {
	return &NotifyFlowTargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyFlowTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyFlowTarget entity by its id.
func (c *NotifyFlowTargetClient) Get(ctx context.Context, id int) (*NotifyFlowTarget, error) {
	return c.Query().Where(notifyflowtarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyFlowTargetClient) GetX(ctx context.Context, id int) *NotifyFlowTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNotifyFlow queries the notify_flow edge of a NotifyFlowTarget.
func (c *NotifyFlowTargetClient) QueryNotifyFlow(nft *NotifyFlowTarget) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowtarget.Table, notifyflowtarget.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowtarget.NotifyFlowTable, notifyflowtarget.NotifyFlowColumn),
		)
		fromV = sqlgraph.Neighbors(nft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a NotifyFlowTarget.
func (c *NotifyFlowTargetClient) QueryNotifyTarget(nft *NotifyFlowTarget) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifyflowtarget.Table, notifyflowtarget.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notifyflowtarget.NotifyTargetTable, notifyflowtarget.NotifyTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyFlowTargetClient) Hooks() []Hook {
	return c.hooks.NotifyFlowTarget
}

// Interceptors returns the client interceptors.
func (c *NotifyFlowTargetClient) Interceptors() []Interceptor {
	return c.inters.NotifyFlowTarget
}

func (c *NotifyFlowTargetClient) mutate(ctx context.Context, m *NotifyFlowTargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyFlowTargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyFlowTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyFlowTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyFlowTargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyFlowTarget mutation op: %q", m.Op())
	}
}

// NotifyTargetClient is a client for the NotifyTarget schema.
type NotifyTargetClient struct {
	config
}

// NewNotifyTargetClient returns a client for the NotifyTarget from the given config.
func NewNotifyTargetClient(c config) *NotifyTargetClient {
	return &NotifyTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notifytarget.Hooks(f(g(h())))`.
func (c *NotifyTargetClient) Use(hooks ...Hook) {
	c.hooks.NotifyTarget = append(c.hooks.NotifyTarget, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notifytarget.Intercept(f(g(h())))`.
func (c *NotifyTargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotifyTarget = append(c.inters.NotifyTarget, interceptors...)
}

// Create returns a builder for creating a NotifyTarget entity.
func (c *NotifyTargetClient) Create() *NotifyTargetCreate {
	mutation := newNotifyTargetMutation(c.config, OpCreate)
	return &NotifyTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifyTarget entities.
func (c *NotifyTargetClient) CreateBulk(builders ...*NotifyTargetCreate) *NotifyTargetCreateBulk {
	return &NotifyTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifyTarget.
func (c *NotifyTargetClient) Update() *NotifyTargetUpdate {
	mutation := newNotifyTargetMutation(c.config, OpUpdate)
	return &NotifyTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyTargetClient) UpdateOne(nt *NotifyTarget) *NotifyTargetUpdateOne {
	mutation := newNotifyTargetMutation(c.config, OpUpdateOne, withNotifyTarget(nt))
	return &NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyTargetClient) UpdateOneID(id model.InternalID) *NotifyTargetUpdateOne {
	mutation := newNotifyTargetMutation(c.config, OpUpdateOne, withNotifyTargetID(id))
	return &NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifyTarget.
func (c *NotifyTargetClient) Delete() *NotifyTargetDelete {
	mutation := newNotifyTargetMutation(c.config, OpDelete)
	return &NotifyTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyTargetClient) DeleteOne(nt *NotifyTarget) *NotifyTargetDeleteOne {
	return c.DeleteOneID(nt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyTargetClient) DeleteOneID(id model.InternalID) *NotifyTargetDeleteOne {
	builder := c.Delete().Where(notifytarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyTargetDeleteOne{builder}
}

// Query returns a query builder for NotifyTarget.
func (c *NotifyTargetClient) Query() *NotifyTargetQuery {
	return &NotifyTargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotifyTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a NotifyTarget entity by its id.
func (c *NotifyTargetClient) Get(ctx context.Context, id model.InternalID) (*NotifyTarget, error) {
	return c.Query().Where(notifytarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyTargetClient) GetX(ctx context.Context, id model.InternalID) *NotifyTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryOwner(nt *NotifyTarget) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notifytarget.OwnerTable, notifytarget.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryNotifyFlow(nt *NotifyTarget) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, notifytarget.NotifyFlowTable, notifytarget.NotifyFlowPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlowTarget queries the notify_flow_target edge of a NotifyTarget.
func (c *NotifyTargetClient) QueryNotifyFlowTarget(nt *NotifyTarget) *NotifyFlowTargetQuery {
	query := (&NotifyFlowTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notifytarget.Table, notifytarget.FieldID, id),
			sqlgraph.To(notifyflowtarget.Table, notifyflowtarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, notifytarget.NotifyFlowTargetTable, notifytarget.NotifyFlowTargetColumn),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotifyTargetClient) Hooks() []Hook {
	return c.hooks.NotifyTarget
}

// Interceptors returns the client interceptors.
func (c *NotifyTargetClient) Interceptors() []Interceptor {
	return c.inters.NotifyTarget
}

func (c *NotifyTargetClient) mutate(ctx context.Context, m *NotifyTargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyTargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyTargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotifyTarget mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id model.InternalID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id model.InternalID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id model.InternalID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id model.InternalID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBindAccount queries the bind_account edge of a User.
func (c *UserClient) QueryBindAccount(u *User) *AccountQuery {
	query := (&AccountClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BindAccountTable, user.BindAccountColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPurchasedApp queries the purchased_app edge of a User.
func (c *UserClient) QueryPurchasedApp(u *User) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PurchasedAppTable, user.PurchasedAppPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppPackage queries the app_package edge of a User.
func (c *UserClient) QueryAppPackage(u *User) *AppPackageQuery {
	query := (&AppPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(apppackage.Table, apppackage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AppPackageTable, user.AppPackageColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeedConfig queries the feed_config edge of a User.
func (c *UserClient) QueryFeedConfig(u *User) *FeedConfigQuery {
	query := (&FeedConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(feedconfig.Table, feedconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FeedConfigTable, user.FeedConfigColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyTarget queries the notify_target edge of a User.
func (c *UserClient) QueryNotifyTarget(u *User) *NotifyTargetQuery {
	query := (&NotifyTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifytarget.Table, notifytarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifyTargetTable, user.NotifyTargetColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifyFlow queries the notify_flow edge of a User.
func (c *UserClient) QueryNotifyFlow(u *User) *NotifyFlowQuery {
	query := (&NotifyFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notifyflow.Table, notifyflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotifyFlowTable, user.NotifyFlowColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a User.
func (c *UserClient) QueryImage(u *User) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ImageTable, user.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a User.
func (c *UserClient) QueryFile(u *User) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FileTable, user.FileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a User.
func (c *UserClient) QueryCreator(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.CreatorTable, user.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedUser queries the created_user edge of a User.
func (c *UserClient) QueryCreatedUser(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedUserTable, user.CreatedUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Account, App, AppPackage, Feed, FeedConfig, FeedItem, File, Image, NotifyFlow,
		NotifyFlowTarget, NotifyTarget, User []ent.Hook
	}
	inters struct {
		Account, App, AppPackage, Feed, FeedConfig, FeedItem, File, Image, NotifyFlow,
		NotifyFlowTarget, NotifyTarget, User []ent.Interceptor
	}
)
