// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package converter

import (
	ent "github.com/tuihub/librarian/app/sephirah/internal/ent"
	feedconfig "github.com/tuihub/librarian/app/sephirah/internal/ent/feedconfig"
	user "github.com/tuihub/librarian/app/sephirah/internal/ent/user"
	modelgebura "github.com/tuihub/librarian/app/sephirah/internal/model/modelgebura"
	modeltiphereth "github.com/tuihub/librarian/app/sephirah/internal/model/modeltiphereth"
	modelyesod "github.com/tuihub/librarian/app/sephirah/internal/model/modelyesod"
	libauth "github.com/tuihub/librarian/internal/lib/libauth"
	model "github.com/tuihub/librarian/internal/model"
	modelfeed "github.com/tuihub/librarian/internal/model/modelfeed"
	"time"
)

type toBizConverterImpl struct{}

func (c *toBizConverterImpl) ToBizAccount(source *ent.Account) *modeltiphereth.Account {
	var pModeltipherethAccount *modeltiphereth.Account
	if source != nil {
		var modeltipherethAccount modeltiphereth.Account
		modeltipherethAccount.ID = model.InternalID((*source).ID)
		modeltipherethAccount.Platform = ToBizAccountPlatform((*source).Platform)
		modeltipherethAccount.PlatformAccountID = (*source).PlatformAccountID
		modeltipherethAccount.Name = (*source).Name
		modeltipherethAccount.ProfileURL = (*source).ProfileURL
		modeltipherethAccount.AvatarURL = (*source).AvatarURL
		pModeltipherethAccount = &modeltipherethAccount
	}
	return pModeltipherethAccount
}
func (c *toBizConverterImpl) ToBizAccountList(source []*ent.Account) []*modeltiphereth.Account {
	var pModeltipherethAccountList []*modeltiphereth.Account
	if source != nil {
		pModeltipherethAccountList = make([]*modeltiphereth.Account, len(source))
		for i := 0; i < len(source); i++ {
			pModeltipherethAccountList[i] = c.ToBizAccount(source[i])
		}
	}
	return pModeltipherethAccountList
}
func (c *toBizConverterImpl) ToBizApp(source *ent.App) *modelgebura.App {
	var pModelgeburaApp *modelgebura.App
	if source != nil {
		var modelgeburaApp modelgebura.App
		modelgeburaApp.ID = model.InternalID((*source).ID)
		modelgeburaApp.Source = ToBizAppSource((*source).Source)
		modelgeburaApp.SourceAppID = (*source).SourceAppID
		modelgeburaApp.SourceURL = (*source).SourceURL
		modelgeburaApp.Name = (*source).Name
		modelgeburaApp.Type = ToBizAppType((*source).Type)
		modelgeburaApp.ShortDescription = (*source).ShortDescription
		modelgeburaApp.ImageURL = (*source).ImageURL
		modelgeburaApp.Details = c.entAppToPModelgeburaAppDetails((*source))
		pModelgeburaApp = &modelgeburaApp
	}
	return pModelgeburaApp
}
func (c *toBizConverterImpl) ToBizAppList(source []*ent.App) []*modelgebura.App {
	var pModelgeburaAppList []*modelgebura.App
	if source != nil {
		pModelgeburaAppList = make([]*modelgebura.App, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppList[i] = c.ToBizApp(source[i])
		}
	}
	return pModelgeburaAppList
}
func (c *toBizConverterImpl) ToBizAppPackage(source *ent.AppPackage) *modelgebura.AppPackage {
	var pModelgeburaAppPackage *modelgebura.AppPackage
	if source != nil {
		var modelgeburaAppPackage modelgebura.AppPackage
		modelgeburaAppPackage.ID = model.InternalID((*source).ID)
		modelgeburaAppPackage.Source = ToBizAppPackageSource((*source).Source)
		modelgeburaAppPackage.SourceID = model.InternalID((*source).SourceID)
		modelgeburaAppPackage.SourcePackageID = (*source).SourcePackageID
		modelgeburaAppPackage.Name = (*source).Name
		modelgeburaAppPackage.Description = (*source).Description
		modelgeburaAppPackage.Binary = c.entAppPackageToPModelgeburaAppPackageBinary((*source))
		modelgeburaAppPackage.Public = (*source).Public
		pModelgeburaAppPackage = &modelgeburaAppPackage
	}
	return pModelgeburaAppPackage
}
func (c *toBizConverterImpl) ToBizAppPackageBinary(source ent.AppPackage) modelgebura.AppPackageBinary {
	var modelgeburaAppPackageBinary modelgebura.AppPackageBinary
	modelgeburaAppPackageBinary.Name = source.BinaryName
	modelgeburaAppPackageBinary.SizeByte = source.BinarySizeByte
	modelgeburaAppPackageBinary.PublicURL = source.BinaryPublicURL
	return modelgeburaAppPackageBinary
}
func (c *toBizConverterImpl) ToBizAppPackageList(source []*ent.AppPackage) []*modelgebura.AppPackage {
	var pModelgeburaAppPackageList []*modelgebura.AppPackage
	if source != nil {
		pModelgeburaAppPackageList = make([]*modelgebura.AppPackage, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppPackageList[i] = c.ToBizAppPackage(source[i])
		}
	}
	return pModelgeburaAppPackageList
}
func (c *toBizConverterImpl) ToBizFeed(source *ent.Feed) *modelfeed.Feed {
	var pModelfeedFeed *modelfeed.Feed
	if source != nil {
		var modelfeedFeed modelfeed.Feed
		modelfeedFeed.ID = model.InternalID((*source).ID)
		modelfeedFeed.Title = (*source).Title
		modelfeedFeed.Description = (*source).Description
		modelfeedFeed.Link = (*source).Link
		var pModelfeedPersonList []*modelfeed.Person
		if (*source).Authors != nil {
			pModelfeedPersonList = make([]*modelfeed.Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				pModelfeedPersonList[i] = c.pModelfeedPersonToPModelfeedPerson((*source).Authors[i])
			}
		}
		modelfeedFeed.Authors = pModelfeedPersonList
		modelfeedFeed.Language = (*source).Language
		modelfeedFeed.Image = c.pModelfeedImageToPModelfeedImage((*source).Image)
		pModelfeedFeed = &modelfeedFeed
	}
	return pModelfeedFeed
}
func (c *toBizConverterImpl) ToBizFeedConfig(source *ent.FeedConfig) *modelyesod.FeedConfig {
	var pModelyesodFeedConfig *modelyesod.FeedConfig
	if source != nil {
		var modelyesodFeedConfig modelyesod.FeedConfig
		modelyesodFeedConfig.ID = model.InternalID((*source).ID)
		modelyesodFeedConfig.Name = (*source).Name
		modelyesodFeedConfig.FeedURL = (*source).FeedURL
		modelyesodFeedConfig.AuthorAccount = model.InternalID((*source).AuthorAccount)
		modelyesodFeedConfig.Source = ToBizFeedConfigSource((*source).Source)
		modelyesodFeedConfig.Status = ToBizFeedConfigStatus((*source).Status)
		modelyesodFeedConfig.PullInterval = time.Duration((*source).PullInterval)
		modelyesodFeedConfig.LatestPullTime = TimeToTime((*source).LatestPullAt)
		pModelyesodFeedConfig = &modelyesodFeedConfig
	}
	return pModelyesodFeedConfig
}
func (c *toBizConverterImpl) ToBizFeedConfigList(source []*ent.FeedConfig) []*modelyesod.FeedConfig {
	var pModelyesodFeedConfigList []*modelyesod.FeedConfig
	if source != nil {
		pModelyesodFeedConfigList = make([]*modelyesod.FeedConfig, len(source))
		for i := 0; i < len(source); i++ {
			pModelyesodFeedConfigList[i] = c.ToBizFeedConfig(source[i])
		}
	}
	return pModelyesodFeedConfigList
}
func (c *toBizConverterImpl) ToBizFeedItem(source *ent.FeedItem) *modelfeed.Item {
	var pModelfeedItem *modelfeed.Item
	if source != nil {
		var modelfeedItem modelfeed.Item
		modelfeedItem.ID = model.InternalID((*source).ID)
		modelfeedItem.Title = (*source).Title
		modelfeedItem.Description = (*source).Description
		modelfeedItem.Content = (*source).Content
		modelfeedItem.Link = (*source).Link
		modelfeedItem.Updated = (*source).Updated
		modelfeedItem.UpdatedParsed = TimeToTimePtr((*source).UpdatedParsed)
		modelfeedItem.Published = (*source).Published
		modelfeedItem.PublishedParsed = TimeToTimePtr((*source).PublishedParsed)
		var pModelfeedPersonList []*modelfeed.Person
		if (*source).Authors != nil {
			pModelfeedPersonList = make([]*modelfeed.Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				pModelfeedPersonList[i] = c.pModelfeedPersonToPModelfeedPerson((*source).Authors[i])
			}
		}
		modelfeedItem.Authors = pModelfeedPersonList
		modelfeedItem.GUID = (*source).GUID
		modelfeedItem.Image = c.pModelfeedImageToPModelfeedImage((*source).Image)
		var pModelfeedEnclosureList []*modelfeed.Enclosure
		if (*source).Enclosures != nil {
			pModelfeedEnclosureList = make([]*modelfeed.Enclosure, len((*source).Enclosures))
			for j := 0; j < len((*source).Enclosures); j++ {
				pModelfeedEnclosureList[j] = c.pModelfeedEnclosureToPModelfeedEnclosure((*source).Enclosures[j])
			}
		}
		modelfeedItem.Enclosures = pModelfeedEnclosureList
		modelfeedItem.PublishPlatform = (*source).PublishPlatform
		pModelfeedItem = &modelfeedItem
	}
	return pModelfeedItem
}
func (c *toBizConverterImpl) ToBizFeedItemList(source []*ent.FeedItem) []*modelfeed.Item {
	var pModelfeedItemList []*modelfeed.Item
	if source != nil {
		pModelfeedItemList = make([]*modelfeed.Item, len(source))
		for i := 0; i < len(source); i++ {
			pModelfeedItemList[i] = c.ToBizFeedItem(source[i])
		}
	}
	return pModelfeedItemList
}
func (c *toBizConverterImpl) ToBizUser(source *ent.User) *modeltiphereth.User {
	var pModeltipherethUser *modeltiphereth.User
	if source != nil {
		var modeltipherethUser modeltiphereth.User
		modeltipherethUser.ID = model.InternalID((*source).ID)
		modeltipherethUser.UserName = (*source).Username
		modeltipherethUser.Type = ToLibAuthUserType((*source).Type)
		modeltipherethUser.Status = ToBizUserStatus((*source).Status)
		pModeltipherethUser = &modeltipherethUser
	}
	return pModeltipherethUser
}
func (c *toBizConverterImpl) ToBizUserList(source []*ent.User) []*modeltiphereth.User {
	var pModeltipherethUserList []*modeltiphereth.User
	if source != nil {
		pModeltipherethUserList = make([]*modeltiphereth.User, len(source))
		for i := 0; i < len(source); i++ {
			pModeltipherethUserList[i] = c.ToBizUser(source[i])
		}
	}
	return pModeltipherethUserList
}
func (c *toBizConverterImpl) entAppPackageToPModelgeburaAppPackageBinary(source ent.AppPackage) *modelgebura.AppPackageBinary {
	modelgeburaAppPackageBinary := c.ToBizAppPackageBinary(source)
	return &modelgeburaAppPackageBinary
}
func (c *toBizConverterImpl) entAppToModelgeburaAppDetails(source ent.App) modelgebura.AppDetails {
	var modelgeburaAppDetails modelgebura.AppDetails
	modelgeburaAppDetails.Description = source.Description
	modelgeburaAppDetails.ReleaseDate = source.ReleaseDate
	modelgeburaAppDetails.Developer = source.Developer
	modelgeburaAppDetails.Publisher = source.Publisher
	modelgeburaAppDetails.Version = source.Version
	return modelgeburaAppDetails
}
func (c *toBizConverterImpl) entAppToPModelgeburaAppDetails(source ent.App) *modelgebura.AppDetails {
	modelgeburaAppDetails := c.entAppToModelgeburaAppDetails(source)
	return &modelgeburaAppDetails
}
func (c *toBizConverterImpl) pModelfeedEnclosureToPModelfeedEnclosure(source *modelfeed.Enclosure) *modelfeed.Enclosure {
	var pModelfeedEnclosure *modelfeed.Enclosure
	if source != nil {
		var modelfeedEnclosure modelfeed.Enclosure
		modelfeedEnclosure.URL = (*source).URL
		modelfeedEnclosure.Length = (*source).Length
		modelfeedEnclosure.Type = (*source).Type
		pModelfeedEnclosure = &modelfeedEnclosure
	}
	return pModelfeedEnclosure
}
func (c *toBizConverterImpl) pModelfeedImageToPModelfeedImage(source *modelfeed.Image) *modelfeed.Image {
	var pModelfeedImage *modelfeed.Image
	if source != nil {
		var modelfeedImage modelfeed.Image
		modelfeedImage.URL = (*source).URL
		modelfeedImage.Title = (*source).Title
		pModelfeedImage = &modelfeedImage
	}
	return pModelfeedImage
}
func (c *toBizConverterImpl) pModelfeedPersonToPModelfeedPerson(source *modelfeed.Person) *modelfeed.Person {
	var pModelfeedPerson *modelfeed.Person
	if source != nil {
		var modelfeedPerson modelfeed.Person
		modelfeedPerson.Name = (*source).Name
		modelfeedPerson.Email = (*source).Email
		pModelfeedPerson = &modelfeedPerson
	}
	return pModelfeedPerson
}

type toEntConverterImpl struct{}

func (c *toEntConverterImpl) ToEntApp(source modelgebura.App) ent.App {
	var entApp ent.App
	entApp.ID = model.InternalID(source.ID)
	entApp.Source = ToEntAppSource(source.Source)
	entApp.SourceAppID = source.SourceAppID
	entApp.SourceURL = source.SourceURL
	entApp.Name = source.Name
	entApp.Type = ToEntAppType(source.Type)
	entApp.ShortDescription = source.ShortDescription
	var pString *string
	if source.Details != nil {
		pString = &source.Details.Description
	}
	var xstring string
	if pString != nil {
		xstring = *pString
	}
	entApp.Description = xstring
	entApp.ImageURL = source.ImageURL
	var pString2 *string
	if source.Details != nil {
		pString2 = &source.Details.ReleaseDate
	}
	var xstring2 string
	if pString2 != nil {
		xstring2 = *pString2
	}
	entApp.ReleaseDate = xstring2
	var pString3 *string
	if source.Details != nil {
		pString3 = &source.Details.Developer
	}
	var xstring3 string
	if pString3 != nil {
		xstring3 = *pString3
	}
	entApp.Developer = xstring3
	var pString4 *string
	if source.Details != nil {
		pString4 = &source.Details.Publisher
	}
	var xstring4 string
	if pString4 != nil {
		xstring4 = *pString4
	}
	entApp.Publisher = xstring4
	var pString5 *string
	if source.Details != nil {
		pString5 = &source.Details.Version
	}
	var xstring5 string
	if pString5 != nil {
		xstring5 = *pString5
	}
	entApp.Version = xstring5
	return entApp
}
func (c *toEntConverterImpl) ToEntFeedConfigSourceList(source []modelyesod.FeedConfigSource) []feedconfig.Source {
	var feedconfigSourceList []feedconfig.Source
	if source != nil {
		feedconfigSourceList = make([]feedconfig.Source, len(source))
		for i := 0; i < len(source); i++ {
			feedconfigSourceList[i] = ToEntFeedConfigSource(source[i])
		}
	}
	return feedconfigSourceList
}
func (c *toEntConverterImpl) ToEntFeedConfigStatusList(source []modelyesod.FeedConfigStatus) []feedconfig.Status {
	var feedconfigStatusList []feedconfig.Status
	if source != nil {
		feedconfigStatusList = make([]feedconfig.Status, len(source))
		for i := 0; i < len(source); i++ {
			feedconfigStatusList[i] = ToEntFeedConfigStatus(source[i])
		}
	}
	return feedconfigStatusList
}
func (c *toEntConverterImpl) ToEntUserStatusList(source []modeltiphereth.UserStatus) []user.Status {
	var userStatusList []user.Status
	if source != nil {
		userStatusList = make([]user.Status, len(source))
		for i := 0; i < len(source); i++ {
			userStatusList[i] = ToEntUserStatus(source[i])
		}
	}
	return userStatusList
}
func (c *toEntConverterImpl) ToEntUserTypeList(source []libauth.UserType) []user.Type {
	var userTypeList []user.Type
	if source != nil {
		userTypeList = make([]user.Type, len(source))
		for i := 0; i < len(source); i++ {
			userTypeList[i] = ToEntUserType(source[i])
		}
	}
	return userTypeList
}
