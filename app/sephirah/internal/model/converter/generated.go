// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	modelbinah "github.com/tuihub/librarian/app/sephirah/internal/model/modelbinah"
	modelgebura "github.com/tuihub/librarian/app/sephirah/internal/model/modelgebura"
	modelnetzach "github.com/tuihub/librarian/app/sephirah/internal/model/modelnetzach"
	modeltiphereth "github.com/tuihub/librarian/app/sephirah/internal/model/modeltiphereth"
	modelyesod "github.com/tuihub/librarian/app/sephirah/internal/model/modelyesod"
	libauth "github.com/tuihub/librarian/internal/lib/libauth"
	model "github.com/tuihub/librarian/internal/model"
	modelfeed "github.com/tuihub/librarian/internal/model/modelfeed"
	v12 "github.com/tuihub/protos/pkg/librarian/porter/v1"
	v1 "github.com/tuihub/protos/pkg/librarian/sephirah/v1"
	v11 "github.com/tuihub/protos/pkg/librarian/v1"
)

type toBizConverterImpl struct{}

func (c *toBizConverterImpl) ToBizApp(source *v1.App) *modelgebura.App {
	var pModelgeburaApp *modelgebura.App
	if source != nil {
		var modelgeburaApp modelgebura.App
		modelgeburaApp.ID = ToBizInternalID((*source).Id)
		modelgeburaApp.Name = (*source).Name
		modelgeburaApp.Description = (*source).Description
		modelgeburaApp.Public = (*source).Public
		modelgeburaApp.AssignedAppInfoID = ToBizInternalID((*source).AssignedAppInfoId)
		pModelgeburaApp = &modelgeburaApp
	}
	return pModelgeburaApp
}
func (c *toBizConverterImpl) ToBizAppBinary(source *v1.AppBinary) *modelgebura.AppBinary {
	var pModelgeburaAppBinary *modelgebura.AppBinary
	if source != nil {
		var modelgeburaAppBinary modelgebura.AppBinary
		modelgeburaAppBinary.Name = (*source).Name
		modelgeburaAppBinary.SizeBytes = (*source).SizeBytes
		modelgeburaAppBinary.PublicURL = (*source).PublicUrl
		var byteList []uint8
		if (*source).Sha256 != nil {
			byteList = make([]uint8, len((*source).Sha256))
			for i := 0; i < len((*source).Sha256); i++ {
				byteList[i] = (*source).Sha256[i]
			}
		}
		modelgeburaAppBinary.Sha256 = byteList
		pModelgeburaAppBinary = &modelgeburaAppBinary
	}
	return pModelgeburaAppBinary
}
func (c *toBizConverterImpl) ToBizAppBinaryList(source []*v1.AppBinary) []*modelgebura.AppBinary {
	var pModelgeburaAppBinaryList []*modelgebura.AppBinary
	if source != nil {
		pModelgeburaAppBinaryList = make([]*modelgebura.AppBinary, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppBinaryList[i] = c.ToBizAppBinary(source[i])
		}
	}
	return pModelgeburaAppBinaryList
}
func (c *toBizConverterImpl) ToBizAppInfo(source *v11.AppInfo) *modelgebura.AppInfo {
	var pModelgeburaAppInfo *modelgebura.AppInfo
	if source != nil {
		var modelgeburaAppInfo modelgebura.AppInfo
		modelgeburaAppInfo.ID = ToBizInternalID((*source).Id)
		modelgeburaAppInfo.Internal = (*source).Internal
		modelgeburaAppInfo.Source = (*source).Source
		modelgeburaAppInfo.SourceAppID = (*source).SourceAppId
		modelgeburaAppInfo.SourceURL = PtrToString((*source).SourceUrl)
		modelgeburaAppInfo.Name = (*source).Name
		modelgeburaAppInfo.Type = ToBizAppType((*source).Type)
		modelgeburaAppInfo.ShortDescription = (*source).ShortDescription
		modelgeburaAppInfo.IconImageURL = (*source).IconImageUrl
		modelgeburaAppInfo.BackgroundImageURL = (*source).BackgroundImageUrl
		modelgeburaAppInfo.CoverImageURL = (*source).CoverImageUrl
		var stringList []string
		if (*source).Tags != nil {
			stringList = make([]string, len((*source).Tags))
			for i := 0; i < len((*source).Tags); i++ {
				stringList[i] = (*source).Tags[i]
			}
		}
		modelgeburaAppInfo.Tags = stringList
		modelgeburaAppInfo.Details = c.ToBizAppInfoDetail((*source).Details)
		pModelgeburaAppInfo = &modelgeburaAppInfo
	}
	return pModelgeburaAppInfo
}
func (c *toBizConverterImpl) ToBizAppInfoDetail(source *v11.AppInfoDetails) *modelgebura.AppInfoDetails {
	var pModelgeburaAppInfoDetails *modelgebura.AppInfoDetails
	if source != nil {
		var modelgeburaAppInfoDetails modelgebura.AppInfoDetails
		modelgeburaAppInfoDetails.Description = (*source).Description
		modelgeburaAppInfoDetails.ReleaseDate = (*source).ReleaseDate
		modelgeburaAppInfoDetails.Developer = (*source).Developer
		modelgeburaAppInfoDetails.Publisher = (*source).Publisher
		modelgeburaAppInfoDetails.Version = (*source).Version
		pModelgeburaAppInfoDetails = &modelgeburaAppInfoDetails
	}
	return pModelgeburaAppInfoDetails
}
func (c *toBizConverterImpl) ToBizAppInfoID(source *v11.AppInfoID) *modelgebura.AppInfoID {
	var pModelgeburaAppInfoID *modelgebura.AppInfoID
	if source != nil {
		var modelgeburaAppInfoID modelgebura.AppInfoID
		modelgeburaAppInfoID.Internal = (*source).Internal
		modelgeburaAppInfoID.Source = (*source).Source
		modelgeburaAppInfoID.SourceAppID = (*source).SourceAppId
		pModelgeburaAppInfoID = &modelgeburaAppInfoID
	}
	return pModelgeburaAppInfoID
}
func (c *toBizConverterImpl) ToBizAppInfoIDList(source []*v11.AppInfoID) []*modelgebura.AppInfoID {
	var pModelgeburaAppInfoIDList []*modelgebura.AppInfoID
	if source != nil {
		pModelgeburaAppInfoIDList = make([]*modelgebura.AppInfoID, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppInfoIDList[i] = c.ToBizAppInfoID(source[i])
		}
	}
	return pModelgeburaAppInfoIDList
}
func (c *toBizConverterImpl) ToBizAppInfoList(source []*v11.AppInfo) []*modelgebura.AppInfo {
	var pModelgeburaAppInfoList []*modelgebura.AppInfo
	if source != nil {
		pModelgeburaAppInfoList = make([]*modelgebura.AppInfo, len(source))
		for i := 0; i < len(source); i++ {
			pModelgeburaAppInfoList[i] = c.ToBizAppInfo(source[i])
		}
	}
	return pModelgeburaAppInfoList
}
func (c *toBizConverterImpl) ToBizAppInst(source *v1.AppInst) *modelgebura.AppInst {
	var pModelgeburaAppInst *modelgebura.AppInst
	if source != nil {
		var modelgeburaAppInst modelgebura.AppInst
		modelgeburaAppInst.ID = ToBizInternalID((*source).Id)
		modelgeburaAppInst.AppID = ToBizInternalID((*source).AppId)
		modelgeburaAppInst.DeviceID = ToBizInternalID((*source).DeviceId)
		pModelgeburaAppInst = &modelgeburaAppInst
	}
	return pModelgeburaAppInst
}
func (c *toBizConverterImpl) ToBizAppTypeList(source []v11.AppType) []modelgebura.AppType {
	var modelgeburaAppTypeList []modelgebura.AppType
	if source != nil {
		modelgeburaAppTypeList = make([]modelgebura.AppType, len(source))
		for i := 0; i < len(source); i++ {
			modelgeburaAppTypeList[i] = ToBizAppType(source[i])
		}
	}
	return modelgeburaAppTypeList
}
func (c *toBizConverterImpl) ToBizDeviceInfo(source *v1.DeviceInfo) *modeltiphereth.DeviceInfo {
	var pModeltipherethDeviceInfo *modeltiphereth.DeviceInfo
	if source != nil {
		var modeltipherethDeviceInfo modeltiphereth.DeviceInfo
		modeltipherethDeviceInfo.ID = ToBizInternalID((*source).DeviceId)
		modeltipherethDeviceInfo.DeviceName = (*source).DeviceName
		modeltipherethDeviceInfo.SystemType = ToBizSystemType((*source).SystemType)
		modeltipherethDeviceInfo.SystemVersion = (*source).SystemVersion
		modeltipherethDeviceInfo.ClientName = (*source).ClientName
		modeltipherethDeviceInfo.ClientSourceCodeAddress = (*source).ClientSourceCodeAddress
		modeltipherethDeviceInfo.ClientVersion = (*source).ClientVersion
		pModeltipherethDeviceInfo = &modeltipherethDeviceInfo
	}
	return pModeltipherethDeviceInfo
}
func (c *toBizConverterImpl) ToBizFeedConfig(source *v1.FeedConfig) *modelyesod.FeedConfig {
	var pModelyesodFeedConfig *modelyesod.FeedConfig
	if source != nil {
		var modelyesodFeedConfig modelyesod.FeedConfig
		modelyesodFeedConfig.ID = ToBizInternalID((*source).Id)
		modelyesodFeedConfig.Name = (*source).Name
		modelyesodFeedConfig.FeedURL = (*source).FeedUrl
		modelyesodFeedConfig.Category = (*source).Category
		modelyesodFeedConfig.AuthorAccount = ToBizInternalID((*source).AuthorAccount)
		modelyesodFeedConfig.Source = (*source).Source
		modelyesodFeedConfig.Status = ToBizFeedConfigStatus((*source).Status)
		modelyesodFeedConfig.PullInterval = DurationPBToDuration((*source).PullInterval)
		modelyesodFeedConfig.HideItems = (*source).HideItems
		pModelyesodFeedConfig = &modelyesodFeedConfig
	}
	return pModelyesodFeedConfig
}
func (c *toBizConverterImpl) ToBizFeedConfigStatusList(source []v1.FeedConfigStatus) []modelyesod.FeedConfigStatus {
	var modelyesodFeedConfigStatusList []modelyesod.FeedConfigStatus
	if source != nil {
		modelyesodFeedConfigStatusList = make([]modelyesod.FeedConfigStatus, len(source))
		for i := 0; i < len(source); i++ {
			modelyesodFeedConfigStatusList[i] = ToBizFeedConfigStatus(source[i])
		}
	}
	return modelyesodFeedConfigStatusList
}
func (c *toBizConverterImpl) ToBizFileMetadata(source *v1.FileMetadata) *modelbinah.FileMetadata {
	var pModelbinahFileMetadata *modelbinah.FileMetadata
	if source != nil {
		var modelbinahFileMetadata modelbinah.FileMetadata
		modelbinahFileMetadata.ID = ToBizInternalID((*source).Id)
		modelbinahFileMetadata.Name = (*source).Name
		modelbinahFileMetadata.SizeBytes = (*source).SizeBytes
		modelbinahFileMetadata.Type = ToBizFileType((*source).Type)
		var byteList []uint8
		if (*source).Sha256 != nil {
			byteList = make([]uint8, len((*source).Sha256))
			for i := 0; i < len((*source).Sha256); i++ {
				byteList[i] = (*source).Sha256[i]
			}
		}
		modelbinahFileMetadata.Sha256 = byteList
		pModelbinahFileMetadata = &modelbinahFileMetadata
	}
	return pModelbinahFileMetadata
}
func (c *toBizConverterImpl) ToBizInternalIDList(source []*v11.InternalID) []model.InternalID {
	var modelInternalIDList []model.InternalID
	if source != nil {
		modelInternalIDList = make([]model.InternalID, len(source))
		for i := 0; i < len(source); i++ {
			modelInternalIDList[i] = ToBizInternalID(source[i])
		}
	}
	return modelInternalIDList
}
func (c *toBizConverterImpl) ToBizNotifyFilter(source *v1.NotifyFilter) *modelnetzach.NotifyFilter {
	var pModelnetzachNotifyFilter *modelnetzach.NotifyFilter
	if source != nil {
		var modelnetzachNotifyFilter modelnetzach.NotifyFilter
		var stringList []string
		if (*source).ExcludeKeywords != nil {
			stringList = make([]string, len((*source).ExcludeKeywords))
			for i := 0; i < len((*source).ExcludeKeywords); i++ {
				stringList[i] = (*source).ExcludeKeywords[i]
			}
		}
		modelnetzachNotifyFilter.ExcludeKeywords = stringList
		var stringList2 []string
		if (*source).IncludeKeywords != nil {
			stringList2 = make([]string, len((*source).IncludeKeywords))
			for j := 0; j < len((*source).IncludeKeywords); j++ {
				stringList2[j] = (*source).IncludeKeywords[j]
			}
		}
		modelnetzachNotifyFilter.IncludeKeywords = stringList2
		pModelnetzachNotifyFilter = &modelnetzachNotifyFilter
	}
	return pModelnetzachNotifyFilter
}
func (c *toBizConverterImpl) ToBizNotifyFlow(source *v1.NotifyFlow) *modelnetzach.NotifyFlow {
	var pModelnetzachNotifyFlow *modelnetzach.NotifyFlow
	if source != nil {
		var modelnetzachNotifyFlow modelnetzach.NotifyFlow
		modelnetzachNotifyFlow.ID = ToBizInternalID((*source).Id)
		modelnetzachNotifyFlow.Name = (*source).Name
		modelnetzachNotifyFlow.Description = (*source).Description
		var pModelnetzachNotifyFlowSourceList []*modelnetzach.NotifyFlowSource
		if (*source).Sources != nil {
			pModelnetzachNotifyFlowSourceList = make([]*modelnetzach.NotifyFlowSource, len((*source).Sources))
			for i := 0; i < len((*source).Sources); i++ {
				pModelnetzachNotifyFlowSourceList[i] = c.ToBizNotifyFlowSource((*source).Sources[i])
			}
		}
		modelnetzachNotifyFlow.Sources = pModelnetzachNotifyFlowSourceList
		var pModelnetzachNotifyFlowTargetList []*modelnetzach.NotifyFlowTarget
		if (*source).Targets != nil {
			pModelnetzachNotifyFlowTargetList = make([]*modelnetzach.NotifyFlowTarget, len((*source).Targets))
			for j := 0; j < len((*source).Targets); j++ {
				pModelnetzachNotifyFlowTargetList[j] = c.ToBizNotifyFlowTarget((*source).Targets[j])
			}
		}
		modelnetzachNotifyFlow.Targets = pModelnetzachNotifyFlowTargetList
		modelnetzachNotifyFlow.Status = ToBizNotifyFlowStatus((*source).Status)
		pModelnetzachNotifyFlow = &modelnetzachNotifyFlow
	}
	return pModelnetzachNotifyFlow
}
func (c *toBizConverterImpl) ToBizNotifyFlowSource(source *v1.NotifyFlowSource) *modelnetzach.NotifyFlowSource {
	var pModelnetzachNotifyFlowSource *modelnetzach.NotifyFlowSource
	if source != nil {
		var modelnetzachNotifyFlowSource modelnetzach.NotifyFlowSource
		modelnetzachNotifyFlowSource.SourceID = ToBizInternalID((*source).SourceId)
		modelnetzachNotifyFlowSource.Filter = c.ToBizNotifyFilter((*source).Filter)
		pModelnetzachNotifyFlowSource = &modelnetzachNotifyFlowSource
	}
	return pModelnetzachNotifyFlowSource
}
func (c *toBizConverterImpl) ToBizNotifyFlowTarget(source *v1.NotifyFlowTarget) *modelnetzach.NotifyFlowTarget {
	var pModelnetzachNotifyFlowTarget *modelnetzach.NotifyFlowTarget
	if source != nil {
		var modelnetzachNotifyFlowTarget modelnetzach.NotifyFlowTarget
		modelnetzachNotifyFlowTarget.TargetID = ToBizInternalID((*source).TargetId)
		modelnetzachNotifyFlowTarget.Filter = c.ToBizNotifyFilter((*source).Filter)
		modelnetzachNotifyFlowTarget.ChannelID = (*source).ChannelId
		pModelnetzachNotifyFlowTarget = &modelnetzachNotifyFlowTarget
	}
	return pModelnetzachNotifyFlowTarget
}
func (c *toBizConverterImpl) ToBizNotifyTarget(source *v1.NotifyTarget) *modelnetzach.NotifyTarget {
	var pModelnetzachNotifyTarget *modelnetzach.NotifyTarget
	if source != nil {
		var modelnetzachNotifyTarget modelnetzach.NotifyTarget
		modelnetzachNotifyTarget.ID = ToBizInternalID((*source).Id)
		modelnetzachNotifyTarget.Name = (*source).Name
		modelnetzachNotifyTarget.Description = (*source).Description
		modelnetzachNotifyTarget.Destination = (*source).Destination
		modelnetzachNotifyTarget.Status = ToBizNotifyTargetStatus((*source).Status)
		modelnetzachNotifyTarget.Token = (*source).Token
		pModelnetzachNotifyTarget = &modelnetzachNotifyTarget
	}
	return pModelnetzachNotifyTarget
}
func (c *toBizConverterImpl) ToBizNotifyTargetStatusList(source []v1.NotifyTargetStatus) []modelnetzach.NotifyTargetStatus {
	var modelnetzachNotifyTargetStatusList []modelnetzach.NotifyTargetStatus
	if source != nil {
		modelnetzachNotifyTargetStatusList = make([]modelnetzach.NotifyTargetStatus, len(source))
		for i := 0; i < len(source); i++ {
			modelnetzachNotifyTargetStatusList[i] = ToBizNotifyTargetStatus(source[i])
		}
	}
	return modelnetzachNotifyTargetStatusList
}
func (c *toBizConverterImpl) ToBizPorterFeatureSummary(source *v12.PorterFeatureSummary) *modeltiphereth.PorterFeatureSummary {
	var pModeltipherethPorterFeatureSummary *modeltiphereth.PorterFeatureSummary
	if source != nil {
		var modeltipherethPorterFeatureSummary modeltiphereth.PorterFeatureSummary
		var pModeltipherethSupportedAccountList []*modeltiphereth.SupportedAccount
		if (*source).SupportedAccounts != nil {
			pModeltipherethSupportedAccountList = make([]*modeltiphereth.SupportedAccount, len((*source).SupportedAccounts))
			for i := 0; i < len((*source).SupportedAccounts); i++ {
				pModeltipherethSupportedAccountList[i] = c.pV1PorterFeatureSummary_AccountToPModeltipherethSupportedAccount((*source).SupportedAccounts[i])
			}
		}
		modeltipherethPorterFeatureSummary.SupportedAccounts = pModeltipherethSupportedAccountList
		var stringList []string
		if (*source).SupportedAppInfoSources != nil {
			stringList = make([]string, len((*source).SupportedAppInfoSources))
			for j := 0; j < len((*source).SupportedAppInfoSources); j++ {
				stringList[j] = (*source).SupportedAppInfoSources[j]
			}
		}
		modeltipherethPorterFeatureSummary.SupportedAppInfoSources = stringList
		var stringList2 []string
		if (*source).SupportedFeedSources != nil {
			stringList2 = make([]string, len((*source).SupportedFeedSources))
			for k := 0; k < len((*source).SupportedFeedSources); k++ {
				stringList2[k] = (*source).SupportedFeedSources[k]
			}
		}
		modeltipherethPorterFeatureSummary.SupportedFeedSources = stringList2
		var stringList3 []string
		if (*source).SupportedNotifyDestinations != nil {
			stringList3 = make([]string, len((*source).SupportedNotifyDestinations))
			for l := 0; l < len((*source).SupportedNotifyDestinations); l++ {
				stringList3[l] = (*source).SupportedNotifyDestinations[l]
			}
		}
		modeltipherethPorterFeatureSummary.SupportedNotifyDestinations = stringList3
		pModeltipherethPorterFeatureSummary = &modeltipherethPorterFeatureSummary
	}
	return pModeltipherethPorterFeatureSummary
}
func (c *toBizConverterImpl) ToBizPorterPrivilege(source *v1.PorterPrivilege) *modeltiphereth.PorterInstancePrivilege {
	var pModeltipherethPorterInstancePrivilege *modeltiphereth.PorterInstancePrivilege
	if source != nil {
		var modeltipherethPorterInstancePrivilege modeltiphereth.PorterInstancePrivilege
		modeltipherethPorterInstancePrivilege.All = (*source).All
		pModeltipherethPorterInstancePrivilege = &modeltipherethPorterInstancePrivilege
	}
	return pModeltipherethPorterInstancePrivilege
}
func (c *toBizConverterImpl) ToBizTimeRange(source *v11.TimeRange) *model.TimeRange {
	var pModelTimeRange *model.TimeRange
	if source != nil {
		var modelTimeRange model.TimeRange
		modelTimeRange.StartTime = ToBizTime((*source).StartTime)
		modelTimeRange.Duration = DurationPBToDuration((*source).Duration)
		pModelTimeRange = &modelTimeRange
	}
	return pModelTimeRange
}
func (c *toBizConverterImpl) ToBizUser(source *v1.User) *modeltiphereth.User {
	var pModeltipherethUser *modeltiphereth.User
	if source != nil {
		var modeltipherethUser modeltiphereth.User
		modeltipherethUser.ID = ToBizInternalID((*source).Id)
		modeltipherethUser.UserName = (*source).Username
		modeltipherethUser.PassWord = (*source).Password
		modeltipherethUser.Type = ToLibAuthUserType((*source).Type)
		modeltipherethUser.Status = ToBizUserStatus((*source).Status)
		pModeltipherethUser = &modeltipherethUser
	}
	return pModeltipherethUser
}
func (c *toBizConverterImpl) ToBizUserStatusList(source []v1.UserStatus) []modeltiphereth.UserStatus {
	var modeltipherethUserStatusList []modeltiphereth.UserStatus
	if source != nil {
		modeltipherethUserStatusList = make([]modeltiphereth.UserStatus, len(source))
		for i := 0; i < len(source); i++ {
			modeltipherethUserStatusList[i] = ToBizUserStatus(source[i])
		}
	}
	return modeltipherethUserStatusList
}
func (c *toBizConverterImpl) ToLibAuthUserTypeList(source []v1.UserType) []libauth.UserType {
	var libauthUserTypeList []libauth.UserType
	if source != nil {
		libauthUserTypeList = make([]libauth.UserType, len(source))
		for i := 0; i < len(source); i++ {
			libauthUserTypeList[i] = ToLibAuthUserType(source[i])
		}
	}
	return libauthUserTypeList
}
func (c *toBizConverterImpl) pV1PorterFeatureSummary_AccountToPModeltipherethSupportedAccount(source *v12.PorterFeatureSummary_Account) *modeltiphereth.SupportedAccount {
	var pModeltipherethSupportedAccount *modeltiphereth.SupportedAccount
	if source != nil {
		var modeltipherethSupportedAccount modeltiphereth.SupportedAccount
		modeltipherethSupportedAccount.Platform = (*source).Platform
		var modelAccountAppRelationTypeList []model.AccountAppRelationType
		if (*source).AppRelationTypes != nil {
			modelAccountAppRelationTypeList = make([]model.AccountAppRelationType, len((*source).AppRelationTypes))
			for i := 0; i < len((*source).AppRelationTypes); i++ {
				modelAccountAppRelationTypeList[i] = ToBizAccountAppRelationType((*source).AppRelationTypes[i])
			}
		}
		modeltipherethSupportedAccount.AppRelationTypes = modelAccountAppRelationTypeList
		pModeltipherethSupportedAccount = &modeltipherethSupportedAccount
	}
	return pModeltipherethSupportedAccount
}

type toPBConverterImpl struct{}

func (c *toPBConverterImpl) ToPBAccount(source *modeltiphereth.Account) *v11.Account {
	var pV1Account *v11.Account
	if source != nil {
		var v1Account v11.Account
		v1Account.Id = ToPBInternalID((*source).ID)
		v1Account.Platform = (*source).Platform
		v1Account.PlatformAccountId = (*source).PlatformAccountID
		v1Account.Name = (*source).Name
		v1Account.ProfileUrl = (*source).ProfileURL
		v1Account.AvatarUrl = (*source).AvatarURL
		v1Account.LatestUpdateTime = ToPBTime((*source).LatestUpdateTime)
		pV1Account = &v1Account
	}
	return pV1Account
}
func (c *toPBConverterImpl) ToPBAccountList(source []*modeltiphereth.Account) []*v11.Account {
	var pV1AccountList []*v11.Account
	if source != nil {
		pV1AccountList = make([]*v11.Account, len(source))
		for i := 0; i < len(source); i++ {
			pV1AccountList[i] = c.ToPBAccount(source[i])
		}
	}
	return pV1AccountList
}
func (c *toPBConverterImpl) ToPBApp(source *modelgebura.App) *v1.App {
	var pV1App *v1.App
	if source != nil {
		var v1App v1.App
		v1App.Id = ToPBInternalID((*source).ID)
		v1App.Name = (*source).Name
		v1App.Description = (*source).Description
		v1App.AssignedAppInfoId = ToPBInternalID((*source).AssignedAppInfoID)
		v1App.Public = (*source).Public
		pV1App = &v1App
	}
	return pV1App
}
func (c *toPBConverterImpl) ToPBAppBinary(source *modelgebura.AppBinary) *v1.AppBinary {
	var pV1AppBinary *v1.AppBinary
	if source != nil {
		var v1AppBinary v1.AppBinary
		v1AppBinary.Name = (*source).Name
		v1AppBinary.SizeBytes = (*source).SizeBytes
		v1AppBinary.PublicUrl = (*source).PublicURL
		var byteList []uint8
		if (*source).Sha256 != nil {
			byteList = make([]uint8, len((*source).Sha256))
			for i := 0; i < len((*source).Sha256); i++ {
				byteList[i] = (*source).Sha256[i]
			}
		}
		v1AppBinary.Sha256 = byteList
		pV1AppBinary = &v1AppBinary
	}
	return pV1AppBinary
}
func (c *toPBConverterImpl) ToPBAppInfo(source *modelgebura.AppInfo) *v11.AppInfo {
	var pV1AppInfo *v11.AppInfo
	if source != nil {
		var v1AppInfo v11.AppInfo
		v1AppInfo.Id = ToPBInternalID((*source).ID)
		v1AppInfo.Internal = (*source).Internal
		v1AppInfo.Source = (*source).Source
		v1AppInfo.SourceAppId = (*source).SourceAppID
		pString := (*source).SourceURL
		v1AppInfo.SourceUrl = &pString
		v1AppInfo.Details = c.ToPBAppInfoDetail((*source).Details)
		v1AppInfo.Name = (*source).Name
		v1AppInfo.Type = ToPBAppType((*source).Type)
		v1AppInfo.ShortDescription = (*source).ShortDescription
		v1AppInfo.IconImageUrl = (*source).IconImageURL
		v1AppInfo.BackgroundImageUrl = (*source).BackgroundImageURL
		v1AppInfo.CoverImageUrl = (*source).CoverImageURL
		var stringList []string
		if (*source).Tags != nil {
			stringList = make([]string, len((*source).Tags))
			for i := 0; i < len((*source).Tags); i++ {
				stringList[i] = (*source).Tags[i]
			}
		}
		v1AppInfo.Tags = stringList
		pV1AppInfo = &v1AppInfo
	}
	return pV1AppInfo
}
func (c *toPBConverterImpl) ToPBAppInfoDetail(source *modelgebura.AppInfoDetails) *v11.AppInfoDetails {
	var pV1AppInfoDetails *v11.AppInfoDetails
	if source != nil {
		var v1AppInfoDetails v11.AppInfoDetails
		v1AppInfoDetails.Description = (*source).Description
		v1AppInfoDetails.ReleaseDate = (*source).ReleaseDate
		v1AppInfoDetails.Developer = (*source).Developer
		v1AppInfoDetails.Publisher = (*source).Publisher
		v1AppInfoDetails.Version = (*source).Version
		pV1AppInfoDetails = &v1AppInfoDetails
	}
	return pV1AppInfoDetails
}
func (c *toPBConverterImpl) ToPBAppInfoList(source []*modelgebura.AppInfo) []*v11.AppInfo {
	var pV1AppInfoList []*v11.AppInfo
	if source != nil {
		pV1AppInfoList = make([]*v11.AppInfo, len(source))
		for i := 0; i < len(source); i++ {
			pV1AppInfoList[i] = c.ToPBAppInfo(source[i])
		}
	}
	return pV1AppInfoList
}
func (c *toPBConverterImpl) ToPBAppInfoMixed(source *modelgebura.AppInfoMixed) *v11.AppInfoMixed {
	var pV1AppInfoMixed *v11.AppInfoMixed
	if source != nil {
		var v1AppInfoMixed v11.AppInfoMixed
		v1AppInfoMixed.Id = ToPBInternalID((*source).ID)
		v1AppInfoMixed.Details = c.ToPBAppInfoDetail((*source).Details)
		v1AppInfoMixed.Name = (*source).Name
		v1AppInfoMixed.Type = ToPBAppType((*source).Type)
		v1AppInfoMixed.ShortDescription = (*source).ShortDescription
		v1AppInfoMixed.IconImageUrl = (*source).IconImageURL
		v1AppInfoMixed.BackgroundImageUrl = (*source).BackgroundImageURL
		v1AppInfoMixed.CoverImageUrl = (*source).CoverImageURL
		var stringList []string
		if (*source).Tags != nil {
			stringList = make([]string, len((*source).Tags))
			for i := 0; i < len((*source).Tags); i++ {
				stringList[i] = (*source).Tags[i]
			}
		}
		v1AppInfoMixed.Tags = stringList
		pV1AppInfoMixed = &v1AppInfoMixed
	}
	return pV1AppInfoMixed
}
func (c *toPBConverterImpl) ToPBAppInfoMixedList(source []*modelgebura.AppInfoMixed) []*v11.AppInfoMixed {
	var pV1AppInfoMixedList []*v11.AppInfoMixed
	if source != nil {
		pV1AppInfoMixedList = make([]*v11.AppInfoMixed, len(source))
		for i := 0; i < len(source); i++ {
			pV1AppInfoMixedList[i] = c.ToPBAppInfoMixed(source[i])
		}
	}
	return pV1AppInfoMixedList
}
func (c *toPBConverterImpl) ToPBAppInst(source *modelgebura.AppInst) *v1.AppInst {
	var pV1AppInst *v1.AppInst
	if source != nil {
		var v1AppInst v1.AppInst
		v1AppInst.Id = ToPBInternalID((*source).ID)
		v1AppInst.DeviceId = ToPBInternalID((*source).DeviceID)
		v1AppInst.AppId = ToPBInternalID((*source).AppID)
		pV1AppInst = &v1AppInst
	}
	return pV1AppInst
}
func (c *toPBConverterImpl) ToPBAppInstList(source []*modelgebura.AppInst) []*v1.AppInst {
	var pV1AppInstList []*v1.AppInst
	if source != nil {
		pV1AppInstList = make([]*v1.AppInst, len(source))
		for i := 0; i < len(source); i++ {
			pV1AppInstList[i] = c.ToPBAppInst(source[i])
		}
	}
	return pV1AppInstList
}
func (c *toPBConverterImpl) ToPBAppList(source []*modelgebura.App) []*v1.App {
	var pV1AppList []*v1.App
	if source != nil {
		pV1AppList = make([]*v1.App, len(source))
		for i := 0; i < len(source); i++ {
			pV1AppList[i] = c.ToPBApp(source[i])
		}
	}
	return pV1AppList
}
func (c *toPBConverterImpl) ToPBDeviceInfo(source *modeltiphereth.DeviceInfo) *v1.DeviceInfo {
	var pV1DeviceInfo *v1.DeviceInfo
	if source != nil {
		var v1DeviceInfo v1.DeviceInfo
		v1DeviceInfo.DeviceId = ToPBInternalID((*source).ID)
		v1DeviceInfo.DeviceName = (*source).DeviceName
		v1DeviceInfo.SystemType = ToPBSystemType((*source).SystemType)
		v1DeviceInfo.SystemVersion = (*source).SystemVersion
		v1DeviceInfo.ClientName = (*source).ClientName
		v1DeviceInfo.ClientSourceCodeAddress = (*source).ClientSourceCodeAddress
		v1DeviceInfo.ClientVersion = (*source).ClientVersion
		pV1DeviceInfo = &v1DeviceInfo
	}
	return pV1DeviceInfo
}
func (c *toPBConverterImpl) ToPBDeviceInfoList(source []*modeltiphereth.DeviceInfo) []*v1.DeviceInfo {
	var pV1DeviceInfoList []*v1.DeviceInfo
	if source != nil {
		pV1DeviceInfoList = make([]*v1.DeviceInfo, len(source))
		for i := 0; i < len(source); i++ {
			pV1DeviceInfoList[i] = c.ToPBDeviceInfo(source[i])
		}
	}
	return pV1DeviceInfoList
}
func (c *toPBConverterImpl) ToPBEnclosure(source *modelfeed.Enclosure) *v11.FeedEnclosure {
	var pV1FeedEnclosure *v11.FeedEnclosure
	if source != nil {
		var v1FeedEnclosure v11.FeedEnclosure
		v1FeedEnclosure.Url = (*source).URL
		v1FeedEnclosure.Length = (*source).Length
		v1FeedEnclosure.Type = (*source).Type
		pV1FeedEnclosure = &v1FeedEnclosure
	}
	return pV1FeedEnclosure
}
func (c *toPBConverterImpl) ToPBFeed(source *modelfeed.Feed) *v11.Feed {
	var pV1Feed *v11.Feed
	if source != nil {
		var v1Feed v11.Feed
		v1Feed.Id = ToPBInternalID((*source).ID)
		v1Feed.Title = (*source).Title
		v1Feed.Link = (*source).Link
		v1Feed.Description = (*source).Description
		v1Feed.Items = c.ToPBFeedItemList((*source).Items)
		v1Feed.Language = (*source).Language
		v1Feed.Image = c.ToPBFeedImage((*source).Image)
		var pV1FeedPersonList []*v11.FeedPerson
		if (*source).Authors != nil {
			pV1FeedPersonList = make([]*v11.FeedPerson, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				pV1FeedPersonList[i] = c.pModelfeedPersonToPV1FeedPerson((*source).Authors[i])
			}
		}
		v1Feed.Authors = pV1FeedPersonList
		pV1Feed = &v1Feed
	}
	return pV1Feed
}
func (c *toPBConverterImpl) ToPBFeedConfig(source *modelyesod.FeedConfig) *v1.FeedConfig {
	var pV1FeedConfig *v1.FeedConfig
	if source != nil {
		var v1FeedConfig v1.FeedConfig
		v1FeedConfig.Id = ToPBInternalID((*source).ID)
		v1FeedConfig.Name = (*source).Name
		v1FeedConfig.FeedUrl = (*source).FeedURL
		v1FeedConfig.AuthorAccount = ToPBInternalID((*source).AuthorAccount)
		v1FeedConfig.Source = (*source).Source
		v1FeedConfig.Status = ToPBFeedConfigStatus((*source).Status)
		v1FeedConfig.PullInterval = ToPBDuration((*source).PullInterval)
		v1FeedConfig.Category = (*source).Category
		v1FeedConfig.LatestUpdateTime = ToPBTime((*source).LatestUpdateTime)
		v1FeedConfig.HideItems = (*source).HideItems
		pV1FeedConfig = &v1FeedConfig
	}
	return pV1FeedConfig
}
func (c *toPBConverterImpl) ToPBFeedImage(source *modelfeed.Image) *v11.FeedImage {
	var pV1FeedImage *v11.FeedImage
	if source != nil {
		var v1FeedImage v11.FeedImage
		v1FeedImage.Url = (*source).URL
		v1FeedImage.Title = (*source).Title
		pV1FeedImage = &v1FeedImage
	}
	return pV1FeedImage
}
func (c *toPBConverterImpl) ToPBFeedItem(source *modelfeed.Item) *v11.FeedItem {
	var pV1FeedItem *v11.FeedItem
	if source != nil {
		var v1FeedItem v11.FeedItem
		v1FeedItem.Id = ToPBInternalID((*source).ID)
		v1FeedItem.Title = (*source).Title
		var pV1FeedPersonList []*v11.FeedPerson
		if (*source).Authors != nil {
			pV1FeedPersonList = make([]*v11.FeedPerson, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				pV1FeedPersonList[i] = c.pModelfeedPersonToPV1FeedPerson((*source).Authors[i])
			}
		}
		v1FeedItem.Authors = pV1FeedPersonList
		v1FeedItem.Description = (*source).Description
		v1FeedItem.Content = (*source).Content
		v1FeedItem.Guid = (*source).GUID
		v1FeedItem.Link = (*source).Link
		v1FeedItem.Image = c.ToPBFeedImage((*source).Image)
		v1FeedItem.Published = (*source).Published
		v1FeedItem.PublishedParsed = ToPBTimePtr((*source).PublishedParsed)
		v1FeedItem.Updated = (*source).Updated
		v1FeedItem.UpdatedParsed = ToPBTimePtr((*source).UpdatedParsed)
		var pV1FeedEnclosureList []*v11.FeedEnclosure
		if (*source).Enclosures != nil {
			pV1FeedEnclosureList = make([]*v11.FeedEnclosure, len((*source).Enclosures))
			for j := 0; j < len((*source).Enclosures); j++ {
				pV1FeedEnclosureList[j] = c.ToPBEnclosure((*source).Enclosures[j])
			}
		}
		v1FeedItem.Enclosures = pV1FeedEnclosureList
		v1FeedItem.PublishPlatform = (*source).PublishPlatform
		v1FeedItem.ReadCount = (*source).ReadCount
		pV1FeedItem = &v1FeedItem
	}
	return pV1FeedItem
}
func (c *toPBConverterImpl) ToPBFeedItemDigest(source *modelyesod.FeedItemDigest) *v1.FeedItemDigest {
	var pV1FeedItemDigest *v1.FeedItemDigest
	if source != nil {
		var v1FeedItemDigest v1.FeedItemDigest
		v1FeedItemDigest.FeedId = ToPBInternalID((*source).FeedID)
		v1FeedItemDigest.ItemId = ToPBInternalID((*source).ItemID)
		v1FeedItemDigest.AvatarUrl = (*source).AvatarURL
		v1FeedItemDigest.Authors = (*source).Authors
		v1FeedItemDigest.PublishedParsedTime = ToPBTime((*source).PublishedParsedTime)
		v1FeedItemDigest.Title = (*source).Title
		v1FeedItemDigest.ShortDescription = (*source).ShortDescription
		var stringList []string
		if (*source).ImageUrls != nil {
			stringList = make([]string, len((*source).ImageUrls))
			for i := 0; i < len((*source).ImageUrls); i++ {
				stringList[i] = (*source).ImageUrls[i]
			}
		}
		v1FeedItemDigest.ImageUrls = stringList
		v1FeedItemDigest.PublishPlatform = (*source).PublishPlatform
		v1FeedItemDigest.FeedConfigName = (*source).FeedConfigName
		v1FeedItemDigest.FeedAvatarUrl = (*source).FeedAvatarURL
		v1FeedItemDigest.ReadCount = (*source).ReadCount
		pV1FeedItemDigest = &v1FeedItemDigest
	}
	return pV1FeedItemDigest
}
func (c *toPBConverterImpl) ToPBFeedItemDigestList(source []*modelyesod.FeedItemDigest) []*v1.FeedItemDigest {
	var pV1FeedItemDigestList []*v1.FeedItemDigest
	if source != nil {
		pV1FeedItemDigestList = make([]*v1.FeedItemDigest, len(source))
		for i := 0; i < len(source); i++ {
			pV1FeedItemDigestList[i] = c.ToPBFeedItemDigest(source[i])
		}
	}
	return pV1FeedItemDigestList
}
func (c *toPBConverterImpl) ToPBFeedItemList(source []*modelfeed.Item) []*v11.FeedItem {
	var pV1FeedItemList []*v11.FeedItem
	if source != nil {
		pV1FeedItemList = make([]*v11.FeedItem, len(source))
		for i := 0; i < len(source); i++ {
			pV1FeedItemList[i] = c.ToPBFeedItem(source[i])
		}
	}
	return pV1FeedItemList
}
func (c *toPBConverterImpl) ToPBFeedWithConfig(source *modelyesod.FeedWithConfig) *v1.ListFeedConfigsResponse_FeedWithConfig {
	var pV1ListFeedConfigsResponse_FeedWithConfig *v1.ListFeedConfigsResponse_FeedWithConfig
	if source != nil {
		var v1ListFeedConfigsResponse_FeedWithConfig v1.ListFeedConfigsResponse_FeedWithConfig
		v1ListFeedConfigsResponse_FeedWithConfig.Feed = c.ToPBFeed((*source).Feed)
		v1ListFeedConfigsResponse_FeedWithConfig.Config = c.ToPBFeedConfig((*source).FeedConfig)
		pV1ListFeedConfigsResponse_FeedWithConfig = &v1ListFeedConfigsResponse_FeedWithConfig
	}
	return pV1ListFeedConfigsResponse_FeedWithConfig
}
func (c *toPBConverterImpl) ToPBFeedWithConfigList(source []*modelyesod.FeedWithConfig) []*v1.ListFeedConfigsResponse_FeedWithConfig {
	var pV1ListFeedConfigsResponse_FeedWithConfigList []*v1.ListFeedConfigsResponse_FeedWithConfig
	if source != nil {
		pV1ListFeedConfigsResponse_FeedWithConfigList = make([]*v1.ListFeedConfigsResponse_FeedWithConfig, len(source))
		for i := 0; i < len(source); i++ {
			pV1ListFeedConfigsResponse_FeedWithConfigList[i] = c.ToPBFeedWithConfig(source[i])
		}
	}
	return pV1ListFeedConfigsResponse_FeedWithConfigList
}
func (c *toPBConverterImpl) ToPBInternalIDList(source []model.InternalID) []*v11.InternalID {
	var pV1InternalIDList []*v11.InternalID
	if source != nil {
		pV1InternalIDList = make([]*v11.InternalID, len(source))
		for i := 0; i < len(source); i++ {
			pV1InternalIDList[i] = ToPBInternalID(source[i])
		}
	}
	return pV1InternalIDList
}
func (c *toPBConverterImpl) ToPBNotifyFlow(source *modelnetzach.NotifyFlow) *v1.NotifyFlow {
	var pV1NotifyFlow *v1.NotifyFlow
	if source != nil {
		var v1NotifyFlow v1.NotifyFlow
		v1NotifyFlow.Id = ToPBInternalID((*source).ID)
		v1NotifyFlow.Name = (*source).Name
		v1NotifyFlow.Description = (*source).Description
		var pV1NotifyFlowSourceList []*v1.NotifyFlowSource
		if (*source).Sources != nil {
			pV1NotifyFlowSourceList = make([]*v1.NotifyFlowSource, len((*source).Sources))
			for i := 0; i < len((*source).Sources); i++ {
				pV1NotifyFlowSourceList[i] = c.ToPBNotifyFlowSource((*source).Sources[i])
			}
		}
		v1NotifyFlow.Sources = pV1NotifyFlowSourceList
		var pV1NotifyFlowTargetList []*v1.NotifyFlowTarget
		if (*source).Targets != nil {
			pV1NotifyFlowTargetList = make([]*v1.NotifyFlowTarget, len((*source).Targets))
			for j := 0; j < len((*source).Targets); j++ {
				pV1NotifyFlowTargetList[j] = c.ToPBNotifyFlowTarget((*source).Targets[j])
			}
		}
		v1NotifyFlow.Targets = pV1NotifyFlowTargetList
		v1NotifyFlow.Status = ToPBNotifyFlowStatus((*source).Status)
		pV1NotifyFlow = &v1NotifyFlow
	}
	return pV1NotifyFlow
}
func (c *toPBConverterImpl) ToPBNotifyFlowList(source []*modelnetzach.NotifyFlow) []*v1.NotifyFlow {
	var pV1NotifyFlowList []*v1.NotifyFlow
	if source != nil {
		pV1NotifyFlowList = make([]*v1.NotifyFlow, len(source))
		for i := 0; i < len(source); i++ {
			pV1NotifyFlowList[i] = c.ToPBNotifyFlow(source[i])
		}
	}
	return pV1NotifyFlowList
}
func (c *toPBConverterImpl) ToPBNotifyFlowSource(source *modelnetzach.NotifyFlowSource) *v1.NotifyFlowSource {
	var pV1NotifyFlowSource *v1.NotifyFlowSource
	if source != nil {
		var v1NotifyFlowSource v1.NotifyFlowSource
		v1NotifyFlowSource.Filter = c.pModelnetzachNotifyFilterToPV1NotifyFilter((*source).Filter)
		v1NotifyFlowSource.SourceId = ToPBInternalID((*source).SourceID)
		pV1NotifyFlowSource = &v1NotifyFlowSource
	}
	return pV1NotifyFlowSource
}
func (c *toPBConverterImpl) ToPBNotifyFlowTarget(source *modelnetzach.NotifyFlowTarget) *v1.NotifyFlowTarget {
	var pV1NotifyFlowTarget *v1.NotifyFlowTarget
	if source != nil {
		var v1NotifyFlowTarget v1.NotifyFlowTarget
		v1NotifyFlowTarget.Filter = c.pModelnetzachNotifyFilterToPV1NotifyFilter((*source).Filter)
		v1NotifyFlowTarget.TargetId = ToPBInternalID((*source).TargetID)
		v1NotifyFlowTarget.ChannelId = (*source).ChannelID
		pV1NotifyFlowTarget = &v1NotifyFlowTarget
	}
	return pV1NotifyFlowTarget
}
func (c *toPBConverterImpl) ToPBNotifyTarget(source *modelnetzach.NotifyTarget) *v1.NotifyTarget {
	var pV1NotifyTarget *v1.NotifyTarget
	if source != nil {
		var v1NotifyTarget v1.NotifyTarget
		v1NotifyTarget.Id = ToPBInternalID((*source).ID)
		v1NotifyTarget.Name = (*source).Name
		v1NotifyTarget.Description = (*source).Description
		v1NotifyTarget.Destination = (*source).Destination
		v1NotifyTarget.Status = ToPBNotifyTargetStatus((*source).Status)
		v1NotifyTarget.Token = (*source).Token
		pV1NotifyTarget = &v1NotifyTarget
	}
	return pV1NotifyTarget
}
func (c *toPBConverterImpl) ToPBNotifyTargetList(source []*modelnetzach.NotifyTarget) []*v1.NotifyTarget {
	var pV1NotifyTargetList []*v1.NotifyTarget
	if source != nil {
		pV1NotifyTargetList = make([]*v1.NotifyTarget, len(source))
		for i := 0; i < len(source); i++ {
			pV1NotifyTargetList[i] = c.ToPBNotifyTarget(source[i])
		}
	}
	return pV1NotifyTargetList
}
func (c *toPBConverterImpl) ToPBPorter(source *modeltiphereth.PorterInstance) *v1.Porter {
	var pV1Porter *v1.Porter
	if source != nil {
		var v1Porter v1.Porter
		v1Porter.Id = ToPBInternalID((*source).ID)
		v1Porter.Name = (*source).Name
		v1Porter.Version = (*source).Version
		v1Porter.GlobalName = (*source).GlobalName
		v1Porter.Status = ToPBPorterStatus((*source).Status)
		v1Porter.ConnectionStatus = ToPBPorterConnectionStatus((*source).ConnectionStatus)
		pV1Porter = &v1Porter
	}
	return pV1Porter
}
func (c *toPBConverterImpl) ToPBPorterList(source []*modeltiphereth.PorterInstance) []*v1.Porter {
	var pV1PorterList []*v1.Porter
	if source != nil {
		pV1PorterList = make([]*v1.Porter, len(source))
		for i := 0; i < len(source); i++ {
			pV1PorterList[i] = c.ToPBPorter(source[i])
		}
	}
	return pV1PorterList
}
func (c *toPBConverterImpl) ToPBServerFeatureSummary(source *modeltiphereth.ServerFeatureSummary) *v1.ServerFeatureSummary {
	var pV1ServerFeatureSummary *v1.ServerFeatureSummary
	if source != nil {
		var v1ServerFeatureSummary v1.ServerFeatureSummary
		var stringList []string
		if (*source).SupportedAccountPlatforms != nil {
			stringList = make([]string, len((*source).SupportedAccountPlatforms))
			for i := 0; i < len((*source).SupportedAccountPlatforms); i++ {
				stringList[i] = (*source).SupportedAccountPlatforms[i]
			}
		}
		v1ServerFeatureSummary.SupportedAccountPlatforms = stringList
		var stringList2 []string
		if (*source).SupportedAppInfoSources != nil {
			stringList2 = make([]string, len((*source).SupportedAppInfoSources))
			for j := 0; j < len((*source).SupportedAppInfoSources); j++ {
				stringList2[j] = (*source).SupportedAppInfoSources[j]
			}
		}
		v1ServerFeatureSummary.SupportedAppInfoSources = stringList2
		var stringList3 []string
		if (*source).SupportedFeedSources != nil {
			stringList3 = make([]string, len((*source).SupportedFeedSources))
			for k := 0; k < len((*source).SupportedFeedSources); k++ {
				stringList3[k] = (*source).SupportedFeedSources[k]
			}
		}
		v1ServerFeatureSummary.SupportedFeedSources = stringList3
		var stringList4 []string
		if (*source).SupportedNotifyDestinations != nil {
			stringList4 = make([]string, len((*source).SupportedNotifyDestinations))
			for l := 0; l < len((*source).SupportedNotifyDestinations); l++ {
				stringList4[l] = (*source).SupportedNotifyDestinations[l]
			}
		}
		v1ServerFeatureSummary.SupportedNotifyDestinations = stringList4
		pV1ServerFeatureSummary = &v1ServerFeatureSummary
	}
	return pV1ServerFeatureSummary
}
func (c *toPBConverterImpl) ToPBTimeRange(source *model.TimeRange) *v11.TimeRange {
	var pV1TimeRange *v11.TimeRange
	if source != nil {
		var v1TimeRange v11.TimeRange
		v1TimeRange.StartTime = ToPBTime((*source).StartTime)
		v1TimeRange.Duration = ToPBDuration((*source).Duration)
		pV1TimeRange = &v1TimeRange
	}
	return pV1TimeRange
}
func (c *toPBConverterImpl) ToPBUser(source *modeltiphereth.User) *v1.User {
	var pV1User *v1.User
	if source != nil {
		var v1User v1.User
		v1User.Id = ToPBInternalID((*source).ID)
		v1User.Username = (*source).UserName
		v1User.Type = ToPBUserType((*source).Type)
		v1User.Status = ToPBUserStatus((*source).Status)
		pV1User = &v1User
	}
	return pV1User
}
func (c *toPBConverterImpl) ToPBUserList(source []*modeltiphereth.User) []*v1.User {
	var pV1UserList []*v1.User
	if source != nil {
		pV1UserList = make([]*v1.User, len(source))
		for i := 0; i < len(source); i++ {
			pV1UserList[i] = c.ToPBUser(source[i])
		}
	}
	return pV1UserList
}
func (c *toPBConverterImpl) ToPBUserSession(source *modeltiphereth.UserSession) *v1.UserSession {
	var pV1UserSession *v1.UserSession
	if source != nil {
		var v1UserSession v1.UserSession
		v1UserSession.Id = ToPBInternalID((*source).ID)
		v1UserSession.UserId = ToPBInternalID((*source).UserID)
		v1UserSession.DeviceInfo = c.ToPBDeviceInfo((*source).DeviceInfo)
		v1UserSession.CreateTime = ToPBTime((*source).CreateAt)
		v1UserSession.ExpireTime = ToPBTime((*source).ExpireAt)
		pV1UserSession = &v1UserSession
	}
	return pV1UserSession
}
func (c *toPBConverterImpl) ToPBUserSessionList(source []*modeltiphereth.UserSession) []*v1.UserSession {
	var pV1UserSessionList []*v1.UserSession
	if source != nil {
		pV1UserSessionList = make([]*v1.UserSession, len(source))
		for i := 0; i < len(source); i++ {
			pV1UserSessionList[i] = c.ToPBUserSession(source[i])
		}
	}
	return pV1UserSessionList
}
func (c *toPBConverterImpl) pModelfeedPersonToPV1FeedPerson(source *modelfeed.Person) *v11.FeedPerson {
	var pV1FeedPerson *v11.FeedPerson
	if source != nil {
		var v1FeedPerson v11.FeedPerson
		v1FeedPerson.Name = (*source).Name
		v1FeedPerson.Email = (*source).Email
		pV1FeedPerson = &v1FeedPerson
	}
	return pV1FeedPerson
}
func (c *toPBConverterImpl) pModelnetzachNotifyFilterToPV1NotifyFilter(source *modelnetzach.NotifyFilter) *v1.NotifyFilter {
	var pV1NotifyFilter *v1.NotifyFilter
	if source != nil {
		var v1NotifyFilter v1.NotifyFilter
		var stringList []string
		if (*source).ExcludeKeywords != nil {
			stringList = make([]string, len((*source).ExcludeKeywords))
			for i := 0; i < len((*source).ExcludeKeywords); i++ {
				stringList[i] = (*source).ExcludeKeywords[i]
			}
		}
		v1NotifyFilter.ExcludeKeywords = stringList
		var stringList2 []string
		if (*source).IncludeKeywords != nil {
			stringList2 = make([]string, len((*source).IncludeKeywords))
			for j := 0; j < len((*source).IncludeKeywords); j++ {
				stringList2[j] = (*source).IncludeKeywords[j]
			}
		}
		v1NotifyFilter.IncludeKeywords = stringList2
		pV1NotifyFilter = &v1NotifyFilter
	}
	return pV1NotifyFilter
}
