// Code generated by ent, DO NOT EDIT.

package feedconfig

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the feedconfig type in the database.
	Label = "feed_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFeedURL holds the string denoting the feed_url field in the database.
	FieldFeedURL = "feed_url"
	// FieldAuthorAccount holds the string denoting the author_account field in the database.
	FieldAuthorAccount = "author_account"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPullInterval holds the string denoting the pull_interval field in the database.
	FieldPullInterval = "pull_interval"
	// FieldNextPullBeginAt holds the string denoting the next_pull_begin_at field in the database.
	FieldNextPullBeginAt = "next_pull_begin_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeFeed holds the string denoting the feed edge name in mutations.
	EdgeFeed = "feed"
	// Table holds the table name of the feedconfig in the database.
	Table = "feed_configs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "feed_configs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_feed_config"
	// FeedTable is the table that holds the feed relation/edge.
	FeedTable = "feeds"
	// FeedInverseTable is the table name for the Feed entity.
	// It exists in this package in order to avoid circular dependency with the "feed" package.
	FeedInverseTable = "feeds"
	// FeedColumn is the table column denoting the feed relation/edge.
	FeedColumn = "feed_config_feed"
)

// Columns holds all SQL columns for feedconfig fields.
var Columns = []string{
	FieldID,
	FieldFeedURL,
	FieldAuthorAccount,
	FieldSource,
	FieldStatus,
	FieldPullInterval,
	FieldNextPullBeginAt,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "feed_configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_feed_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultNextPullBeginAt holds the default value on creation for the "next_pull_begin_at" field.
	DefaultNextPullBeginAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Source defines the type for the "source" enum field.
type Source string

// Source values.
const (
	SourceCommon Source = "common"
)

func (s Source) String() string {
	return string(s)
}

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s Source) error {
	switch s {
	case SourceCommon:
		return nil
	default:
		return fmt.Errorf("feedconfig: invalid enum value for source field: %q", s)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActive  Status = "active"
	StatusSuspend Status = "suspend"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusSuspend:
		return nil
	default:
		return fmt.Errorf("feedconfig: invalid enum value for status field: %q", s)
	}
}
