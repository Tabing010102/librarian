// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/feedconfig"
)

// FeedConfigCreate is the builder for creating a FeedConfig entity.
type FeedConfigCreate struct {
	config
	mutation *FeedConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInternalID sets the "internal_id" field.
func (fcc *FeedConfigCreate) SetInternalID(i int64) *FeedConfigCreate {
	fcc.mutation.SetInternalID(i)
	return fcc
}

// SetFeedURL sets the "feed_url" field.
func (fcc *FeedConfigCreate) SetFeedURL(s string) *FeedConfigCreate {
	fcc.mutation.SetFeedURL(s)
	return fcc
}

// SetAuthorAccount sets the "author_account" field.
func (fcc *FeedConfigCreate) SetAuthorAccount(i int64) *FeedConfigCreate {
	fcc.mutation.SetAuthorAccount(i)
	return fcc
}

// SetStatus sets the "status" field.
func (fcc *FeedConfigCreate) SetStatus(f feedconfig.Status) *FeedConfigCreate {
	fcc.mutation.SetStatus(f)
	return fcc
}

// SetPullInterval sets the "pull_interval" field.
func (fcc *FeedConfigCreate) SetPullInterval(t time.Time) *FeedConfigCreate {
	fcc.mutation.SetPullInterval(t)
	return fcc
}

// SetLastPullAt sets the "last_pull_at" field.
func (fcc *FeedConfigCreate) SetLastPullAt(t time.Time) *FeedConfigCreate {
	fcc.mutation.SetLastPullAt(t)
	return fcc
}

// SetUpdatedAt sets the "updated_at" field.
func (fcc *FeedConfigCreate) SetUpdatedAt(t time.Time) *FeedConfigCreate {
	fcc.mutation.SetUpdatedAt(t)
	return fcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fcc *FeedConfigCreate) SetNillableUpdatedAt(t *time.Time) *FeedConfigCreate {
	if t != nil {
		fcc.SetUpdatedAt(*t)
	}
	return fcc
}

// SetCreatedAt sets the "created_at" field.
func (fcc *FeedConfigCreate) SetCreatedAt(t time.Time) *FeedConfigCreate {
	fcc.mutation.SetCreatedAt(t)
	return fcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fcc *FeedConfigCreate) SetNillableCreatedAt(t *time.Time) *FeedConfigCreate {
	if t != nil {
		fcc.SetCreatedAt(*t)
	}
	return fcc
}

// Mutation returns the FeedConfigMutation object of the builder.
func (fcc *FeedConfigCreate) Mutation() *FeedConfigMutation {
	return fcc.mutation
}

// Save creates the FeedConfig in the database.
func (fcc *FeedConfigCreate) Save(ctx context.Context) (*FeedConfig, error) {
	fcc.defaults()
	return withHooks[*FeedConfig, FeedConfigMutation](ctx, fcc.sqlSave, fcc.mutation, fcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fcc *FeedConfigCreate) SaveX(ctx context.Context) *FeedConfig {
	v, err := fcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcc *FeedConfigCreate) Exec(ctx context.Context) error {
	_, err := fcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcc *FeedConfigCreate) ExecX(ctx context.Context) {
	if err := fcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcc *FeedConfigCreate) defaults() {
	if _, ok := fcc.mutation.UpdatedAt(); !ok {
		v := feedconfig.DefaultUpdatedAt()
		fcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fcc.mutation.CreatedAt(); !ok {
		v := feedconfig.DefaultCreatedAt()
		fcc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcc *FeedConfigCreate) check() error {
	if _, ok := fcc.mutation.InternalID(); !ok {
		return &ValidationError{Name: "internal_id", err: errors.New(`ent: missing required field "FeedConfig.internal_id"`)}
	}
	if _, ok := fcc.mutation.FeedURL(); !ok {
		return &ValidationError{Name: "feed_url", err: errors.New(`ent: missing required field "FeedConfig.feed_url"`)}
	}
	if _, ok := fcc.mutation.AuthorAccount(); !ok {
		return &ValidationError{Name: "author_account", err: errors.New(`ent: missing required field "FeedConfig.author_account"`)}
	}
	if _, ok := fcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FeedConfig.status"`)}
	}
	if v, ok := fcc.mutation.Status(); ok {
		if err := feedconfig.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FeedConfig.status": %w`, err)}
		}
	}
	if _, ok := fcc.mutation.PullInterval(); !ok {
		return &ValidationError{Name: "pull_interval", err: errors.New(`ent: missing required field "FeedConfig.pull_interval"`)}
	}
	if _, ok := fcc.mutation.LastPullAt(); !ok {
		return &ValidationError{Name: "last_pull_at", err: errors.New(`ent: missing required field "FeedConfig.last_pull_at"`)}
	}
	if _, ok := fcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeedConfig.updated_at"`)}
	}
	if _, ok := fcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeedConfig.created_at"`)}
	}
	return nil
}

func (fcc *FeedConfigCreate) sqlSave(ctx context.Context) (*FeedConfig, error) {
	if err := fcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fcc.mutation.id = &_node.ID
	fcc.mutation.done = true
	return _node, nil
}

func (fcc *FeedConfigCreate) createSpec() (*FeedConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &FeedConfig{config: fcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feedconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feedconfig.FieldID,
			},
		}
	)
	_spec.OnConflict = fcc.conflict
	if value, ok := fcc.mutation.InternalID(); ok {
		_spec.SetField(feedconfig.FieldInternalID, field.TypeInt64, value)
		_node.InternalID = value
	}
	if value, ok := fcc.mutation.FeedURL(); ok {
		_spec.SetField(feedconfig.FieldFeedURL, field.TypeString, value)
		_node.FeedURL = value
	}
	if value, ok := fcc.mutation.AuthorAccount(); ok {
		_spec.SetField(feedconfig.FieldAuthorAccount, field.TypeInt64, value)
		_node.AuthorAccount = value
	}
	if value, ok := fcc.mutation.Status(); ok {
		_spec.SetField(feedconfig.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := fcc.mutation.PullInterval(); ok {
		_spec.SetField(feedconfig.FieldPullInterval, field.TypeTime, value)
		_node.PullInterval = value
	}
	if value, ok := fcc.mutation.LastPullAt(); ok {
		_spec.SetField(feedconfig.FieldLastPullAt, field.TypeTime, value)
		_node.LastPullAt = value
	}
	if value, ok := fcc.mutation.UpdatedAt(); ok {
		_spec.SetField(feedconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fcc.mutation.CreatedAt(); ok {
		_spec.SetField(feedconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeedConfig.Create().
//		SetInternalID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedConfigUpsert) {
//			SetInternalID(v+v).
//		}).
//		Exec(ctx)
func (fcc *FeedConfigCreate) OnConflict(opts ...sql.ConflictOption) *FeedConfigUpsertOne {
	fcc.conflict = opts
	return &FeedConfigUpsertOne{
		create: fcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeedConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcc *FeedConfigCreate) OnConflictColumns(columns ...string) *FeedConfigUpsertOne {
	fcc.conflict = append(fcc.conflict, sql.ConflictColumns(columns...))
	return &FeedConfigUpsertOne{
		create: fcc,
	}
}

type (
	// FeedConfigUpsertOne is the builder for "upsert"-ing
	//  one FeedConfig node.
	FeedConfigUpsertOne struct {
		create *FeedConfigCreate
	}

	// FeedConfigUpsert is the "OnConflict" setter.
	FeedConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetInternalID sets the "internal_id" field.
func (u *FeedConfigUpsert) SetInternalID(v int64) *FeedConfigUpsert {
	u.Set(feedconfig.FieldInternalID, v)
	return u
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *FeedConfigUpsert) UpdateInternalID() *FeedConfigUpsert {
	u.SetExcluded(feedconfig.FieldInternalID)
	return u
}

// AddInternalID adds v to the "internal_id" field.
func (u *FeedConfigUpsert) AddInternalID(v int64) *FeedConfigUpsert {
	u.Add(feedconfig.FieldInternalID, v)
	return u
}

// SetFeedURL sets the "feed_url" field.
func (u *FeedConfigUpsert) SetFeedURL(v string) *FeedConfigUpsert {
	u.Set(feedconfig.FieldFeedURL, v)
	return u
}

// UpdateFeedURL sets the "feed_url" field to the value that was provided on create.
func (u *FeedConfigUpsert) UpdateFeedURL() *FeedConfigUpsert {
	u.SetExcluded(feedconfig.FieldFeedURL)
	return u
}

// SetAuthorAccount sets the "author_account" field.
func (u *FeedConfigUpsert) SetAuthorAccount(v int64) *FeedConfigUpsert {
	u.Set(feedconfig.FieldAuthorAccount, v)
	return u
}

// UpdateAuthorAccount sets the "author_account" field to the value that was provided on create.
func (u *FeedConfigUpsert) UpdateAuthorAccount() *FeedConfigUpsert {
	u.SetExcluded(feedconfig.FieldAuthorAccount)
	return u
}

// AddAuthorAccount adds v to the "author_account" field.
func (u *FeedConfigUpsert) AddAuthorAccount(v int64) *FeedConfigUpsert {
	u.Add(feedconfig.FieldAuthorAccount, v)
	return u
}

// SetStatus sets the "status" field.
func (u *FeedConfigUpsert) SetStatus(v feedconfig.Status) *FeedConfigUpsert {
	u.Set(feedconfig.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FeedConfigUpsert) UpdateStatus() *FeedConfigUpsert {
	u.SetExcluded(feedconfig.FieldStatus)
	return u
}

// SetPullInterval sets the "pull_interval" field.
func (u *FeedConfigUpsert) SetPullInterval(v time.Time) *FeedConfigUpsert {
	u.Set(feedconfig.FieldPullInterval, v)
	return u
}

// UpdatePullInterval sets the "pull_interval" field to the value that was provided on create.
func (u *FeedConfigUpsert) UpdatePullInterval() *FeedConfigUpsert {
	u.SetExcluded(feedconfig.FieldPullInterval)
	return u
}

// SetLastPullAt sets the "last_pull_at" field.
func (u *FeedConfigUpsert) SetLastPullAt(v time.Time) *FeedConfigUpsert {
	u.Set(feedconfig.FieldLastPullAt, v)
	return u
}

// UpdateLastPullAt sets the "last_pull_at" field to the value that was provided on create.
func (u *FeedConfigUpsert) UpdateLastPullAt() *FeedConfigUpsert {
	u.SetExcluded(feedconfig.FieldLastPullAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedConfigUpsert) SetUpdatedAt(v time.Time) *FeedConfigUpsert {
	u.Set(feedconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedConfigUpsert) UpdateUpdatedAt() *FeedConfigUpsert {
	u.SetExcluded(feedconfig.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedConfigUpsert) SetCreatedAt(v time.Time) *FeedConfigUpsert {
	u.Set(feedconfig.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedConfigUpsert) UpdateCreatedAt() *FeedConfigUpsert {
	u.SetExcluded(feedconfig.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FeedConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FeedConfigUpsertOne) UpdateNewValues() *FeedConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeedConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FeedConfigUpsertOne) Ignore() *FeedConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedConfigUpsertOne) DoNothing() *FeedConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedConfigCreate.OnConflict
// documentation for more info.
func (u *FeedConfigUpsertOne) Update(set func(*FeedConfigUpsert)) *FeedConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalID sets the "internal_id" field.
func (u *FeedConfigUpsertOne) SetInternalID(v int64) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetInternalID(v)
	})
}

// AddInternalID adds v to the "internal_id" field.
func (u *FeedConfigUpsertOne) AddInternalID(v int64) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.AddInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *FeedConfigUpsertOne) UpdateInternalID() *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateInternalID()
	})
}

// SetFeedURL sets the "feed_url" field.
func (u *FeedConfigUpsertOne) SetFeedURL(v string) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetFeedURL(v)
	})
}

// UpdateFeedURL sets the "feed_url" field to the value that was provided on create.
func (u *FeedConfigUpsertOne) UpdateFeedURL() *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateFeedURL()
	})
}

// SetAuthorAccount sets the "author_account" field.
func (u *FeedConfigUpsertOne) SetAuthorAccount(v int64) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetAuthorAccount(v)
	})
}

// AddAuthorAccount adds v to the "author_account" field.
func (u *FeedConfigUpsertOne) AddAuthorAccount(v int64) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.AddAuthorAccount(v)
	})
}

// UpdateAuthorAccount sets the "author_account" field to the value that was provided on create.
func (u *FeedConfigUpsertOne) UpdateAuthorAccount() *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateAuthorAccount()
	})
}

// SetStatus sets the "status" field.
func (u *FeedConfigUpsertOne) SetStatus(v feedconfig.Status) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FeedConfigUpsertOne) UpdateStatus() *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateStatus()
	})
}

// SetPullInterval sets the "pull_interval" field.
func (u *FeedConfigUpsertOne) SetPullInterval(v time.Time) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetPullInterval(v)
	})
}

// UpdatePullInterval sets the "pull_interval" field to the value that was provided on create.
func (u *FeedConfigUpsertOne) UpdatePullInterval() *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdatePullInterval()
	})
}

// SetLastPullAt sets the "last_pull_at" field.
func (u *FeedConfigUpsertOne) SetLastPullAt(v time.Time) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetLastPullAt(v)
	})
}

// UpdateLastPullAt sets the "last_pull_at" field to the value that was provided on create.
func (u *FeedConfigUpsertOne) UpdateLastPullAt() *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateLastPullAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedConfigUpsertOne) SetUpdatedAt(v time.Time) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedConfigUpsertOne) UpdateUpdatedAt() *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedConfigUpsertOne) SetCreatedAt(v time.Time) *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedConfigUpsertOne) UpdateCreatedAt() *FeedConfigUpsertOne {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *FeedConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeedConfigUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeedConfigUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeedConfigCreateBulk is the builder for creating many FeedConfig entities in bulk.
type FeedConfigCreateBulk struct {
	config
	builders []*FeedConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the FeedConfig entities in the database.
func (fccb *FeedConfigCreateBulk) Save(ctx context.Context) ([]*FeedConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fccb.builders))
	nodes := make([]*FeedConfig, len(fccb.builders))
	mutators := make([]Mutator, len(fccb.builders))
	for i := range fccb.builders {
		func(i int, root context.Context) {
			builder := fccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fccb *FeedConfigCreateBulk) SaveX(ctx context.Context) []*FeedConfig {
	v, err := fccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fccb *FeedConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := fccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fccb *FeedConfigCreateBulk) ExecX(ctx context.Context) {
	if err := fccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FeedConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedConfigUpsert) {
//			SetInternalID(v+v).
//		}).
//		Exec(ctx)
func (fccb *FeedConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeedConfigUpsertBulk {
	fccb.conflict = opts
	return &FeedConfigUpsertBulk{
		create: fccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FeedConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fccb *FeedConfigCreateBulk) OnConflictColumns(columns ...string) *FeedConfigUpsertBulk {
	fccb.conflict = append(fccb.conflict, sql.ConflictColumns(columns...))
	return &FeedConfigUpsertBulk{
		create: fccb,
	}
}

// FeedConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of FeedConfig nodes.
type FeedConfigUpsertBulk struct {
	create *FeedConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FeedConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FeedConfigUpsertBulk) UpdateNewValues() *FeedConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FeedConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FeedConfigUpsertBulk) Ignore() *FeedConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedConfigUpsertBulk) DoNothing() *FeedConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedConfigCreateBulk.OnConflict
// documentation for more info.
func (u *FeedConfigUpsertBulk) Update(set func(*FeedConfigUpsert)) *FeedConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetInternalID sets the "internal_id" field.
func (u *FeedConfigUpsertBulk) SetInternalID(v int64) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetInternalID(v)
	})
}

// AddInternalID adds v to the "internal_id" field.
func (u *FeedConfigUpsertBulk) AddInternalID(v int64) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.AddInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *FeedConfigUpsertBulk) UpdateInternalID() *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateInternalID()
	})
}

// SetFeedURL sets the "feed_url" field.
func (u *FeedConfigUpsertBulk) SetFeedURL(v string) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetFeedURL(v)
	})
}

// UpdateFeedURL sets the "feed_url" field to the value that was provided on create.
func (u *FeedConfigUpsertBulk) UpdateFeedURL() *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateFeedURL()
	})
}

// SetAuthorAccount sets the "author_account" field.
func (u *FeedConfigUpsertBulk) SetAuthorAccount(v int64) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetAuthorAccount(v)
	})
}

// AddAuthorAccount adds v to the "author_account" field.
func (u *FeedConfigUpsertBulk) AddAuthorAccount(v int64) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.AddAuthorAccount(v)
	})
}

// UpdateAuthorAccount sets the "author_account" field to the value that was provided on create.
func (u *FeedConfigUpsertBulk) UpdateAuthorAccount() *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateAuthorAccount()
	})
}

// SetStatus sets the "status" field.
func (u *FeedConfigUpsertBulk) SetStatus(v feedconfig.Status) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FeedConfigUpsertBulk) UpdateStatus() *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateStatus()
	})
}

// SetPullInterval sets the "pull_interval" field.
func (u *FeedConfigUpsertBulk) SetPullInterval(v time.Time) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetPullInterval(v)
	})
}

// UpdatePullInterval sets the "pull_interval" field to the value that was provided on create.
func (u *FeedConfigUpsertBulk) UpdatePullInterval() *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdatePullInterval()
	})
}

// SetLastPullAt sets the "last_pull_at" field.
func (u *FeedConfigUpsertBulk) SetLastPullAt(v time.Time) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetLastPullAt(v)
	})
}

// UpdateLastPullAt sets the "last_pull_at" field to the value that was provided on create.
func (u *FeedConfigUpsertBulk) UpdateLastPullAt() *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateLastPullAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedConfigUpsertBulk) SetUpdatedAt(v time.Time) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedConfigUpsertBulk) UpdateUpdatedAt() *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedConfigUpsertBulk) SetCreatedAt(v time.Time) *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedConfigUpsertBulk) UpdateCreatedAt() *FeedConfigUpsertBulk {
	return u.Update(func(s *FeedConfigUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *FeedConfigUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeedConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
