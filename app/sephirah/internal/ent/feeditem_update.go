// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/feeditem"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/predicate"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/schema"
)

// FeedItemUpdate is the builder for updating FeedItem entities.
type FeedItemUpdate struct {
	config
	hooks    []Hook
	mutation *FeedItemMutation
}

// Where appends a list predicates to the FeedItemUpdate builder.
func (fiu *FeedItemUpdate) Where(ps ...predicate.FeedItem) *FeedItemUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetInternalID sets the "internal_id" field.
func (fiu *FeedItemUpdate) SetInternalID(i int64) *FeedItemUpdate {
	fiu.mutation.ResetInternalID()
	fiu.mutation.SetInternalID(i)
	return fiu
}

// AddInternalID adds i to the "internal_id" field.
func (fiu *FeedItemUpdate) AddInternalID(i int64) *FeedItemUpdate {
	fiu.mutation.AddInternalID(i)
	return fiu
}

// SetTitle sets the "title" field.
func (fiu *FeedItemUpdate) SetTitle(s string) *FeedItemUpdate {
	fiu.mutation.SetTitle(s)
	return fiu
}

// SetAuthors sets the "authors" field.
func (fiu *FeedItemUpdate) SetAuthors(s []schema.Person) *FeedItemUpdate {
	fiu.mutation.SetAuthors(s)
	return fiu
}

// AppendAuthors appends s to the "authors" field.
func (fiu *FeedItemUpdate) AppendAuthors(s []schema.Person) *FeedItemUpdate {
	fiu.mutation.AppendAuthors(s)
	return fiu
}

// SetDescription sets the "description" field.
func (fiu *FeedItemUpdate) SetDescription(s string) *FeedItemUpdate {
	fiu.mutation.SetDescription(s)
	return fiu
}

// SetContent sets the "content" field.
func (fiu *FeedItemUpdate) SetContent(s string) *FeedItemUpdate {
	fiu.mutation.SetContent(s)
	return fiu
}

// SetGUID sets the "guid" field.
func (fiu *FeedItemUpdate) SetGUID(s string) *FeedItemUpdate {
	fiu.mutation.SetGUID(s)
	return fiu
}

// SetLink sets the "link" field.
func (fiu *FeedItemUpdate) SetLink(s string) *FeedItemUpdate {
	fiu.mutation.SetLink(s)
	return fiu
}

// SetImages sets the "images" field.
func (fiu *FeedItemUpdate) SetImages(s []schema.Image) *FeedItemUpdate {
	fiu.mutation.SetImages(s)
	return fiu
}

// AppendImages appends s to the "images" field.
func (fiu *FeedItemUpdate) AppendImages(s []schema.Image) *FeedItemUpdate {
	fiu.mutation.AppendImages(s)
	return fiu
}

// SetPublished sets the "published" field.
func (fiu *FeedItemUpdate) SetPublished(s string) *FeedItemUpdate {
	fiu.mutation.SetPublished(s)
	return fiu
}

// SetPublishedParsed sets the "published_parsed" field.
func (fiu *FeedItemUpdate) SetPublishedParsed(t time.Time) *FeedItemUpdate {
	fiu.mutation.SetPublishedParsed(t)
	return fiu
}

// SetUpdated sets the "updated" field.
func (fiu *FeedItemUpdate) SetUpdated(s string) *FeedItemUpdate {
	fiu.mutation.SetUpdated(s)
	return fiu
}

// SetUpdatedParsed sets the "updated_parsed" field.
func (fiu *FeedItemUpdate) SetUpdatedParsed(t time.Time) *FeedItemUpdate {
	fiu.mutation.SetUpdatedParsed(t)
	return fiu
}

// SetEnclosure sets the "enclosure" field.
func (fiu *FeedItemUpdate) SetEnclosure(s []schema.Enclosure) *FeedItemUpdate {
	fiu.mutation.SetEnclosure(s)
	return fiu
}

// AppendEnclosure appends s to the "enclosure" field.
func (fiu *FeedItemUpdate) AppendEnclosure(s []schema.Enclosure) *FeedItemUpdate {
	fiu.mutation.AppendEnclosure(s)
	return fiu
}

// SetUpdatedAt sets the "updated_at" field.
func (fiu *FeedItemUpdate) SetUpdatedAt(t time.Time) *FeedItemUpdate {
	fiu.mutation.SetUpdatedAt(t)
	return fiu
}

// SetCreatedAt sets the "created_at" field.
func (fiu *FeedItemUpdate) SetCreatedAt(t time.Time) *FeedItemUpdate {
	fiu.mutation.SetCreatedAt(t)
	return fiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fiu *FeedItemUpdate) SetNillableCreatedAt(t *time.Time) *FeedItemUpdate {
	if t != nil {
		fiu.SetCreatedAt(*t)
	}
	return fiu
}

// Mutation returns the FeedItemMutation object of the builder.
func (fiu *FeedItemUpdate) Mutation() *FeedItemMutation {
	return fiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FeedItemUpdate) Save(ctx context.Context) (int, error) {
	fiu.defaults()
	return withHooks[int, FeedItemMutation](ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FeedItemUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FeedItemUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FeedItemUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiu *FeedItemUpdate) defaults() {
	if _, ok := fiu.mutation.UpdatedAt(); !ok {
		v := feeditem.UpdateDefaultUpdatedAt()
		fiu.mutation.SetUpdatedAt(v)
	}
}

func (fiu *FeedItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feeditem.Table,
			Columns: feeditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feeditem.FieldID,
			},
		},
	}
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.InternalID(); ok {
		_spec.SetField(feeditem.FieldInternalID, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.AddedInternalID(); ok {
		_spec.AddField(feeditem.FieldInternalID, field.TypeInt64, value)
	}
	if value, ok := fiu.mutation.Title(); ok {
		_spec.SetField(feeditem.FieldTitle, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Authors(); ok {
		_spec.SetField(feeditem.FieldAuthors, field.TypeJSON, value)
	}
	if value, ok := fiu.mutation.AppendedAuthors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldAuthors, value)
		})
	}
	if value, ok := fiu.mutation.Description(); ok {
		_spec.SetField(feeditem.FieldDescription, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Content(); ok {
		_spec.SetField(feeditem.FieldContent, field.TypeString, value)
	}
	if value, ok := fiu.mutation.GUID(); ok {
		_spec.SetField(feeditem.FieldGUID, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Link(); ok {
		_spec.SetField(feeditem.FieldLink, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Images(); ok {
		_spec.SetField(feeditem.FieldImages, field.TypeJSON, value)
	}
	if value, ok := fiu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldImages, value)
		})
	}
	if value, ok := fiu.mutation.Published(); ok {
		_spec.SetField(feeditem.FieldPublished, field.TypeString, value)
	}
	if value, ok := fiu.mutation.PublishedParsed(); ok {
		_spec.SetField(feeditem.FieldPublishedParsed, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.Updated(); ok {
		_spec.SetField(feeditem.FieldUpdated, field.TypeString, value)
	}
	if value, ok := fiu.mutation.UpdatedParsed(); ok {
		_spec.SetField(feeditem.FieldUpdatedParsed, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.Enclosure(); ok {
		_spec.SetField(feeditem.FieldEnclosure, field.TypeJSON, value)
	}
	if value, ok := fiu.mutation.AppendedEnclosure(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldEnclosure, value)
		})
	}
	if value, ok := fiu.mutation.UpdatedAt(); ok {
		_spec.SetField(feeditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.CreatedAt(); ok {
		_spec.SetField(feeditem.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FeedItemUpdateOne is the builder for updating a single FeedItem entity.
type FeedItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedItemMutation
}

// SetInternalID sets the "internal_id" field.
func (fiuo *FeedItemUpdateOne) SetInternalID(i int64) *FeedItemUpdateOne {
	fiuo.mutation.ResetInternalID()
	fiuo.mutation.SetInternalID(i)
	return fiuo
}

// AddInternalID adds i to the "internal_id" field.
func (fiuo *FeedItemUpdateOne) AddInternalID(i int64) *FeedItemUpdateOne {
	fiuo.mutation.AddInternalID(i)
	return fiuo
}

// SetTitle sets the "title" field.
func (fiuo *FeedItemUpdateOne) SetTitle(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetTitle(s)
	return fiuo
}

// SetAuthors sets the "authors" field.
func (fiuo *FeedItemUpdateOne) SetAuthors(s []schema.Person) *FeedItemUpdateOne {
	fiuo.mutation.SetAuthors(s)
	return fiuo
}

// AppendAuthors appends s to the "authors" field.
func (fiuo *FeedItemUpdateOne) AppendAuthors(s []schema.Person) *FeedItemUpdateOne {
	fiuo.mutation.AppendAuthors(s)
	return fiuo
}

// SetDescription sets the "description" field.
func (fiuo *FeedItemUpdateOne) SetDescription(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetDescription(s)
	return fiuo
}

// SetContent sets the "content" field.
func (fiuo *FeedItemUpdateOne) SetContent(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetContent(s)
	return fiuo
}

// SetGUID sets the "guid" field.
func (fiuo *FeedItemUpdateOne) SetGUID(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetGUID(s)
	return fiuo
}

// SetLink sets the "link" field.
func (fiuo *FeedItemUpdateOne) SetLink(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetLink(s)
	return fiuo
}

// SetImages sets the "images" field.
func (fiuo *FeedItemUpdateOne) SetImages(s []schema.Image) *FeedItemUpdateOne {
	fiuo.mutation.SetImages(s)
	return fiuo
}

// AppendImages appends s to the "images" field.
func (fiuo *FeedItemUpdateOne) AppendImages(s []schema.Image) *FeedItemUpdateOne {
	fiuo.mutation.AppendImages(s)
	return fiuo
}

// SetPublished sets the "published" field.
func (fiuo *FeedItemUpdateOne) SetPublished(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetPublished(s)
	return fiuo
}

// SetPublishedParsed sets the "published_parsed" field.
func (fiuo *FeedItemUpdateOne) SetPublishedParsed(t time.Time) *FeedItemUpdateOne {
	fiuo.mutation.SetPublishedParsed(t)
	return fiuo
}

// SetUpdated sets the "updated" field.
func (fiuo *FeedItemUpdateOne) SetUpdated(s string) *FeedItemUpdateOne {
	fiuo.mutation.SetUpdated(s)
	return fiuo
}

// SetUpdatedParsed sets the "updated_parsed" field.
func (fiuo *FeedItemUpdateOne) SetUpdatedParsed(t time.Time) *FeedItemUpdateOne {
	fiuo.mutation.SetUpdatedParsed(t)
	return fiuo
}

// SetEnclosure sets the "enclosure" field.
func (fiuo *FeedItemUpdateOne) SetEnclosure(s []schema.Enclosure) *FeedItemUpdateOne {
	fiuo.mutation.SetEnclosure(s)
	return fiuo
}

// AppendEnclosure appends s to the "enclosure" field.
func (fiuo *FeedItemUpdateOne) AppendEnclosure(s []schema.Enclosure) *FeedItemUpdateOne {
	fiuo.mutation.AppendEnclosure(s)
	return fiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fiuo *FeedItemUpdateOne) SetUpdatedAt(t time.Time) *FeedItemUpdateOne {
	fiuo.mutation.SetUpdatedAt(t)
	return fiuo
}

// SetCreatedAt sets the "created_at" field.
func (fiuo *FeedItemUpdateOne) SetCreatedAt(t time.Time) *FeedItemUpdateOne {
	fiuo.mutation.SetCreatedAt(t)
	return fiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fiuo *FeedItemUpdateOne) SetNillableCreatedAt(t *time.Time) *FeedItemUpdateOne {
	if t != nil {
		fiuo.SetCreatedAt(*t)
	}
	return fiuo
}

// Mutation returns the FeedItemMutation object of the builder.
func (fiuo *FeedItemUpdateOne) Mutation() *FeedItemMutation {
	return fiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FeedItemUpdateOne) Select(field string, fields ...string) *FeedItemUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FeedItem entity.
func (fiuo *FeedItemUpdateOne) Save(ctx context.Context) (*FeedItem, error) {
	fiuo.defaults()
	return withHooks[*FeedItem, FeedItemMutation](ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FeedItemUpdateOne) SaveX(ctx context.Context) *FeedItem {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FeedItemUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FeedItemUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiuo *FeedItemUpdateOne) defaults() {
	if _, ok := fiuo.mutation.UpdatedAt(); !ok {
		v := feeditem.UpdateDefaultUpdatedAt()
		fiuo.mutation.SetUpdatedAt(v)
	}
}

func (fiuo *FeedItemUpdateOne) sqlSave(ctx context.Context) (_node *FeedItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feeditem.Table,
			Columns: feeditem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feeditem.FieldID,
			},
		},
	}
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeedItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feeditem.FieldID)
		for _, f := range fields {
			if !feeditem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feeditem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.InternalID(); ok {
		_spec.SetField(feeditem.FieldInternalID, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.AddedInternalID(); ok {
		_spec.AddField(feeditem.FieldInternalID, field.TypeInt64, value)
	}
	if value, ok := fiuo.mutation.Title(); ok {
		_spec.SetField(feeditem.FieldTitle, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Authors(); ok {
		_spec.SetField(feeditem.FieldAuthors, field.TypeJSON, value)
	}
	if value, ok := fiuo.mutation.AppendedAuthors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldAuthors, value)
		})
	}
	if value, ok := fiuo.mutation.Description(); ok {
		_spec.SetField(feeditem.FieldDescription, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Content(); ok {
		_spec.SetField(feeditem.FieldContent, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.GUID(); ok {
		_spec.SetField(feeditem.FieldGUID, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Link(); ok {
		_spec.SetField(feeditem.FieldLink, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Images(); ok {
		_spec.SetField(feeditem.FieldImages, field.TypeJSON, value)
	}
	if value, ok := fiuo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldImages, value)
		})
	}
	if value, ok := fiuo.mutation.Published(); ok {
		_spec.SetField(feeditem.FieldPublished, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.PublishedParsed(); ok {
		_spec.SetField(feeditem.FieldPublishedParsed, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.Updated(); ok {
		_spec.SetField(feeditem.FieldUpdated, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.UpdatedParsed(); ok {
		_spec.SetField(feeditem.FieldUpdatedParsed, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.Enclosure(); ok {
		_spec.SetField(feeditem.FieldEnclosure, field.TypeJSON, value)
	}
	if value, ok := fiuo.mutation.AppendedEnclosure(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feeditem.FieldEnclosure, value)
		})
	}
	if value, ok := fiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feeditem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.CreatedAt(); ok {
		_spec.SetField(feeditem.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &FeedItem{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeditem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
