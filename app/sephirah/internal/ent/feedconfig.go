// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/feedconfig"
)

// FeedConfig is the model entity for the FeedConfig schema.
type FeedConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID int64 `json:"internal_id,omitempty"`
	// FeedURL holds the value of the "feed_url" field.
	FeedURL string `json:"feed_url,omitempty"`
	// AuthorAccount holds the value of the "author_account" field.
	AuthorAccount int64 `json:"author_account,omitempty"`
	// Status holds the value of the "status" field.
	Status feedconfig.Status `json:"status,omitempty"`
	// PullInterval holds the value of the "pull_interval" field.
	PullInterval time.Time `json:"pull_interval,omitempty"`
	// LastPullAt holds the value of the "last_pull_at" field.
	LastPullAt time.Time `json:"last_pull_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeedConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedconfig.FieldID, feedconfig.FieldInternalID, feedconfig.FieldAuthorAccount:
			values[i] = new(sql.NullInt64)
		case feedconfig.FieldFeedURL, feedconfig.FieldStatus:
			values[i] = new(sql.NullString)
		case feedconfig.FieldPullInterval, feedconfig.FieldLastPullAt, feedconfig.FieldUpdatedAt, feedconfig.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FeedConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeedConfig fields.
func (fc *FeedConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fc.ID = int(value.Int64)
		case feedconfig.FieldInternalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				fc.InternalID = value.Int64
			}
		case feedconfig.FieldFeedURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feed_url", values[i])
			} else if value.Valid {
				fc.FeedURL = value.String
			}
		case feedconfig.FieldAuthorAccount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_account", values[i])
			} else if value.Valid {
				fc.AuthorAccount = value.Int64
			}
		case feedconfig.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fc.Status = feedconfig.Status(value.String)
			}
		case feedconfig.FieldPullInterval:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pull_interval", values[i])
			} else if value.Valid {
				fc.PullInterval = value.Time
			}
		case feedconfig.FieldLastPullAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_pull_at", values[i])
			} else if value.Valid {
				fc.LastPullAt = value.Time
			}
		case feedconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fc.UpdatedAt = value.Time
			}
		case feedconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fc.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FeedConfig.
// Note that you need to call FeedConfig.Unwrap() before calling this method if this FeedConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (fc *FeedConfig) Update() *FeedConfigUpdateOne {
	return NewFeedConfigClient(fc.config).UpdateOne(fc)
}

// Unwrap unwraps the FeedConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fc *FeedConfig) Unwrap() *FeedConfig {
	_tx, ok := fc.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeedConfig is not a transactional entity")
	}
	fc.config.driver = _tx.drv
	return fc
}

// String implements the fmt.Stringer.
func (fc *FeedConfig) String() string {
	var builder strings.Builder
	builder.WriteString("FeedConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fc.ID))
	builder.WriteString("internal_id=")
	builder.WriteString(fmt.Sprintf("%v", fc.InternalID))
	builder.WriteString(", ")
	builder.WriteString("feed_url=")
	builder.WriteString(fc.FeedURL)
	builder.WriteString(", ")
	builder.WriteString("author_account=")
	builder.WriteString(fmt.Sprintf("%v", fc.AuthorAccount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", fc.Status))
	builder.WriteString(", ")
	builder.WriteString("pull_interval=")
	builder.WriteString(fc.PullInterval.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_pull_at=")
	builder.WriteString(fc.LastPullAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FeedConfigs is a parsable slice of FeedConfig.
type FeedConfigs []*FeedConfig
