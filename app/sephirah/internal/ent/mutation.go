// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/tuihub/librarian/app/sephirah/internal/ent/account"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/app"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/apppackage"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/feed"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/feedconfig"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/feeditem"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/predicate"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/schema"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount    = "Account"
	TypeApp        = "App"
	TypeAppPackage = "AppPackage"
	TypeFeed       = "Feed"
	TypeFeedConfig = "FeedConfig"
	TypeFeedItem   = "FeedItem"
	TypeUser       = "User"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	internal_id         *int64
	addinternal_id      *int64
	platform            *account.Platform
	platform_account_id *string
	name                *string
	profile_url         *string
	avatar_url          *string
	updated_at          *time.Time
	created_at          *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Account, error)
	predicates          []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id int) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInternalID sets the "internal_id" field.
func (m *AccountMutation) SetInternalID(i int64) {
	m.internal_id = &i
	m.addinternal_id = nil
}

// InternalID returns the value of the "internal_id" field in the mutation.
func (m *AccountMutation) InternalID() (r int64, exists bool) {
	v := m.internal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalID returns the old "internal_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldInternalID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalID: %w", err)
	}
	return oldValue.InternalID, nil
}

// AddInternalID adds i to the "internal_id" field.
func (m *AccountMutation) AddInternalID(i int64) {
	if m.addinternal_id != nil {
		*m.addinternal_id += i
	} else {
		m.addinternal_id = &i
	}
}

// AddedInternalID returns the value that was added to the "internal_id" field in this mutation.
func (m *AccountMutation) AddedInternalID() (r int64, exists bool) {
	v := m.addinternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInternalID resets all changes to the "internal_id" field.
func (m *AccountMutation) ResetInternalID() {
	m.internal_id = nil
	m.addinternal_id = nil
}

// SetPlatform sets the "platform" field.
func (m *AccountMutation) SetPlatform(a account.Platform) {
	m.platform = &a
}

// Platform returns the value of the "platform" field in the mutation.
func (m *AccountMutation) Platform() (r account.Platform, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPlatform(ctx context.Context) (v account.Platform, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *AccountMutation) ResetPlatform() {
	m.platform = nil
}

// SetPlatformAccountID sets the "platform_account_id" field.
func (m *AccountMutation) SetPlatformAccountID(s string) {
	m.platform_account_id = &s
}

// PlatformAccountID returns the value of the "platform_account_id" field in the mutation.
func (m *AccountMutation) PlatformAccountID() (r string, exists bool) {
	v := m.platform_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformAccountID returns the old "platform_account_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPlatformAccountID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformAccountID: %w", err)
	}
	return oldValue.PlatformAccountID, nil
}

// ResetPlatformAccountID resets all changes to the "platform_account_id" field.
func (m *AccountMutation) ResetPlatformAccountID() {
	m.platform_account_id = nil
}

// SetName sets the "name" field.
func (m *AccountMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AccountMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AccountMutation) ResetName() {
	m.name = nil
}

// SetProfileURL sets the "profile_url" field.
func (m *AccountMutation) SetProfileURL(s string) {
	m.profile_url = &s
}

// ProfileURL returns the value of the "profile_url" field in the mutation.
func (m *AccountMutation) ProfileURL() (r string, exists bool) {
	v := m.profile_url
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileURL returns the old "profile_url" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldProfileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileURL: %w", err)
	}
	return oldValue.ProfileURL, nil
}

// ResetProfileURL resets all changes to the "profile_url" field.
func (m *AccountMutation) ResetProfileURL() {
	m.profile_url = nil
}

// SetAvatarURL sets the "avatar_url" field.
func (m *AccountMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *AccountMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *AccountMutation) ResetAvatarURL() {
	m.avatar_url = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Account, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.internal_id != nil {
		fields = append(fields, account.FieldInternalID)
	}
	if m.platform != nil {
		fields = append(fields, account.FieldPlatform)
	}
	if m.platform_account_id != nil {
		fields = append(fields, account.FieldPlatformAccountID)
	}
	if m.name != nil {
		fields = append(fields, account.FieldName)
	}
	if m.profile_url != nil {
		fields = append(fields, account.FieldProfileURL)
	}
	if m.avatar_url != nil {
		fields = append(fields, account.FieldAvatarURL)
	}
	if m.updated_at != nil {
		fields = append(fields, account.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldInternalID:
		return m.InternalID()
	case account.FieldPlatform:
		return m.Platform()
	case account.FieldPlatformAccountID:
		return m.PlatformAccountID()
	case account.FieldName:
		return m.Name()
	case account.FieldProfileURL:
		return m.ProfileURL()
	case account.FieldAvatarURL:
		return m.AvatarURL()
	case account.FieldUpdatedAt:
		return m.UpdatedAt()
	case account.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldInternalID:
		return m.OldInternalID(ctx)
	case account.FieldPlatform:
		return m.OldPlatform(ctx)
	case account.FieldPlatformAccountID:
		return m.OldPlatformAccountID(ctx)
	case account.FieldName:
		return m.OldName(ctx)
	case account.FieldProfileURL:
		return m.OldProfileURL(ctx)
	case account.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	case account.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case account.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalID(v)
		return nil
	case account.FieldPlatform:
		v, ok := value.(account.Platform)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case account.FieldPlatformAccountID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformAccountID(v)
		return nil
	case account.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case account.FieldProfileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileURL(v)
		return nil
	case account.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	case account.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case account.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	var fields []string
	if m.addinternal_id != nil {
		fields = append(fields, account.FieldInternalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case account.FieldInternalID:
		return m.AddedInternalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case account.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInternalID(v)
		return nil
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldInternalID:
		m.ResetInternalID()
		return nil
	case account.FieldPlatform:
		m.ResetPlatform()
		return nil
	case account.FieldPlatformAccountID:
		m.ResetPlatformAccountID()
		return nil
	case account.FieldName:
		m.ResetName()
		return nil
	case account.FieldProfileURL:
		m.ResetProfileURL()
		return nil
	case account.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	case account.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case account.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Account edge %s", name)
}

// AppMutation represents an operation that mutates the App nodes in the graph.
type AppMutation struct {
	config
	op                Op
	typ               string
	id                *int
	internal_id       *int64
	addinternal_id    *int64
	source            *app.Source
	source_app_id     *string
	source_url        *string
	name              *string
	_type             *app.Type
	short_description *string
	description       *string
	image_url         *string
	release_date      *string
	developer         *string
	publisher         *string
	updated_at        *time.Time
	created_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*App, error)
	predicates        []predicate.App
}

var _ ent.Mutation = (*AppMutation)(nil)

// appOption allows management of the mutation configuration using functional options.
type appOption func(*AppMutation)

// newAppMutation creates new mutation for the App entity.
func newAppMutation(c config, op Op, opts ...appOption) *AppMutation {
	m := &AppMutation{
		config:        c,
		op:            op,
		typ:           TypeApp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppID sets the ID field of the mutation.
func withAppID(id int) appOption {
	return func(m *AppMutation) {
		var (
			err   error
			once  sync.Once
			value *App
		)
		m.oldValue = func(ctx context.Context) (*App, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().App.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApp sets the old App of the mutation.
func withApp(node *App) appOption {
	return func(m *AppMutation) {
		m.oldValue = func(context.Context) (*App, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().App.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInternalID sets the "internal_id" field.
func (m *AppMutation) SetInternalID(i int64) {
	m.internal_id = &i
	m.addinternal_id = nil
}

// InternalID returns the value of the "internal_id" field in the mutation.
func (m *AppMutation) InternalID() (r int64, exists bool) {
	v := m.internal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalID returns the old "internal_id" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldInternalID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalID: %w", err)
	}
	return oldValue.InternalID, nil
}

// AddInternalID adds i to the "internal_id" field.
func (m *AppMutation) AddInternalID(i int64) {
	if m.addinternal_id != nil {
		*m.addinternal_id += i
	} else {
		m.addinternal_id = &i
	}
}

// AddedInternalID returns the value that was added to the "internal_id" field in this mutation.
func (m *AppMutation) AddedInternalID() (r int64, exists bool) {
	v := m.addinternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInternalID resets all changes to the "internal_id" field.
func (m *AppMutation) ResetInternalID() {
	m.internal_id = nil
	m.addinternal_id = nil
}

// SetSource sets the "source" field.
func (m *AppMutation) SetSource(a app.Source) {
	m.source = &a
}

// Source returns the value of the "source" field in the mutation.
func (m *AppMutation) Source() (r app.Source, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldSource(ctx context.Context) (v app.Source, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *AppMutation) ResetSource() {
	m.source = nil
}

// SetSourceAppID sets the "source_app_id" field.
func (m *AppMutation) SetSourceAppID(s string) {
	m.source_app_id = &s
}

// SourceAppID returns the value of the "source_app_id" field in the mutation.
func (m *AppMutation) SourceAppID() (r string, exists bool) {
	v := m.source_app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceAppID returns the old "source_app_id" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldSourceAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceAppID: %w", err)
	}
	return oldValue.SourceAppID, nil
}

// ResetSourceAppID resets all changes to the "source_app_id" field.
func (m *AppMutation) ResetSourceAppID() {
	m.source_app_id = nil
}

// SetSourceURL sets the "source_url" field.
func (m *AppMutation) SetSourceURL(s string) {
	m.source_url = &s
}

// SourceURL returns the value of the "source_url" field in the mutation.
func (m *AppMutation) SourceURL() (r string, exists bool) {
	v := m.source_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceURL returns the old "source_url" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldSourceURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceURL: %w", err)
	}
	return oldValue.SourceURL, nil
}

// ResetSourceURL resets all changes to the "source_url" field.
func (m *AppMutation) ResetSourceURL() {
	m.source_url = nil
}

// SetName sets the "name" field.
func (m *AppMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AppMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AppMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *AppMutation) SetType(a app.Type) {
	m._type = &a
}

// GetType returns the value of the "type" field in the mutation.
func (m *AppMutation) GetType() (r app.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldType(ctx context.Context) (v app.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AppMutation) ResetType() {
	m._type = nil
}

// SetShortDescription sets the "short_description" field.
func (m *AppMutation) SetShortDescription(s string) {
	m.short_description = &s
}

// ShortDescription returns the value of the "short_description" field in the mutation.
func (m *AppMutation) ShortDescription() (r string, exists bool) {
	v := m.short_description
	if v == nil {
		return
	}
	return *v, true
}

// OldShortDescription returns the old "short_description" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldShortDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortDescription: %w", err)
	}
	return oldValue.ShortDescription, nil
}

// ResetShortDescription resets all changes to the "short_description" field.
func (m *AppMutation) ResetShortDescription() {
	m.short_description = nil
}

// SetDescription sets the "description" field.
func (m *AppMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AppMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *AppMutation) ResetDescription() {
	m.description = nil
}

// SetImageURL sets the "image_url" field.
func (m *AppMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *AppMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *AppMutation) ResetImageURL() {
	m.image_url = nil
}

// SetReleaseDate sets the "release_date" field.
func (m *AppMutation) SetReleaseDate(s string) {
	m.release_date = &s
}

// ReleaseDate returns the value of the "release_date" field in the mutation.
func (m *AppMutation) ReleaseDate() (r string, exists bool) {
	v := m.release_date
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseDate returns the old "release_date" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldReleaseDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseDate: %w", err)
	}
	return oldValue.ReleaseDate, nil
}

// ResetReleaseDate resets all changes to the "release_date" field.
func (m *AppMutation) ResetReleaseDate() {
	m.release_date = nil
}

// SetDeveloper sets the "developer" field.
func (m *AppMutation) SetDeveloper(s string) {
	m.developer = &s
}

// Developer returns the value of the "developer" field in the mutation.
func (m *AppMutation) Developer() (r string, exists bool) {
	v := m.developer
	if v == nil {
		return
	}
	return *v, true
}

// OldDeveloper returns the old "developer" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldDeveloper(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeveloper is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeveloper requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeveloper: %w", err)
	}
	return oldValue.Developer, nil
}

// ResetDeveloper resets all changes to the "developer" field.
func (m *AppMutation) ResetDeveloper() {
	m.developer = nil
}

// SetPublisher sets the "publisher" field.
func (m *AppMutation) SetPublisher(s string) {
	m.publisher = &s
}

// Publisher returns the value of the "publisher" field in the mutation.
func (m *AppMutation) Publisher() (r string, exists bool) {
	v := m.publisher
	if v == nil {
		return
	}
	return *v, true
}

// OldPublisher returns the old "publisher" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldPublisher(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublisher is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublisher requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublisher: %w", err)
	}
	return oldValue.Publisher, nil
}

// ResetPublisher resets all changes to the "publisher" field.
func (m *AppMutation) ResetPublisher() {
	m.publisher = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AppMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the App entity.
// If the App object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the AppMutation builder.
func (m *AppMutation) Where(ps ...predicate.App) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AppMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AppMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.App, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AppMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AppMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (App).
func (m *AppMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.internal_id != nil {
		fields = append(fields, app.FieldInternalID)
	}
	if m.source != nil {
		fields = append(fields, app.FieldSource)
	}
	if m.source_app_id != nil {
		fields = append(fields, app.FieldSourceAppID)
	}
	if m.source_url != nil {
		fields = append(fields, app.FieldSourceURL)
	}
	if m.name != nil {
		fields = append(fields, app.FieldName)
	}
	if m._type != nil {
		fields = append(fields, app.FieldType)
	}
	if m.short_description != nil {
		fields = append(fields, app.FieldShortDescription)
	}
	if m.description != nil {
		fields = append(fields, app.FieldDescription)
	}
	if m.image_url != nil {
		fields = append(fields, app.FieldImageURL)
	}
	if m.release_date != nil {
		fields = append(fields, app.FieldReleaseDate)
	}
	if m.developer != nil {
		fields = append(fields, app.FieldDeveloper)
	}
	if m.publisher != nil {
		fields = append(fields, app.FieldPublisher)
	}
	if m.updated_at != nil {
		fields = append(fields, app.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, app.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case app.FieldInternalID:
		return m.InternalID()
	case app.FieldSource:
		return m.Source()
	case app.FieldSourceAppID:
		return m.SourceAppID()
	case app.FieldSourceURL:
		return m.SourceURL()
	case app.FieldName:
		return m.Name()
	case app.FieldType:
		return m.GetType()
	case app.FieldShortDescription:
		return m.ShortDescription()
	case app.FieldDescription:
		return m.Description()
	case app.FieldImageURL:
		return m.ImageURL()
	case app.FieldReleaseDate:
		return m.ReleaseDate()
	case app.FieldDeveloper:
		return m.Developer()
	case app.FieldPublisher:
		return m.Publisher()
	case app.FieldUpdatedAt:
		return m.UpdatedAt()
	case app.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case app.FieldInternalID:
		return m.OldInternalID(ctx)
	case app.FieldSource:
		return m.OldSource(ctx)
	case app.FieldSourceAppID:
		return m.OldSourceAppID(ctx)
	case app.FieldSourceURL:
		return m.OldSourceURL(ctx)
	case app.FieldName:
		return m.OldName(ctx)
	case app.FieldType:
		return m.OldType(ctx)
	case app.FieldShortDescription:
		return m.OldShortDescription(ctx)
	case app.FieldDescription:
		return m.OldDescription(ctx)
	case app.FieldImageURL:
		return m.OldImageURL(ctx)
	case app.FieldReleaseDate:
		return m.OldReleaseDate(ctx)
	case app.FieldDeveloper:
		return m.OldDeveloper(ctx)
	case app.FieldPublisher:
		return m.OldPublisher(ctx)
	case app.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case app.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown App field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppMutation) SetField(name string, value ent.Value) error {
	switch name {
	case app.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalID(v)
		return nil
	case app.FieldSource:
		v, ok := value.(app.Source)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case app.FieldSourceAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceAppID(v)
		return nil
	case app.FieldSourceURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceURL(v)
		return nil
	case app.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case app.FieldType:
		v, ok := value.(app.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case app.FieldShortDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortDescription(v)
		return nil
	case app.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case app.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case app.FieldReleaseDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseDate(v)
		return nil
	case app.FieldDeveloper:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeveloper(v)
		return nil
	case app.FieldPublisher:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublisher(v)
		return nil
	case app.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case app.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown App field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppMutation) AddedFields() []string {
	var fields []string
	if m.addinternal_id != nil {
		fields = append(fields, app.FieldInternalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case app.FieldInternalID:
		return m.AddedInternalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppMutation) AddField(name string, value ent.Value) error {
	switch name {
	case app.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInternalID(v)
		return nil
	}
	return fmt.Errorf("unknown App numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppMutation) ClearField(name string) error {
	return fmt.Errorf("unknown App nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppMutation) ResetField(name string) error {
	switch name {
	case app.FieldInternalID:
		m.ResetInternalID()
		return nil
	case app.FieldSource:
		m.ResetSource()
		return nil
	case app.FieldSourceAppID:
		m.ResetSourceAppID()
		return nil
	case app.FieldSourceURL:
		m.ResetSourceURL()
		return nil
	case app.FieldName:
		m.ResetName()
		return nil
	case app.FieldType:
		m.ResetType()
		return nil
	case app.FieldShortDescription:
		m.ResetShortDescription()
		return nil
	case app.FieldDescription:
		m.ResetDescription()
		return nil
	case app.FieldImageURL:
		m.ResetImageURL()
		return nil
	case app.FieldReleaseDate:
		m.ResetReleaseDate()
		return nil
	case app.FieldDeveloper:
		m.ResetDeveloper()
		return nil
	case app.FieldPublisher:
		m.ResetPublisher()
		return nil
	case app.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case app.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown App field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown App unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown App edge %s", name)
}

// AppPackageMutation represents an operation that mutates the AppPackage nodes in the graph.
type AppPackageMutation struct {
	config
	op                Op
	typ               string
	id                *int
	internal_id       *int64
	addinternal_id    *int64
	source            *apppackage.Source
	source_id         *int64
	addsource_id      *int64
	source_package_id *string
	name              *string
	description       *string
	binary_name       *string
	binary_size       *string
	updated_at        *time.Time
	created_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*AppPackage, error)
	predicates        []predicate.AppPackage
}

var _ ent.Mutation = (*AppPackageMutation)(nil)

// apppackageOption allows management of the mutation configuration using functional options.
type apppackageOption func(*AppPackageMutation)

// newAppPackageMutation creates new mutation for the AppPackage entity.
func newAppPackageMutation(c config, op Op, opts ...apppackageOption) *AppPackageMutation {
	m := &AppPackageMutation{
		config:        c,
		op:            op,
		typ:           TypeAppPackage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppPackageID sets the ID field of the mutation.
func withAppPackageID(id int) apppackageOption {
	return func(m *AppPackageMutation) {
		var (
			err   error
			once  sync.Once
			value *AppPackage
		)
		m.oldValue = func(ctx context.Context) (*AppPackage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppPackage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppPackage sets the old AppPackage of the mutation.
func withAppPackage(node *AppPackage) apppackageOption {
	return func(m *AppPackageMutation) {
		m.oldValue = func(context.Context) (*AppPackage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppPackageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppPackageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppPackageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppPackageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppPackage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInternalID sets the "internal_id" field.
func (m *AppPackageMutation) SetInternalID(i int64) {
	m.internal_id = &i
	m.addinternal_id = nil
}

// InternalID returns the value of the "internal_id" field in the mutation.
func (m *AppPackageMutation) InternalID() (r int64, exists bool) {
	v := m.internal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalID returns the old "internal_id" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldInternalID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalID: %w", err)
	}
	return oldValue.InternalID, nil
}

// AddInternalID adds i to the "internal_id" field.
func (m *AppPackageMutation) AddInternalID(i int64) {
	if m.addinternal_id != nil {
		*m.addinternal_id += i
	} else {
		m.addinternal_id = &i
	}
}

// AddedInternalID returns the value that was added to the "internal_id" field in this mutation.
func (m *AppPackageMutation) AddedInternalID() (r int64, exists bool) {
	v := m.addinternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInternalID resets all changes to the "internal_id" field.
func (m *AppPackageMutation) ResetInternalID() {
	m.internal_id = nil
	m.addinternal_id = nil
}

// SetSource sets the "source" field.
func (m *AppPackageMutation) SetSource(a apppackage.Source) {
	m.source = &a
}

// Source returns the value of the "source" field in the mutation.
func (m *AppPackageMutation) Source() (r apppackage.Source, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSource returns the old "source" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldSource(ctx context.Context) (v apppackage.Source, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSource: %w", err)
	}
	return oldValue.Source, nil
}

// ResetSource resets all changes to the "source" field.
func (m *AppPackageMutation) ResetSource() {
	m.source = nil
}

// SetSourceID sets the "source_id" field.
func (m *AppPackageMutation) SetSourceID(i int64) {
	m.source_id = &i
	m.addsource_id = nil
}

// SourceID returns the value of the "source_id" field in the mutation.
func (m *AppPackageMutation) SourceID() (r int64, exists bool) {
	v := m.source_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceID returns the old "source_id" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldSourceID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceID: %w", err)
	}
	return oldValue.SourceID, nil
}

// AddSourceID adds i to the "source_id" field.
func (m *AppPackageMutation) AddSourceID(i int64) {
	if m.addsource_id != nil {
		*m.addsource_id += i
	} else {
		m.addsource_id = &i
	}
}

// AddedSourceID returns the value that was added to the "source_id" field in this mutation.
func (m *AppPackageMutation) AddedSourceID() (r int64, exists bool) {
	v := m.addsource_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSourceID resets all changes to the "source_id" field.
func (m *AppPackageMutation) ResetSourceID() {
	m.source_id = nil
	m.addsource_id = nil
}

// SetSourcePackageID sets the "source_package_id" field.
func (m *AppPackageMutation) SetSourcePackageID(s string) {
	m.source_package_id = &s
}

// SourcePackageID returns the value of the "source_package_id" field in the mutation.
func (m *AppPackageMutation) SourcePackageID() (r string, exists bool) {
	v := m.source_package_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSourcePackageID returns the old "source_package_id" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldSourcePackageID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourcePackageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourcePackageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourcePackageID: %w", err)
	}
	return oldValue.SourcePackageID, nil
}

// ResetSourcePackageID resets all changes to the "source_package_id" field.
func (m *AppPackageMutation) ResetSourcePackageID() {
	m.source_package_id = nil
}

// SetName sets the "name" field.
func (m *AppPackageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AppPackageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AppPackageMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *AppPackageMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AppPackageMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *AppPackageMutation) ResetDescription() {
	m.description = nil
}

// SetBinaryName sets the "binary_name" field.
func (m *AppPackageMutation) SetBinaryName(s string) {
	m.binary_name = &s
}

// BinaryName returns the value of the "binary_name" field in the mutation.
func (m *AppPackageMutation) BinaryName() (r string, exists bool) {
	v := m.binary_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBinaryName returns the old "binary_name" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldBinaryName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBinaryName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBinaryName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBinaryName: %w", err)
	}
	return oldValue.BinaryName, nil
}

// ResetBinaryName resets all changes to the "binary_name" field.
func (m *AppPackageMutation) ResetBinaryName() {
	m.binary_name = nil
}

// SetBinarySize sets the "binary_size" field.
func (m *AppPackageMutation) SetBinarySize(s string) {
	m.binary_size = &s
}

// BinarySize returns the value of the "binary_size" field in the mutation.
func (m *AppPackageMutation) BinarySize() (r string, exists bool) {
	v := m.binary_size
	if v == nil {
		return
	}
	return *v, true
}

// OldBinarySize returns the old "binary_size" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldBinarySize(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBinarySize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBinarySize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBinarySize: %w", err)
	}
	return oldValue.BinarySize, nil
}

// ResetBinarySize resets all changes to the "binary_size" field.
func (m *AppPackageMutation) ResetBinarySize() {
	m.binary_size = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppPackageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppPackageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppPackageMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AppPackageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppPackageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppPackage entity.
// If the AppPackage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppPackageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppPackageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the AppPackageMutation builder.
func (m *AppPackageMutation) Where(ps ...predicate.AppPackage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AppPackageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AppPackageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AppPackage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AppPackageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AppPackageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AppPackage).
func (m *AppPackageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppPackageMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.internal_id != nil {
		fields = append(fields, apppackage.FieldInternalID)
	}
	if m.source != nil {
		fields = append(fields, apppackage.FieldSource)
	}
	if m.source_id != nil {
		fields = append(fields, apppackage.FieldSourceID)
	}
	if m.source_package_id != nil {
		fields = append(fields, apppackage.FieldSourcePackageID)
	}
	if m.name != nil {
		fields = append(fields, apppackage.FieldName)
	}
	if m.description != nil {
		fields = append(fields, apppackage.FieldDescription)
	}
	if m.binary_name != nil {
		fields = append(fields, apppackage.FieldBinaryName)
	}
	if m.binary_size != nil {
		fields = append(fields, apppackage.FieldBinarySize)
	}
	if m.updated_at != nil {
		fields = append(fields, apppackage.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, apppackage.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppPackageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apppackage.FieldInternalID:
		return m.InternalID()
	case apppackage.FieldSource:
		return m.Source()
	case apppackage.FieldSourceID:
		return m.SourceID()
	case apppackage.FieldSourcePackageID:
		return m.SourcePackageID()
	case apppackage.FieldName:
		return m.Name()
	case apppackage.FieldDescription:
		return m.Description()
	case apppackage.FieldBinaryName:
		return m.BinaryName()
	case apppackage.FieldBinarySize:
		return m.BinarySize()
	case apppackage.FieldUpdatedAt:
		return m.UpdatedAt()
	case apppackage.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppPackageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apppackage.FieldInternalID:
		return m.OldInternalID(ctx)
	case apppackage.FieldSource:
		return m.OldSource(ctx)
	case apppackage.FieldSourceID:
		return m.OldSourceID(ctx)
	case apppackage.FieldSourcePackageID:
		return m.OldSourcePackageID(ctx)
	case apppackage.FieldName:
		return m.OldName(ctx)
	case apppackage.FieldDescription:
		return m.OldDescription(ctx)
	case apppackage.FieldBinaryName:
		return m.OldBinaryName(ctx)
	case apppackage.FieldBinarySize:
		return m.OldBinarySize(ctx)
	case apppackage.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case apppackage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppPackage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppPackageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apppackage.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalID(v)
		return nil
	case apppackage.FieldSource:
		v, ok := value.(apppackage.Source)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case apppackage.FieldSourceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceID(v)
		return nil
	case apppackage.FieldSourcePackageID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourcePackageID(v)
		return nil
	case apppackage.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case apppackage.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case apppackage.FieldBinaryName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBinaryName(v)
		return nil
	case apppackage.FieldBinarySize:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBinarySize(v)
		return nil
	case apppackage.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case apppackage.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppPackage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppPackageMutation) AddedFields() []string {
	var fields []string
	if m.addinternal_id != nil {
		fields = append(fields, apppackage.FieldInternalID)
	}
	if m.addsource_id != nil {
		fields = append(fields, apppackage.FieldSourceID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppPackageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case apppackage.FieldInternalID:
		return m.AddedInternalID()
	case apppackage.FieldSourceID:
		return m.AddedSourceID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppPackageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case apppackage.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInternalID(v)
		return nil
	case apppackage.FieldSourceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSourceID(v)
		return nil
	}
	return fmt.Errorf("unknown AppPackage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppPackageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppPackageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppPackageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppPackage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppPackageMutation) ResetField(name string) error {
	switch name {
	case apppackage.FieldInternalID:
		m.ResetInternalID()
		return nil
	case apppackage.FieldSource:
		m.ResetSource()
		return nil
	case apppackage.FieldSourceID:
		m.ResetSourceID()
		return nil
	case apppackage.FieldSourcePackageID:
		m.ResetSourcePackageID()
		return nil
	case apppackage.FieldName:
		m.ResetName()
		return nil
	case apppackage.FieldDescription:
		m.ResetDescription()
		return nil
	case apppackage.FieldBinaryName:
		m.ResetBinaryName()
		return nil
	case apppackage.FieldBinarySize:
		m.ResetBinarySize()
		return nil
	case apppackage.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case apppackage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown AppPackage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppPackageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppPackageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppPackageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppPackageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppPackageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppPackageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppPackageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppPackage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppPackageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppPackage edge %s", name)
}

// FeedMutation represents an operation that mutates the Feed nodes in the graph.
type FeedMutation struct {
	config
	op             Op
	typ            string
	id             *int
	internal_id    *int64
	addinternal_id *int64
	title          *string
	link           *string
	description    *string
	language       *string
	authors        *[]schema.Person
	appendauthors  []schema.Person
	images         *[]schema.Image
	appendimages   []schema.Image
	updated_at     *time.Time
	created_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Feed, error)
	predicates     []predicate.Feed
}

var _ ent.Mutation = (*FeedMutation)(nil)

// feedOption allows management of the mutation configuration using functional options.
type feedOption func(*FeedMutation)

// newFeedMutation creates new mutation for the Feed entity.
func newFeedMutation(c config, op Op, opts ...feedOption) *FeedMutation {
	m := &FeedMutation{
		config:        c,
		op:            op,
		typ:           TypeFeed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedID sets the ID field of the mutation.
func withFeedID(id int) feedOption {
	return func(m *FeedMutation) {
		var (
			err   error
			once  sync.Once
			value *Feed
		)
		m.oldValue = func(ctx context.Context) (*Feed, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Feed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeed sets the old Feed of the mutation.
func withFeed(node *Feed) feedOption {
	return func(m *FeedMutation) {
		m.oldValue = func(context.Context) (*Feed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Feed.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInternalID sets the "internal_id" field.
func (m *FeedMutation) SetInternalID(i int64) {
	m.internal_id = &i
	m.addinternal_id = nil
}

// InternalID returns the value of the "internal_id" field in the mutation.
func (m *FeedMutation) InternalID() (r int64, exists bool) {
	v := m.internal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalID returns the old "internal_id" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldInternalID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalID: %w", err)
	}
	return oldValue.InternalID, nil
}

// AddInternalID adds i to the "internal_id" field.
func (m *FeedMutation) AddInternalID(i int64) {
	if m.addinternal_id != nil {
		*m.addinternal_id += i
	} else {
		m.addinternal_id = &i
	}
}

// AddedInternalID returns the value that was added to the "internal_id" field in this mutation.
func (m *FeedMutation) AddedInternalID() (r int64, exists bool) {
	v := m.addinternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInternalID resets all changes to the "internal_id" field.
func (m *FeedMutation) ResetInternalID() {
	m.internal_id = nil
	m.addinternal_id = nil
}

// SetTitle sets the "title" field.
func (m *FeedMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FeedMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FeedMutation) ResetTitle() {
	m.title = nil
}

// SetLink sets the "link" field.
func (m *FeedMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *FeedMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *FeedMutation) ResetLink() {
	m.link = nil
}

// SetDescription sets the "description" field.
func (m *FeedMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FeedMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FeedMutation) ResetDescription() {
	m.description = nil
}

// SetLanguage sets the "language" field.
func (m *FeedMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *FeedMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *FeedMutation) ResetLanguage() {
	m.language = nil
}

// SetAuthors sets the "authors" field.
func (m *FeedMutation) SetAuthors(s []schema.Person) {
	m.authors = &s
	m.appendauthors = nil
}

// Authors returns the value of the "authors" field in the mutation.
func (m *FeedMutation) Authors() (r []schema.Person, exists bool) {
	v := m.authors
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthors returns the old "authors" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldAuthors(ctx context.Context) (v []schema.Person, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthors: %w", err)
	}
	return oldValue.Authors, nil
}

// AppendAuthors adds s to the "authors" field.
func (m *FeedMutation) AppendAuthors(s []schema.Person) {
	m.appendauthors = append(m.appendauthors, s...)
}

// AppendedAuthors returns the list of values that were appended to the "authors" field in this mutation.
func (m *FeedMutation) AppendedAuthors() ([]schema.Person, bool) {
	if len(m.appendauthors) == 0 {
		return nil, false
	}
	return m.appendauthors, true
}

// ResetAuthors resets all changes to the "authors" field.
func (m *FeedMutation) ResetAuthors() {
	m.authors = nil
	m.appendauthors = nil
}

// SetImages sets the "images" field.
func (m *FeedMutation) SetImages(s []schema.Image) {
	m.images = &s
	m.appendimages = nil
}

// Images returns the value of the "images" field in the mutation.
func (m *FeedMutation) Images() (r []schema.Image, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old "images" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldImages(ctx context.Context) (v []schema.Image, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// AppendImages adds s to the "images" field.
func (m *FeedMutation) AppendImages(s []schema.Image) {
	m.appendimages = append(m.appendimages, s...)
}

// AppendedImages returns the list of values that were appended to the "images" field in this mutation.
func (m *FeedMutation) AppendedImages() ([]schema.Image, bool) {
	if len(m.appendimages) == 0 {
		return nil, false
	}
	return m.appendimages, true
}

// ResetImages resets all changes to the "images" field.
func (m *FeedMutation) ResetImages() {
	m.images = nil
	m.appendimages = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FeedMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FeedMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FeedMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FeedMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeedMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Feed entity.
// If the Feed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeedMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the FeedMutation builder.
func (m *FeedMutation) Where(ps ...predicate.Feed) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Feed, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Feed).
func (m *FeedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.internal_id != nil {
		fields = append(fields, feed.FieldInternalID)
	}
	if m.title != nil {
		fields = append(fields, feed.FieldTitle)
	}
	if m.link != nil {
		fields = append(fields, feed.FieldLink)
	}
	if m.description != nil {
		fields = append(fields, feed.FieldDescription)
	}
	if m.language != nil {
		fields = append(fields, feed.FieldLanguage)
	}
	if m.authors != nil {
		fields = append(fields, feed.FieldAuthors)
	}
	if m.images != nil {
		fields = append(fields, feed.FieldImages)
	}
	if m.updated_at != nil {
		fields = append(fields, feed.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, feed.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feed.FieldInternalID:
		return m.InternalID()
	case feed.FieldTitle:
		return m.Title()
	case feed.FieldLink:
		return m.Link()
	case feed.FieldDescription:
		return m.Description()
	case feed.FieldLanguage:
		return m.Language()
	case feed.FieldAuthors:
		return m.Authors()
	case feed.FieldImages:
		return m.Images()
	case feed.FieldUpdatedAt:
		return m.UpdatedAt()
	case feed.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feed.FieldInternalID:
		return m.OldInternalID(ctx)
	case feed.FieldTitle:
		return m.OldTitle(ctx)
	case feed.FieldLink:
		return m.OldLink(ctx)
	case feed.FieldDescription:
		return m.OldDescription(ctx)
	case feed.FieldLanguage:
		return m.OldLanguage(ctx)
	case feed.FieldAuthors:
		return m.OldAuthors(ctx)
	case feed.FieldImages:
		return m.OldImages(ctx)
	case feed.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case feed.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Feed field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feed.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalID(v)
		return nil
	case feed.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case feed.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case feed.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case feed.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case feed.FieldAuthors:
		v, ok := value.([]schema.Person)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthors(v)
		return nil
	case feed.FieldImages:
		v, ok := value.([]schema.Image)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	case feed.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case feed.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Feed field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedMutation) AddedFields() []string {
	var fields []string
	if m.addinternal_id != nil {
		fields = append(fields, feed.FieldInternalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case feed.FieldInternalID:
		return m.AddedInternalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedMutation) AddField(name string, value ent.Value) error {
	switch name {
	case feed.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInternalID(v)
		return nil
	}
	return fmt.Errorf("unknown Feed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Feed nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedMutation) ResetField(name string) error {
	switch name {
	case feed.FieldInternalID:
		m.ResetInternalID()
		return nil
	case feed.FieldTitle:
		m.ResetTitle()
		return nil
	case feed.FieldLink:
		m.ResetLink()
		return nil
	case feed.FieldDescription:
		m.ResetDescription()
		return nil
	case feed.FieldLanguage:
		m.ResetLanguage()
		return nil
	case feed.FieldAuthors:
		m.ResetAuthors()
		return nil
	case feed.FieldImages:
		m.ResetImages()
		return nil
	case feed.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case feed.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Feed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Feed unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Feed edge %s", name)
}

// FeedConfigMutation represents an operation that mutates the FeedConfig nodes in the graph.
type FeedConfigMutation struct {
	config
	op                Op
	typ               string
	id                *int
	internal_id       *int64
	addinternal_id    *int64
	feed_url          *string
	author_account    *int64
	addauthor_account *int64
	status            *feedconfig.Status
	pull_interval     *time.Time
	last_pull_at      *time.Time
	updated_at        *time.Time
	created_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*FeedConfig, error)
	predicates        []predicate.FeedConfig
}

var _ ent.Mutation = (*FeedConfigMutation)(nil)

// feedconfigOption allows management of the mutation configuration using functional options.
type feedconfigOption func(*FeedConfigMutation)

// newFeedConfigMutation creates new mutation for the FeedConfig entity.
func newFeedConfigMutation(c config, op Op, opts ...feedconfigOption) *FeedConfigMutation {
	m := &FeedConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeFeedConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedConfigID sets the ID field of the mutation.
func withFeedConfigID(id int) feedconfigOption {
	return func(m *FeedConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *FeedConfig
		)
		m.oldValue = func(ctx context.Context) (*FeedConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FeedConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeedConfig sets the old FeedConfig of the mutation.
func withFeedConfig(node *FeedConfig) feedconfigOption {
	return func(m *FeedConfigMutation) {
		m.oldValue = func(context.Context) (*FeedConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedConfigMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FeedConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInternalID sets the "internal_id" field.
func (m *FeedConfigMutation) SetInternalID(i int64) {
	m.internal_id = &i
	m.addinternal_id = nil
}

// InternalID returns the value of the "internal_id" field in the mutation.
func (m *FeedConfigMutation) InternalID() (r int64, exists bool) {
	v := m.internal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalID returns the old "internal_id" field's value of the FeedConfig entity.
// If the FeedConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedConfigMutation) OldInternalID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalID: %w", err)
	}
	return oldValue.InternalID, nil
}

// AddInternalID adds i to the "internal_id" field.
func (m *FeedConfigMutation) AddInternalID(i int64) {
	if m.addinternal_id != nil {
		*m.addinternal_id += i
	} else {
		m.addinternal_id = &i
	}
}

// AddedInternalID returns the value that was added to the "internal_id" field in this mutation.
func (m *FeedConfigMutation) AddedInternalID() (r int64, exists bool) {
	v := m.addinternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInternalID resets all changes to the "internal_id" field.
func (m *FeedConfigMutation) ResetInternalID() {
	m.internal_id = nil
	m.addinternal_id = nil
}

// SetFeedURL sets the "feed_url" field.
func (m *FeedConfigMutation) SetFeedURL(s string) {
	m.feed_url = &s
}

// FeedURL returns the value of the "feed_url" field in the mutation.
func (m *FeedConfigMutation) FeedURL() (r string, exists bool) {
	v := m.feed_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedURL returns the old "feed_url" field's value of the FeedConfig entity.
// If the FeedConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedConfigMutation) OldFeedURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedURL: %w", err)
	}
	return oldValue.FeedURL, nil
}

// ResetFeedURL resets all changes to the "feed_url" field.
func (m *FeedConfigMutation) ResetFeedURL() {
	m.feed_url = nil
}

// SetAuthorAccount sets the "author_account" field.
func (m *FeedConfigMutation) SetAuthorAccount(i int64) {
	m.author_account = &i
	m.addauthor_account = nil
}

// AuthorAccount returns the value of the "author_account" field in the mutation.
func (m *FeedConfigMutation) AuthorAccount() (r int64, exists bool) {
	v := m.author_account
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorAccount returns the old "author_account" field's value of the FeedConfig entity.
// If the FeedConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedConfigMutation) OldAuthorAccount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorAccount: %w", err)
	}
	return oldValue.AuthorAccount, nil
}

// AddAuthorAccount adds i to the "author_account" field.
func (m *FeedConfigMutation) AddAuthorAccount(i int64) {
	if m.addauthor_account != nil {
		*m.addauthor_account += i
	} else {
		m.addauthor_account = &i
	}
}

// AddedAuthorAccount returns the value that was added to the "author_account" field in this mutation.
func (m *FeedConfigMutation) AddedAuthorAccount() (r int64, exists bool) {
	v := m.addauthor_account
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthorAccount resets all changes to the "author_account" field.
func (m *FeedConfigMutation) ResetAuthorAccount() {
	m.author_account = nil
	m.addauthor_account = nil
}

// SetStatus sets the "status" field.
func (m *FeedConfigMutation) SetStatus(f feedconfig.Status) {
	m.status = &f
}

// Status returns the value of the "status" field in the mutation.
func (m *FeedConfigMutation) Status() (r feedconfig.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FeedConfig entity.
// If the FeedConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedConfigMutation) OldStatus(ctx context.Context) (v feedconfig.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FeedConfigMutation) ResetStatus() {
	m.status = nil
}

// SetPullInterval sets the "pull_interval" field.
func (m *FeedConfigMutation) SetPullInterval(t time.Time) {
	m.pull_interval = &t
}

// PullInterval returns the value of the "pull_interval" field in the mutation.
func (m *FeedConfigMutation) PullInterval() (r time.Time, exists bool) {
	v := m.pull_interval
	if v == nil {
		return
	}
	return *v, true
}

// OldPullInterval returns the old "pull_interval" field's value of the FeedConfig entity.
// If the FeedConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedConfigMutation) OldPullInterval(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPullInterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPullInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPullInterval: %w", err)
	}
	return oldValue.PullInterval, nil
}

// ResetPullInterval resets all changes to the "pull_interval" field.
func (m *FeedConfigMutation) ResetPullInterval() {
	m.pull_interval = nil
}

// SetLastPullAt sets the "last_pull_at" field.
func (m *FeedConfigMutation) SetLastPullAt(t time.Time) {
	m.last_pull_at = &t
}

// LastPullAt returns the value of the "last_pull_at" field in the mutation.
func (m *FeedConfigMutation) LastPullAt() (r time.Time, exists bool) {
	v := m.last_pull_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastPullAt returns the old "last_pull_at" field's value of the FeedConfig entity.
// If the FeedConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedConfigMutation) OldLastPullAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastPullAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastPullAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastPullAt: %w", err)
	}
	return oldValue.LastPullAt, nil
}

// ResetLastPullAt resets all changes to the "last_pull_at" field.
func (m *FeedConfigMutation) ResetLastPullAt() {
	m.last_pull_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FeedConfigMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FeedConfigMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FeedConfig entity.
// If the FeedConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedConfigMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FeedConfigMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FeedConfigMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeedConfigMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FeedConfig entity.
// If the FeedConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedConfigMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeedConfigMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the FeedConfigMutation builder.
func (m *FeedConfigMutation) Where(ps ...predicate.FeedConfig) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedConfigMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedConfigMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FeedConfig, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedConfigMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedConfigMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FeedConfig).
func (m *FeedConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedConfigMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.internal_id != nil {
		fields = append(fields, feedconfig.FieldInternalID)
	}
	if m.feed_url != nil {
		fields = append(fields, feedconfig.FieldFeedURL)
	}
	if m.author_account != nil {
		fields = append(fields, feedconfig.FieldAuthorAccount)
	}
	if m.status != nil {
		fields = append(fields, feedconfig.FieldStatus)
	}
	if m.pull_interval != nil {
		fields = append(fields, feedconfig.FieldPullInterval)
	}
	if m.last_pull_at != nil {
		fields = append(fields, feedconfig.FieldLastPullAt)
	}
	if m.updated_at != nil {
		fields = append(fields, feedconfig.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, feedconfig.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feedconfig.FieldInternalID:
		return m.InternalID()
	case feedconfig.FieldFeedURL:
		return m.FeedURL()
	case feedconfig.FieldAuthorAccount:
		return m.AuthorAccount()
	case feedconfig.FieldStatus:
		return m.Status()
	case feedconfig.FieldPullInterval:
		return m.PullInterval()
	case feedconfig.FieldLastPullAt:
		return m.LastPullAt()
	case feedconfig.FieldUpdatedAt:
		return m.UpdatedAt()
	case feedconfig.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feedconfig.FieldInternalID:
		return m.OldInternalID(ctx)
	case feedconfig.FieldFeedURL:
		return m.OldFeedURL(ctx)
	case feedconfig.FieldAuthorAccount:
		return m.OldAuthorAccount(ctx)
	case feedconfig.FieldStatus:
		return m.OldStatus(ctx)
	case feedconfig.FieldPullInterval:
		return m.OldPullInterval(ctx)
	case feedconfig.FieldLastPullAt:
		return m.OldLastPullAt(ctx)
	case feedconfig.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case feedconfig.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FeedConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feedconfig.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalID(v)
		return nil
	case feedconfig.FieldFeedURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedURL(v)
		return nil
	case feedconfig.FieldAuthorAccount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorAccount(v)
		return nil
	case feedconfig.FieldStatus:
		v, ok := value.(feedconfig.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case feedconfig.FieldPullInterval:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPullInterval(v)
		return nil
	case feedconfig.FieldLastPullAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastPullAt(v)
		return nil
	case feedconfig.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case feedconfig.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FeedConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedConfigMutation) AddedFields() []string {
	var fields []string
	if m.addinternal_id != nil {
		fields = append(fields, feedconfig.FieldInternalID)
	}
	if m.addauthor_account != nil {
		fields = append(fields, feedconfig.FieldAuthorAccount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case feedconfig.FieldInternalID:
		return m.AddedInternalID()
	case feedconfig.FieldAuthorAccount:
		return m.AddedAuthorAccount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case feedconfig.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInternalID(v)
		return nil
	case feedconfig.FieldAuthorAccount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthorAccount(v)
		return nil
	}
	return fmt.Errorf("unknown FeedConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedConfigMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedConfigMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FeedConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedConfigMutation) ResetField(name string) error {
	switch name {
	case feedconfig.FieldInternalID:
		m.ResetInternalID()
		return nil
	case feedconfig.FieldFeedURL:
		m.ResetFeedURL()
		return nil
	case feedconfig.FieldAuthorAccount:
		m.ResetAuthorAccount()
		return nil
	case feedconfig.FieldStatus:
		m.ResetStatus()
		return nil
	case feedconfig.FieldPullInterval:
		m.ResetPullInterval()
		return nil
	case feedconfig.FieldLastPullAt:
		m.ResetLastPullAt()
		return nil
	case feedconfig.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case feedconfig.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown FeedConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FeedConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FeedConfig edge %s", name)
}

// FeedItemMutation represents an operation that mutates the FeedItem nodes in the graph.
type FeedItemMutation struct {
	config
	op               Op
	typ              string
	id               *int
	internal_id      *int64
	addinternal_id   *int64
	title            *string
	authors          *[]schema.Person
	appendauthors    []schema.Person
	description      *string
	content          *string
	guid             *string
	link             *string
	images           *[]schema.Image
	appendimages     []schema.Image
	published        *string
	published_parsed *time.Time
	updated          *string
	updated_parsed   *time.Time
	enclosure        *[]schema.Enclosure
	appendenclosure  []schema.Enclosure
	updated_at       *time.Time
	created_at       *time.Time
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*FeedItem, error)
	predicates       []predicate.FeedItem
}

var _ ent.Mutation = (*FeedItemMutation)(nil)

// feeditemOption allows management of the mutation configuration using functional options.
type feeditemOption func(*FeedItemMutation)

// newFeedItemMutation creates new mutation for the FeedItem entity.
func newFeedItemMutation(c config, op Op, opts ...feeditemOption) *FeedItemMutation {
	m := &FeedItemMutation{
		config:        c,
		op:            op,
		typ:           TypeFeedItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeedItemID sets the ID field of the mutation.
func withFeedItemID(id int) feeditemOption {
	return func(m *FeedItemMutation) {
		var (
			err   error
			once  sync.Once
			value *FeedItem
		)
		m.oldValue = func(ctx context.Context) (*FeedItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FeedItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeedItem sets the old FeedItem of the mutation.
func withFeedItem(node *FeedItem) feeditemOption {
	return func(m *FeedItemMutation) {
		m.oldValue = func(context.Context) (*FeedItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeedItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeedItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeedItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeedItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FeedItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInternalID sets the "internal_id" field.
func (m *FeedItemMutation) SetInternalID(i int64) {
	m.internal_id = &i
	m.addinternal_id = nil
}

// InternalID returns the value of the "internal_id" field in the mutation.
func (m *FeedItemMutation) InternalID() (r int64, exists bool) {
	v := m.internal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalID returns the old "internal_id" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldInternalID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalID: %w", err)
	}
	return oldValue.InternalID, nil
}

// AddInternalID adds i to the "internal_id" field.
func (m *FeedItemMutation) AddInternalID(i int64) {
	if m.addinternal_id != nil {
		*m.addinternal_id += i
	} else {
		m.addinternal_id = &i
	}
}

// AddedInternalID returns the value that was added to the "internal_id" field in this mutation.
func (m *FeedItemMutation) AddedInternalID() (r int64, exists bool) {
	v := m.addinternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInternalID resets all changes to the "internal_id" field.
func (m *FeedItemMutation) ResetInternalID() {
	m.internal_id = nil
	m.addinternal_id = nil
}

// SetTitle sets the "title" field.
func (m *FeedItemMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FeedItemMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *FeedItemMutation) ResetTitle() {
	m.title = nil
}

// SetAuthors sets the "authors" field.
func (m *FeedItemMutation) SetAuthors(s []schema.Person) {
	m.authors = &s
	m.appendauthors = nil
}

// Authors returns the value of the "authors" field in the mutation.
func (m *FeedItemMutation) Authors() (r []schema.Person, exists bool) {
	v := m.authors
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthors returns the old "authors" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldAuthors(ctx context.Context) (v []schema.Person, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthors: %w", err)
	}
	return oldValue.Authors, nil
}

// AppendAuthors adds s to the "authors" field.
func (m *FeedItemMutation) AppendAuthors(s []schema.Person) {
	m.appendauthors = append(m.appendauthors, s...)
}

// AppendedAuthors returns the list of values that were appended to the "authors" field in this mutation.
func (m *FeedItemMutation) AppendedAuthors() ([]schema.Person, bool) {
	if len(m.appendauthors) == 0 {
		return nil, false
	}
	return m.appendauthors, true
}

// ResetAuthors resets all changes to the "authors" field.
func (m *FeedItemMutation) ResetAuthors() {
	m.authors = nil
	m.appendauthors = nil
}

// SetDescription sets the "description" field.
func (m *FeedItemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FeedItemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FeedItemMutation) ResetDescription() {
	m.description = nil
}

// SetContent sets the "content" field.
func (m *FeedItemMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *FeedItemMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *FeedItemMutation) ResetContent() {
	m.content = nil
}

// SetGUID sets the "guid" field.
func (m *FeedItemMutation) SetGUID(s string) {
	m.guid = &s
}

// GUID returns the value of the "guid" field in the mutation.
func (m *FeedItemMutation) GUID() (r string, exists bool) {
	v := m.guid
	if v == nil {
		return
	}
	return *v, true
}

// OldGUID returns the old "guid" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldGUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGUID: %w", err)
	}
	return oldValue.GUID, nil
}

// ResetGUID resets all changes to the "guid" field.
func (m *FeedItemMutation) ResetGUID() {
	m.guid = nil
}

// SetLink sets the "link" field.
func (m *FeedItemMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *FeedItemMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *FeedItemMutation) ResetLink() {
	m.link = nil
}

// SetImages sets the "images" field.
func (m *FeedItemMutation) SetImages(s []schema.Image) {
	m.images = &s
	m.appendimages = nil
}

// Images returns the value of the "images" field in the mutation.
func (m *FeedItemMutation) Images() (r []schema.Image, exists bool) {
	v := m.images
	if v == nil {
		return
	}
	return *v, true
}

// OldImages returns the old "images" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldImages(ctx context.Context) (v []schema.Image, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImages: %w", err)
	}
	return oldValue.Images, nil
}

// AppendImages adds s to the "images" field.
func (m *FeedItemMutation) AppendImages(s []schema.Image) {
	m.appendimages = append(m.appendimages, s...)
}

// AppendedImages returns the list of values that were appended to the "images" field in this mutation.
func (m *FeedItemMutation) AppendedImages() ([]schema.Image, bool) {
	if len(m.appendimages) == 0 {
		return nil, false
	}
	return m.appendimages, true
}

// ResetImages resets all changes to the "images" field.
func (m *FeedItemMutation) ResetImages() {
	m.images = nil
	m.appendimages = nil
}

// SetPublished sets the "published" field.
func (m *FeedItemMutation) SetPublished(s string) {
	m.published = &s
}

// Published returns the value of the "published" field in the mutation.
func (m *FeedItemMutation) Published() (r string, exists bool) {
	v := m.published
	if v == nil {
		return
	}
	return *v, true
}

// OldPublished returns the old "published" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldPublished(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublished: %w", err)
	}
	return oldValue.Published, nil
}

// ResetPublished resets all changes to the "published" field.
func (m *FeedItemMutation) ResetPublished() {
	m.published = nil
}

// SetPublishedParsed sets the "published_parsed" field.
func (m *FeedItemMutation) SetPublishedParsed(t time.Time) {
	m.published_parsed = &t
}

// PublishedParsed returns the value of the "published_parsed" field in the mutation.
func (m *FeedItemMutation) PublishedParsed() (r time.Time, exists bool) {
	v := m.published_parsed
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedParsed returns the old "published_parsed" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldPublishedParsed(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedParsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedParsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedParsed: %w", err)
	}
	return oldValue.PublishedParsed, nil
}

// ResetPublishedParsed resets all changes to the "published_parsed" field.
func (m *FeedItemMutation) ResetPublishedParsed() {
	m.published_parsed = nil
}

// SetUpdated sets the "updated" field.
func (m *FeedItemMutation) SetUpdated(s string) {
	m.updated = &s
}

// Updated returns the value of the "updated" field in the mutation.
func (m *FeedItemMutation) Updated() (r string, exists bool) {
	v := m.updated
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdated returns the old "updated" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldUpdated(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdated: %w", err)
	}
	return oldValue.Updated, nil
}

// ResetUpdated resets all changes to the "updated" field.
func (m *FeedItemMutation) ResetUpdated() {
	m.updated = nil
}

// SetUpdatedParsed sets the "updated_parsed" field.
func (m *FeedItemMutation) SetUpdatedParsed(t time.Time) {
	m.updated_parsed = &t
}

// UpdatedParsed returns the value of the "updated_parsed" field in the mutation.
func (m *FeedItemMutation) UpdatedParsed() (r time.Time, exists bool) {
	v := m.updated_parsed
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedParsed returns the old "updated_parsed" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldUpdatedParsed(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedParsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedParsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedParsed: %w", err)
	}
	return oldValue.UpdatedParsed, nil
}

// ResetUpdatedParsed resets all changes to the "updated_parsed" field.
func (m *FeedItemMutation) ResetUpdatedParsed() {
	m.updated_parsed = nil
}

// SetEnclosure sets the "enclosure" field.
func (m *FeedItemMutation) SetEnclosure(s []schema.Enclosure) {
	m.enclosure = &s
	m.appendenclosure = nil
}

// Enclosure returns the value of the "enclosure" field in the mutation.
func (m *FeedItemMutation) Enclosure() (r []schema.Enclosure, exists bool) {
	v := m.enclosure
	if v == nil {
		return
	}
	return *v, true
}

// OldEnclosure returns the old "enclosure" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldEnclosure(ctx context.Context) (v []schema.Enclosure, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnclosure is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnclosure requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnclosure: %w", err)
	}
	return oldValue.Enclosure, nil
}

// AppendEnclosure adds s to the "enclosure" field.
func (m *FeedItemMutation) AppendEnclosure(s []schema.Enclosure) {
	m.appendenclosure = append(m.appendenclosure, s...)
}

// AppendedEnclosure returns the list of values that were appended to the "enclosure" field in this mutation.
func (m *FeedItemMutation) AppendedEnclosure() ([]schema.Enclosure, bool) {
	if len(m.appendenclosure) == 0 {
		return nil, false
	}
	return m.appendenclosure, true
}

// ResetEnclosure resets all changes to the "enclosure" field.
func (m *FeedItemMutation) ResetEnclosure() {
	m.enclosure = nil
	m.appendenclosure = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FeedItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FeedItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FeedItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FeedItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeedItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FeedItem entity.
// If the FeedItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeedItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeedItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the FeedItemMutation builder.
func (m *FeedItemMutation) Where(ps ...predicate.FeedItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FeedItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FeedItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FeedItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FeedItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FeedItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FeedItem).
func (m *FeedItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeedItemMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.internal_id != nil {
		fields = append(fields, feeditem.FieldInternalID)
	}
	if m.title != nil {
		fields = append(fields, feeditem.FieldTitle)
	}
	if m.authors != nil {
		fields = append(fields, feeditem.FieldAuthors)
	}
	if m.description != nil {
		fields = append(fields, feeditem.FieldDescription)
	}
	if m.content != nil {
		fields = append(fields, feeditem.FieldContent)
	}
	if m.guid != nil {
		fields = append(fields, feeditem.FieldGUID)
	}
	if m.link != nil {
		fields = append(fields, feeditem.FieldLink)
	}
	if m.images != nil {
		fields = append(fields, feeditem.FieldImages)
	}
	if m.published != nil {
		fields = append(fields, feeditem.FieldPublished)
	}
	if m.published_parsed != nil {
		fields = append(fields, feeditem.FieldPublishedParsed)
	}
	if m.updated != nil {
		fields = append(fields, feeditem.FieldUpdated)
	}
	if m.updated_parsed != nil {
		fields = append(fields, feeditem.FieldUpdatedParsed)
	}
	if m.enclosure != nil {
		fields = append(fields, feeditem.FieldEnclosure)
	}
	if m.updated_at != nil {
		fields = append(fields, feeditem.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, feeditem.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeedItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feeditem.FieldInternalID:
		return m.InternalID()
	case feeditem.FieldTitle:
		return m.Title()
	case feeditem.FieldAuthors:
		return m.Authors()
	case feeditem.FieldDescription:
		return m.Description()
	case feeditem.FieldContent:
		return m.Content()
	case feeditem.FieldGUID:
		return m.GUID()
	case feeditem.FieldLink:
		return m.Link()
	case feeditem.FieldImages:
		return m.Images()
	case feeditem.FieldPublished:
		return m.Published()
	case feeditem.FieldPublishedParsed:
		return m.PublishedParsed()
	case feeditem.FieldUpdated:
		return m.Updated()
	case feeditem.FieldUpdatedParsed:
		return m.UpdatedParsed()
	case feeditem.FieldEnclosure:
		return m.Enclosure()
	case feeditem.FieldUpdatedAt:
		return m.UpdatedAt()
	case feeditem.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeedItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feeditem.FieldInternalID:
		return m.OldInternalID(ctx)
	case feeditem.FieldTitle:
		return m.OldTitle(ctx)
	case feeditem.FieldAuthors:
		return m.OldAuthors(ctx)
	case feeditem.FieldDescription:
		return m.OldDescription(ctx)
	case feeditem.FieldContent:
		return m.OldContent(ctx)
	case feeditem.FieldGUID:
		return m.OldGUID(ctx)
	case feeditem.FieldLink:
		return m.OldLink(ctx)
	case feeditem.FieldImages:
		return m.OldImages(ctx)
	case feeditem.FieldPublished:
		return m.OldPublished(ctx)
	case feeditem.FieldPublishedParsed:
		return m.OldPublishedParsed(ctx)
	case feeditem.FieldUpdated:
		return m.OldUpdated(ctx)
	case feeditem.FieldUpdatedParsed:
		return m.OldUpdatedParsed(ctx)
	case feeditem.FieldEnclosure:
		return m.OldEnclosure(ctx)
	case feeditem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case feeditem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FeedItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feeditem.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalID(v)
		return nil
	case feeditem.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case feeditem.FieldAuthors:
		v, ok := value.([]schema.Person)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthors(v)
		return nil
	case feeditem.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case feeditem.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case feeditem.FieldGUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGUID(v)
		return nil
	case feeditem.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case feeditem.FieldImages:
		v, ok := value.([]schema.Image)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImages(v)
		return nil
	case feeditem.FieldPublished:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublished(v)
		return nil
	case feeditem.FieldPublishedParsed:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedParsed(v)
		return nil
	case feeditem.FieldUpdated:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdated(v)
		return nil
	case feeditem.FieldUpdatedParsed:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedParsed(v)
		return nil
	case feeditem.FieldEnclosure:
		v, ok := value.([]schema.Enclosure)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnclosure(v)
		return nil
	case feeditem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case feeditem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FeedItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeedItemMutation) AddedFields() []string {
	var fields []string
	if m.addinternal_id != nil {
		fields = append(fields, feeditem.FieldInternalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeedItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case feeditem.FieldInternalID:
		return m.AddedInternalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeedItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case feeditem.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInternalID(v)
		return nil
	}
	return fmt.Errorf("unknown FeedItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeedItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeedItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeedItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FeedItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeedItemMutation) ResetField(name string) error {
	switch name {
	case feeditem.FieldInternalID:
		m.ResetInternalID()
		return nil
	case feeditem.FieldTitle:
		m.ResetTitle()
		return nil
	case feeditem.FieldAuthors:
		m.ResetAuthors()
		return nil
	case feeditem.FieldDescription:
		m.ResetDescription()
		return nil
	case feeditem.FieldContent:
		m.ResetContent()
		return nil
	case feeditem.FieldGUID:
		m.ResetGUID()
		return nil
	case feeditem.FieldLink:
		m.ResetLink()
		return nil
	case feeditem.FieldImages:
		m.ResetImages()
		return nil
	case feeditem.FieldPublished:
		m.ResetPublished()
		return nil
	case feeditem.FieldPublishedParsed:
		m.ResetPublishedParsed()
		return nil
	case feeditem.FieldUpdated:
		m.ResetUpdated()
		return nil
	case feeditem.FieldUpdatedParsed:
		m.ResetUpdatedParsed()
		return nil
	case feeditem.FieldEnclosure:
		m.ResetEnclosure()
		return nil
	case feeditem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case feeditem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown FeedItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeedItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeedItemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeedItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeedItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeedItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeedItemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeedItemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FeedItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeedItemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FeedItem edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	internal_id    *int64
	addinternal_id *int64
	username       *string
	password       *string
	status         *user.Status
	_type          *user.Type
	updated_at     *time.Time
	created_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInternalID sets the "internal_id" field.
func (m *UserMutation) SetInternalID(i int64) {
	m.internal_id = &i
	m.addinternal_id = nil
}

// InternalID returns the value of the "internal_id" field in the mutation.
func (m *UserMutation) InternalID() (r int64, exists bool) {
	v := m.internal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalID returns the old "internal_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldInternalID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalID: %w", err)
	}
	return oldValue.InternalID, nil
}

// AddInternalID adds i to the "internal_id" field.
func (m *UserMutation) AddInternalID(i int64) {
	if m.addinternal_id != nil {
		*m.addinternal_id += i
	} else {
		m.addinternal_id = &i
	}
}

// AddedInternalID returns the value that was added to the "internal_id" field in this mutation.
func (m *UserMutation) AddedInternalID() (r int64, exists bool) {
	v := m.addinternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInternalID resets all changes to the "internal_id" field.
func (m *UserMutation) ResetInternalID() {
	m.internal_id = nil
	m.addinternal_id = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(u user.Status) {
	m.status = &u
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r user.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v user.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(u user.Type) {
	m._type = &u
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r user.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v user.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.internal_id != nil {
		fields = append(fields, user.FieldInternalID)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldInternalID:
		return m.InternalID()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldStatus:
		return m.Status()
	case user.FieldType:
		return m.GetType()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldInternalID:
		return m.OldInternalID(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalID(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(user.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldType:
		v, ok := value.(user.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addinternal_id != nil {
		fields = append(fields, user.FieldInternalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldInternalID:
		return m.AddedInternalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldInternalID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInternalID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldInternalID:
		m.ResetInternalID()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
