// Code generated by ent, DO NOT EDIT.

package apppackage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/app/sephirah/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldID, id))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldSourceID, v))
}

// SourcePackageID applies equality check predicate on the "source_package_id" field. It's identical to SourcePackageIDEQ.
func SourcePackageID(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldSourcePackageID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldDescription, v))
}

// BinaryName applies equality check predicate on the "binary_name" field. It's identical to BinaryNameEQ.
func BinaryName(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldBinaryName, v))
}

// BinarySize applies equality check predicate on the "binary_size" field. It's identical to BinarySizeEQ.
func BinarySize(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldBinarySize, v))
}

// BinaryPublicURL applies equality check predicate on the "binary_public_url" field. It's identical to BinaryPublicURLEQ.
func BinaryPublicURL(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldBinaryPublicURL, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldCreatedAt, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v Source) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v Source) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...Source) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...Source) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldSource, vs...))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDGT applies the GT predicate on the "source_id" field.
func SourceIDGT(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldSourceID, v))
}

// SourceIDGTE applies the GTE predicate on the "source_id" field.
func SourceIDGTE(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldSourceID, v))
}

// SourceIDLT applies the LT predicate on the "source_id" field.
func SourceIDLT(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldSourceID, v))
}

// SourceIDLTE applies the LTE predicate on the "source_id" field.
func SourceIDLTE(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldSourceID, v))
}

// SourcePackageIDEQ applies the EQ predicate on the "source_package_id" field.
func SourcePackageIDEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldSourcePackageID, v))
}

// SourcePackageIDNEQ applies the NEQ predicate on the "source_package_id" field.
func SourcePackageIDNEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldSourcePackageID, v))
}

// SourcePackageIDIn applies the In predicate on the "source_package_id" field.
func SourcePackageIDIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldSourcePackageID, vs...))
}

// SourcePackageIDNotIn applies the NotIn predicate on the "source_package_id" field.
func SourcePackageIDNotIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldSourcePackageID, vs...))
}

// SourcePackageIDGT applies the GT predicate on the "source_package_id" field.
func SourcePackageIDGT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldSourcePackageID, v))
}

// SourcePackageIDGTE applies the GTE predicate on the "source_package_id" field.
func SourcePackageIDGTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldSourcePackageID, v))
}

// SourcePackageIDLT applies the LT predicate on the "source_package_id" field.
func SourcePackageIDLT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldSourcePackageID, v))
}

// SourcePackageIDLTE applies the LTE predicate on the "source_package_id" field.
func SourcePackageIDLTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldSourcePackageID, v))
}

// SourcePackageIDContains applies the Contains predicate on the "source_package_id" field.
func SourcePackageIDContains(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContains(FieldSourcePackageID, v))
}

// SourcePackageIDHasPrefix applies the HasPrefix predicate on the "source_package_id" field.
func SourcePackageIDHasPrefix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasPrefix(FieldSourcePackageID, v))
}

// SourcePackageIDHasSuffix applies the HasSuffix predicate on the "source_package_id" field.
func SourcePackageIDHasSuffix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasSuffix(FieldSourcePackageID, v))
}

// SourcePackageIDEqualFold applies the EqualFold predicate on the "source_package_id" field.
func SourcePackageIDEqualFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEqualFold(FieldSourcePackageID, v))
}

// SourcePackageIDContainsFold applies the ContainsFold predicate on the "source_package_id" field.
func SourcePackageIDContainsFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContainsFold(FieldSourcePackageID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContainsFold(FieldDescription, v))
}

// BinaryNameEQ applies the EQ predicate on the "binary_name" field.
func BinaryNameEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldBinaryName, v))
}

// BinaryNameNEQ applies the NEQ predicate on the "binary_name" field.
func BinaryNameNEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldBinaryName, v))
}

// BinaryNameIn applies the In predicate on the "binary_name" field.
func BinaryNameIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldBinaryName, vs...))
}

// BinaryNameNotIn applies the NotIn predicate on the "binary_name" field.
func BinaryNameNotIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldBinaryName, vs...))
}

// BinaryNameGT applies the GT predicate on the "binary_name" field.
func BinaryNameGT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldBinaryName, v))
}

// BinaryNameGTE applies the GTE predicate on the "binary_name" field.
func BinaryNameGTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldBinaryName, v))
}

// BinaryNameLT applies the LT predicate on the "binary_name" field.
func BinaryNameLT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldBinaryName, v))
}

// BinaryNameLTE applies the LTE predicate on the "binary_name" field.
func BinaryNameLTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldBinaryName, v))
}

// BinaryNameContains applies the Contains predicate on the "binary_name" field.
func BinaryNameContains(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContains(FieldBinaryName, v))
}

// BinaryNameHasPrefix applies the HasPrefix predicate on the "binary_name" field.
func BinaryNameHasPrefix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasPrefix(FieldBinaryName, v))
}

// BinaryNameHasSuffix applies the HasSuffix predicate on the "binary_name" field.
func BinaryNameHasSuffix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasSuffix(FieldBinaryName, v))
}

// BinaryNameEqualFold applies the EqualFold predicate on the "binary_name" field.
func BinaryNameEqualFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEqualFold(FieldBinaryName, v))
}

// BinaryNameContainsFold applies the ContainsFold predicate on the "binary_name" field.
func BinaryNameContainsFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContainsFold(FieldBinaryName, v))
}

// BinarySizeEQ applies the EQ predicate on the "binary_size" field.
func BinarySizeEQ(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldBinarySize, v))
}

// BinarySizeNEQ applies the NEQ predicate on the "binary_size" field.
func BinarySizeNEQ(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldBinarySize, v))
}

// BinarySizeIn applies the In predicate on the "binary_size" field.
func BinarySizeIn(vs ...int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldBinarySize, vs...))
}

// BinarySizeNotIn applies the NotIn predicate on the "binary_size" field.
func BinarySizeNotIn(vs ...int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldBinarySize, vs...))
}

// BinarySizeGT applies the GT predicate on the "binary_size" field.
func BinarySizeGT(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldBinarySize, v))
}

// BinarySizeGTE applies the GTE predicate on the "binary_size" field.
func BinarySizeGTE(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldBinarySize, v))
}

// BinarySizeLT applies the LT predicate on the "binary_size" field.
func BinarySizeLT(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldBinarySize, v))
}

// BinarySizeLTE applies the LTE predicate on the "binary_size" field.
func BinarySizeLTE(v int64) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldBinarySize, v))
}

// BinaryPublicURLEQ applies the EQ predicate on the "binary_public_url" field.
func BinaryPublicURLEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldBinaryPublicURL, v))
}

// BinaryPublicURLNEQ applies the NEQ predicate on the "binary_public_url" field.
func BinaryPublicURLNEQ(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldBinaryPublicURL, v))
}

// BinaryPublicURLIn applies the In predicate on the "binary_public_url" field.
func BinaryPublicURLIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldBinaryPublicURL, vs...))
}

// BinaryPublicURLNotIn applies the NotIn predicate on the "binary_public_url" field.
func BinaryPublicURLNotIn(vs ...string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldBinaryPublicURL, vs...))
}

// BinaryPublicURLGT applies the GT predicate on the "binary_public_url" field.
func BinaryPublicURLGT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldBinaryPublicURL, v))
}

// BinaryPublicURLGTE applies the GTE predicate on the "binary_public_url" field.
func BinaryPublicURLGTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldBinaryPublicURL, v))
}

// BinaryPublicURLLT applies the LT predicate on the "binary_public_url" field.
func BinaryPublicURLLT(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldBinaryPublicURL, v))
}

// BinaryPublicURLLTE applies the LTE predicate on the "binary_public_url" field.
func BinaryPublicURLLTE(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldBinaryPublicURL, v))
}

// BinaryPublicURLContains applies the Contains predicate on the "binary_public_url" field.
func BinaryPublicURLContains(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContains(FieldBinaryPublicURL, v))
}

// BinaryPublicURLHasPrefix applies the HasPrefix predicate on the "binary_public_url" field.
func BinaryPublicURLHasPrefix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasPrefix(FieldBinaryPublicURL, v))
}

// BinaryPublicURLHasSuffix applies the HasSuffix predicate on the "binary_public_url" field.
func BinaryPublicURLHasSuffix(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldHasSuffix(FieldBinaryPublicURL, v))
}

// BinaryPublicURLEqualFold applies the EqualFold predicate on the "binary_public_url" field.
func BinaryPublicURLEqualFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEqualFold(FieldBinaryPublicURL, v))
}

// BinaryPublicURLContainsFold applies the ContainsFold predicate on the "binary_public_url" field.
func BinaryPublicURLContainsFold(v string) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldContainsFold(FieldBinaryPublicURL, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AppPackage {
	return predicate.AppPackage(sql.FieldLTE(FieldCreatedAt, v))
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.AppPackage {
	return predicate.AppPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppTable, AppColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.AppPackage {
	return predicate.AppPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppTable, AppColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppPackage) predicate.AppPackage {
	return predicate.AppPackage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppPackage) predicate.AppPackage {
	return predicate.AppPackage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppPackage) predicate.AppPackage {
	return predicate.AppPackage(func(s *sql.Selector) {
		p(s.Not())
	})
}
