// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package modelfeed

import v1 "github.com/tuihub/protos/pkg/librarian/v1"

func FromPBFeed(source *v1.Feed) *Feed {
	var pModelfeedFeed *Feed
	if source != nil {
		var modelfeedFeed Feed
		modelfeedFeed.ID = FromPBInternalID((*source).Id)
		modelfeedFeed.Title = (*source).Title
		modelfeedFeed.Description = (*source).Description
		modelfeedFeed.Link = (*source).Link
		if (*source).Authors != nil {
			modelfeedFeed.Authors = make([]*Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				modelfeedFeed.Authors[i] = pV1FeedPersonToPModelfeedPerson((*source).Authors[i])
			}
		}
		modelfeedFeed.Language = (*source).Language
		modelfeedFeed.Image = FromPBFeedImage((*source).Image)
		modelfeedFeed.Items = FromPBFeedItemList((*source).Items)
		pModelfeedFeed = &modelfeedFeed
	}
	return pModelfeedFeed
}
func FromPBFeedEnclosure(source *v1.FeedEnclosure) *Enclosure {
	var pModelfeedEnclosure *Enclosure
	if source != nil {
		var modelfeedEnclosure Enclosure
		modelfeedEnclosure.URL = (*source).Url
		modelfeedEnclosure.Length = (*source).Length
		modelfeedEnclosure.Type = (*source).Type
		pModelfeedEnclosure = &modelfeedEnclosure
	}
	return pModelfeedEnclosure
}
func FromPBFeedImage(source *v1.FeedImage) *Image {
	var pModelfeedImage *Image
	if source != nil {
		var modelfeedImage Image
		modelfeedImage.URL = (*source).Url
		modelfeedImage.Title = (*source).Title
		pModelfeedImage = &modelfeedImage
	}
	return pModelfeedImage
}
func FromPBFeedItem(source *v1.FeedItem) *Item {
	var pModelfeedItem *Item
	if source != nil {
		var modelfeedItem Item
		modelfeedItem.ID = FromPBInternalID((*source).Id)
		modelfeedItem.Title = (*source).Title
		modelfeedItem.Description = (*source).Description
		modelfeedItem.Content = (*source).Content
		modelfeedItem.Link = (*source).Link
		modelfeedItem.Updated = (*source).Updated
		modelfeedItem.UpdatedParsed = FromPBTime((*source).UpdatedParsed)
		modelfeedItem.Published = (*source).Published
		modelfeedItem.PublishedParsed = FromPBTime((*source).PublishedParsed)
		if (*source).Authors != nil {
			modelfeedItem.Authors = make([]*Person, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				modelfeedItem.Authors[i] = pV1FeedPersonToPModelfeedPerson((*source).Authors[i])
			}
		}
		modelfeedItem.GUID = (*source).Guid
		modelfeedItem.Image = FromPBFeedImage((*source).Image)
		if (*source).Enclosures != nil {
			modelfeedItem.Enclosures = make([]*Enclosure, len((*source).Enclosures))
			for j := 0; j < len((*source).Enclosures); j++ {
				modelfeedItem.Enclosures[j] = FromPBFeedEnclosure((*source).Enclosures[j])
			}
		}
		modelfeedItem.PublishPlatform = (*source).PublishPlatform
		modelfeedItem.ReadCount = (*source).ReadCount
		pModelfeedItem = &modelfeedItem
	}
	return pModelfeedItem
}
func FromPBFeedItemList(source []*v1.FeedItem) []*Item {
	var pModelfeedItemList []*Item
	if source != nil {
		pModelfeedItemList = make([]*Item, len(source))
		for i := 0; i < len(source); i++ {
			pModelfeedItemList[i] = FromPBFeedItem(source[i])
		}
	}
	return pModelfeedItemList
}
func ToPBFeed(source *Feed) *v1.Feed {
	var pV1Feed *v1.Feed
	if source != nil {
		var v1Feed v1.Feed
		v1Feed.Id = modelfeedFeedToPV1InternalID((*source))
		v1Feed.Title = (*source).Title
		v1Feed.Link = (*source).Link
		v1Feed.Description = (*source).Description
		if (*source).Items != nil {
			v1Feed.Items = make([]*v1.FeedItem, len((*source).Items))
			for i := 0; i < len((*source).Items); i++ {
				v1Feed.Items[i] = ToPBFeedItem((*source).Items[i])
			}
		}
		v1Feed.Language = (*source).Language
		v1Feed.Image = ToPBFeedImage((*source).Image)
		if (*source).Authors != nil {
			v1Feed.Authors = make([]*v1.FeedPerson, len((*source).Authors))
			for j := 0; j < len((*source).Authors); j++ {
				v1Feed.Authors[j] = pModelfeedPersonToPV1FeedPerson((*source).Authors[j])
			}
		}
		pV1Feed = &v1Feed
	}
	return pV1Feed
}
func ToPBFeedEnclosure(source *Enclosure) *v1.FeedEnclosure {
	var pV1FeedEnclosure *v1.FeedEnclosure
	if source != nil {
		var v1FeedEnclosure v1.FeedEnclosure
		v1FeedEnclosure.Url = (*source).URL
		v1FeedEnclosure.Length = (*source).Length
		v1FeedEnclosure.Type = (*source).Type
		pV1FeedEnclosure = &v1FeedEnclosure
	}
	return pV1FeedEnclosure
}
func ToPBFeedImage(source *Image) *v1.FeedImage {
	var pV1FeedImage *v1.FeedImage
	if source != nil {
		var v1FeedImage v1.FeedImage
		v1FeedImage.Url = (*source).URL
		v1FeedImage.Title = (*source).Title
		pV1FeedImage = &v1FeedImage
	}
	return pV1FeedImage
}
func ToPBFeedInternalID(source Feed) v1.InternalID {
	var v1InternalID v1.InternalID
	v1InternalID.Id = int64(source.ID)
	return v1InternalID
}
func ToPBFeedItem(source *Item) *v1.FeedItem {
	var pV1FeedItem *v1.FeedItem
	if source != nil {
		var v1FeedItem v1.FeedItem
		v1FeedItem.Title = (*source).Title
		if (*source).Authors != nil {
			v1FeedItem.Authors = make([]*v1.FeedPerson, len((*source).Authors))
			for i := 0; i < len((*source).Authors); i++ {
				v1FeedItem.Authors[i] = pModelfeedPersonToPV1FeedPerson((*source).Authors[i])
			}
		}
		v1FeedItem.Description = (*source).Description
		v1FeedItem.Content = (*source).Content
		v1FeedItem.Guid = (*source).GUID
		v1FeedItem.Link = (*source).Link
		v1FeedItem.Image = ToPBFeedImage((*source).Image)
		v1FeedItem.Published = (*source).Published
		v1FeedItem.PublishedParsed = ToPBTime((*source).PublishedParsed)
		v1FeedItem.Updated = (*source).Updated
		v1FeedItem.UpdatedParsed = ToPBTime((*source).UpdatedParsed)
		if (*source).Enclosures != nil {
			v1FeedItem.Enclosures = make([]*v1.FeedEnclosure, len((*source).Enclosures))
			for j := 0; j < len((*source).Enclosures); j++ {
				v1FeedItem.Enclosures[j] = ToPBFeedEnclosure((*source).Enclosures[j])
			}
		}
		v1FeedItem.PublishPlatform = (*source).PublishPlatform
		v1FeedItem.ReadCount = (*source).ReadCount
		pV1FeedItem = &v1FeedItem
	}
	return pV1FeedItem
}
func modelfeedFeedToPV1InternalID(source Feed) *v1.InternalID {
	v1InternalID := ToPBFeedInternalID(source)
	return &v1InternalID
}
func pModelfeedPersonToPV1FeedPerson(source *Person) *v1.FeedPerson {
	var pV1FeedPerson *v1.FeedPerson
	if source != nil {
		var v1FeedPerson v1.FeedPerson
		v1FeedPerson.Name = (*source).Name
		v1FeedPerson.Email = (*source).Email
		pV1FeedPerson = &v1FeedPerson
	}
	return pV1FeedPerson
}
func pV1FeedPersonToPModelfeedPerson(source *v1.FeedPerson) *Person {
	var pModelfeedPerson *Person
	if source != nil {
		var modelfeedPerson Person
		modelfeedPerson.Name = (*source).Name
		modelfeedPerson.Email = (*source).Email
		pModelfeedPerson = &modelfeedPerson
	}
	return pModelfeedPerson
}
