// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/account"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedactionset"
	"github.com/tuihub/librarian/internal/data/internal/ent/feedconfig"
	"github.com/tuihub/librarian/internal/data/internal/ent/feeditemcollection"
	"github.com/tuihub/librarian/internal/data/internal/ent/file"
	"github.com/tuihub/librarian/internal/data/internal/ent/image"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifyflow"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifysource"
	"github.com/tuihub/librarian/internal/data/internal/ent/notifytarget"
	"github.com/tuihub/librarian/internal/data/internal/ent/portercontext"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/session"
	"github.com/tuihub/librarian/internal/data/internal/ent/tag"
	"github.com/tuihub/librarian/internal/data/internal/ent/user"
	"github.com/tuihub/librarian/internal/model"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(u user.Status) *UserUpdate {
	uu.mutation.SetStatus(u)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(u *user.Status) *UserUpdate {
	if u != nil {
		uu.SetStatus(*u)
	}
	return uu
}

// SetType sets the "type" field.
func (uu *UserUpdate) SetType(u user.Type) *UserUpdate {
	uu.mutation.SetType(u)
	return uu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableType(u *user.Type) *UserUpdate {
	if u != nil {
		uu.SetType(*u)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// AddSessionIDs adds the "session" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSession adds the "session" edges to the Session entity.
func (uu *UserUpdate) AddSession(s ...*Session) *UserUpdate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddAccountIDs adds the "account" edge to the Account entity by IDs.
func (uu *UserUpdate) AddAccountIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddAccountIDs(ids...)
	return uu
}

// AddAccount adds the "account" edges to the Account entity.
func (uu *UserUpdate) AddAccount(a ...*Account) *UserUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAccountIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (uu *UserUpdate) AddAppIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddAppIDs(ids...)
	return uu
}

// AddApp adds the "app" edges to the App entity.
func (uu *UserUpdate) AddApp(a ...*App) *UserUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAppIDs(ids...)
}

// AddFeedConfigIDs adds the "feed_config" edge to the FeedConfig entity by IDs.
func (uu *UserUpdate) AddFeedConfigIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddFeedConfigIDs(ids...)
	return uu
}

// AddFeedConfig adds the "feed_config" edges to the FeedConfig entity.
func (uu *UserUpdate) AddFeedConfig(f ...*FeedConfig) *UserUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddFeedConfigIDs(ids...)
}

// AddFeedActionSetIDs adds the "feed_action_set" edge to the FeedActionSet entity by IDs.
func (uu *UserUpdate) AddFeedActionSetIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddFeedActionSetIDs(ids...)
	return uu
}

// AddFeedActionSet adds the "feed_action_set" edges to the FeedActionSet entity.
func (uu *UserUpdate) AddFeedActionSet(f ...*FeedActionSet) *UserUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddFeedActionSetIDs(ids...)
}

// AddFeedItemCollectionIDs adds the "feed_item_collection" edge to the FeedItemCollection entity by IDs.
func (uu *UserUpdate) AddFeedItemCollectionIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddFeedItemCollectionIDs(ids...)
	return uu
}

// AddFeedItemCollection adds the "feed_item_collection" edges to the FeedItemCollection entity.
func (uu *UserUpdate) AddFeedItemCollection(f ...*FeedItemCollection) *UserUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddFeedItemCollectionIDs(ids...)
}

// AddNotifySourceIDs adds the "notify_source" edge to the NotifySource entity by IDs.
func (uu *UserUpdate) AddNotifySourceIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddNotifySourceIDs(ids...)
	return uu
}

// AddNotifySource adds the "notify_source" edges to the NotifySource entity.
func (uu *UserUpdate) AddNotifySource(n ...*NotifySource) *UserUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotifySourceIDs(ids...)
}

// AddNotifyTargetIDs adds the "notify_target" edge to the NotifyTarget entity by IDs.
func (uu *UserUpdate) AddNotifyTargetIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddNotifyTargetIDs(ids...)
	return uu
}

// AddNotifyTarget adds the "notify_target" edges to the NotifyTarget entity.
func (uu *UserUpdate) AddNotifyTarget(n ...*NotifyTarget) *UserUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotifyTargetIDs(ids...)
}

// AddNotifyFlowIDs adds the "notify_flow" edge to the NotifyFlow entity by IDs.
func (uu *UserUpdate) AddNotifyFlowIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddNotifyFlowIDs(ids...)
	return uu
}

// AddNotifyFlow adds the "notify_flow" edges to the NotifyFlow entity.
func (uu *UserUpdate) AddNotifyFlow(n ...*NotifyFlow) *UserUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotifyFlowIDs(ids...)
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (uu *UserUpdate) AddImageIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddImageIDs(ids...)
	return uu
}

// AddImage adds the "image" edges to the Image entity.
func (uu *UserUpdate) AddImage(i ...*Image) *UserUpdate {
	ids := make([]model.InternalID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddImageIDs(ids...)
}

// AddFileIDs adds the "file" edge to the File entity by IDs.
func (uu *UserUpdate) AddFileIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddFileIDs(ids...)
	return uu
}

// AddFile adds the "file" edges to the File entity.
func (uu *UserUpdate) AddFile(f ...*File) *UserUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddFileIDs(ids...)
}

// AddTagIDs adds the "tag" edge to the Tag entity by IDs.
func (uu *UserUpdate) AddTagIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddTagIDs(ids...)
	return uu
}

// AddTag adds the "tag" edges to the Tag entity.
func (uu *UserUpdate) AddTag(t ...*Tag) *UserUpdate {
	ids := make([]model.InternalID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTagIDs(ids...)
}

// AddPorterContextIDs adds the "porter_context" edge to the PorterContext entity by IDs.
func (uu *UserUpdate) AddPorterContextIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddPorterContextIDs(ids...)
	return uu
}

// AddPorterContext adds the "porter_context" edges to the PorterContext entity.
func (uu *UserUpdate) AddPorterContext(p ...*PorterContext) *UserUpdate {
	ids := make([]model.InternalID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPorterContextIDs(ids...)
}

// AddCreatedUserIDs adds the "created_user" edge to the User entity by IDs.
func (uu *UserUpdate) AddCreatedUserIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.AddCreatedUserIDs(ids...)
	return uu
}

// AddCreatedUser adds the "created_user" edges to the User entity.
func (uu *UserUpdate) AddCreatedUser(u ...*User) *UserUpdate {
	ids := make([]model.InternalID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddCreatedUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearSession clears all "session" edges to the Session entity.
func (uu *UserUpdate) ClearSession() *UserUpdate {
	uu.mutation.ClearSession()
	return uu
}

// RemoveSessionIDs removes the "session" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSession removes "session" edges to Session entities.
func (uu *UserUpdate) RemoveSession(s ...*Session) *UserUpdate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearAccount clears all "account" edges to the Account entity.
func (uu *UserUpdate) ClearAccount() *UserUpdate {
	uu.mutation.ClearAccount()
	return uu
}

// RemoveAccountIDs removes the "account" edge to Account entities by IDs.
func (uu *UserUpdate) RemoveAccountIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveAccountIDs(ids...)
	return uu
}

// RemoveAccount removes "account" edges to Account entities.
func (uu *UserUpdate) RemoveAccount(a ...*Account) *UserUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAccountIDs(ids...)
}

// ClearApp clears all "app" edges to the App entity.
func (uu *UserUpdate) ClearApp() *UserUpdate {
	uu.mutation.ClearApp()
	return uu
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (uu *UserUpdate) RemoveAppIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveAppIDs(ids...)
	return uu
}

// RemoveApp removes "app" edges to App entities.
func (uu *UserUpdate) RemoveApp(a ...*App) *UserUpdate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAppIDs(ids...)
}

// ClearFeedConfig clears all "feed_config" edges to the FeedConfig entity.
func (uu *UserUpdate) ClearFeedConfig() *UserUpdate {
	uu.mutation.ClearFeedConfig()
	return uu
}

// RemoveFeedConfigIDs removes the "feed_config" edge to FeedConfig entities by IDs.
func (uu *UserUpdate) RemoveFeedConfigIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveFeedConfigIDs(ids...)
	return uu
}

// RemoveFeedConfig removes "feed_config" edges to FeedConfig entities.
func (uu *UserUpdate) RemoveFeedConfig(f ...*FeedConfig) *UserUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveFeedConfigIDs(ids...)
}

// ClearFeedActionSet clears all "feed_action_set" edges to the FeedActionSet entity.
func (uu *UserUpdate) ClearFeedActionSet() *UserUpdate {
	uu.mutation.ClearFeedActionSet()
	return uu
}

// RemoveFeedActionSetIDs removes the "feed_action_set" edge to FeedActionSet entities by IDs.
func (uu *UserUpdate) RemoveFeedActionSetIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveFeedActionSetIDs(ids...)
	return uu
}

// RemoveFeedActionSet removes "feed_action_set" edges to FeedActionSet entities.
func (uu *UserUpdate) RemoveFeedActionSet(f ...*FeedActionSet) *UserUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveFeedActionSetIDs(ids...)
}

// ClearFeedItemCollection clears all "feed_item_collection" edges to the FeedItemCollection entity.
func (uu *UserUpdate) ClearFeedItemCollection() *UserUpdate {
	uu.mutation.ClearFeedItemCollection()
	return uu
}

// RemoveFeedItemCollectionIDs removes the "feed_item_collection" edge to FeedItemCollection entities by IDs.
func (uu *UserUpdate) RemoveFeedItemCollectionIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveFeedItemCollectionIDs(ids...)
	return uu
}

// RemoveFeedItemCollection removes "feed_item_collection" edges to FeedItemCollection entities.
func (uu *UserUpdate) RemoveFeedItemCollection(f ...*FeedItemCollection) *UserUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveFeedItemCollectionIDs(ids...)
}

// ClearNotifySource clears all "notify_source" edges to the NotifySource entity.
func (uu *UserUpdate) ClearNotifySource() *UserUpdate {
	uu.mutation.ClearNotifySource()
	return uu
}

// RemoveNotifySourceIDs removes the "notify_source" edge to NotifySource entities by IDs.
func (uu *UserUpdate) RemoveNotifySourceIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveNotifySourceIDs(ids...)
	return uu
}

// RemoveNotifySource removes "notify_source" edges to NotifySource entities.
func (uu *UserUpdate) RemoveNotifySource(n ...*NotifySource) *UserUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotifySourceIDs(ids...)
}

// ClearNotifyTarget clears all "notify_target" edges to the NotifyTarget entity.
func (uu *UserUpdate) ClearNotifyTarget() *UserUpdate {
	uu.mutation.ClearNotifyTarget()
	return uu
}

// RemoveNotifyTargetIDs removes the "notify_target" edge to NotifyTarget entities by IDs.
func (uu *UserUpdate) RemoveNotifyTargetIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveNotifyTargetIDs(ids...)
	return uu
}

// RemoveNotifyTarget removes "notify_target" edges to NotifyTarget entities.
func (uu *UserUpdate) RemoveNotifyTarget(n ...*NotifyTarget) *UserUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotifyTargetIDs(ids...)
}

// ClearNotifyFlow clears all "notify_flow" edges to the NotifyFlow entity.
func (uu *UserUpdate) ClearNotifyFlow() *UserUpdate {
	uu.mutation.ClearNotifyFlow()
	return uu
}

// RemoveNotifyFlowIDs removes the "notify_flow" edge to NotifyFlow entities by IDs.
func (uu *UserUpdate) RemoveNotifyFlowIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveNotifyFlowIDs(ids...)
	return uu
}

// RemoveNotifyFlow removes "notify_flow" edges to NotifyFlow entities.
func (uu *UserUpdate) RemoveNotifyFlow(n ...*NotifyFlow) *UserUpdate {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotifyFlowIDs(ids...)
}

// ClearImage clears all "image" edges to the Image entity.
func (uu *UserUpdate) ClearImage() *UserUpdate {
	uu.mutation.ClearImage()
	return uu
}

// RemoveImageIDs removes the "image" edge to Image entities by IDs.
func (uu *UserUpdate) RemoveImageIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveImageIDs(ids...)
	return uu
}

// RemoveImage removes "image" edges to Image entities.
func (uu *UserUpdate) RemoveImage(i ...*Image) *UserUpdate {
	ids := make([]model.InternalID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveImageIDs(ids...)
}

// ClearFile clears all "file" edges to the File entity.
func (uu *UserUpdate) ClearFile() *UserUpdate {
	uu.mutation.ClearFile()
	return uu
}

// RemoveFileIDs removes the "file" edge to File entities by IDs.
func (uu *UserUpdate) RemoveFileIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveFileIDs(ids...)
	return uu
}

// RemoveFile removes "file" edges to File entities.
func (uu *UserUpdate) RemoveFile(f ...*File) *UserUpdate {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveFileIDs(ids...)
}

// ClearTag clears all "tag" edges to the Tag entity.
func (uu *UserUpdate) ClearTag() *UserUpdate {
	uu.mutation.ClearTag()
	return uu
}

// RemoveTagIDs removes the "tag" edge to Tag entities by IDs.
func (uu *UserUpdate) RemoveTagIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveTagIDs(ids...)
	return uu
}

// RemoveTag removes "tag" edges to Tag entities.
func (uu *UserUpdate) RemoveTag(t ...*Tag) *UserUpdate {
	ids := make([]model.InternalID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTagIDs(ids...)
}

// ClearPorterContext clears all "porter_context" edges to the PorterContext entity.
func (uu *UserUpdate) ClearPorterContext() *UserUpdate {
	uu.mutation.ClearPorterContext()
	return uu
}

// RemovePorterContextIDs removes the "porter_context" edge to PorterContext entities by IDs.
func (uu *UserUpdate) RemovePorterContextIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemovePorterContextIDs(ids...)
	return uu
}

// RemovePorterContext removes "porter_context" edges to PorterContext entities.
func (uu *UserUpdate) RemovePorterContext(p ...*PorterContext) *UserUpdate {
	ids := make([]model.InternalID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePorterContextIDs(ids...)
}

// ClearCreatedUser clears all "created_user" edges to the User entity.
func (uu *UserUpdate) ClearCreatedUser() *UserUpdate {
	uu.mutation.ClearCreatedUser()
	return uu
}

// RemoveCreatedUserIDs removes the "created_user" edge to User entities by IDs.
func (uu *UserUpdate) RemoveCreatedUserIDs(ids ...model.InternalID) *UserUpdate {
	uu.mutation.RemoveCreatedUserIDs(ids...)
	return uu
}

// RemoveCreatedUser removes "created_user" edges to User entities.
func (uu *UserUpdate) RemoveCreatedUser(u ...*User) *UserUpdate {
	ids := make([]model.InternalID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveCreatedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := uu.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	if uu.mutation.CreatorCleared() && len(uu.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.creator"`)
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionTable,
			Columns: []string{user.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionIDs(); len(nodes) > 0 && !uu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionTable,
			Columns: []string{user.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionTable,
			Columns: []string{user.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountTable,
			Columns: []string{user.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAccountIDs(); len(nodes) > 0 && !uu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountTable,
			Columns: []string{user.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountTable,
			Columns: []string{user.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAppIDs(); len(nodes) > 0 && !uu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedConfigTable,
			Columns: []string{user.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFeedConfigIDs(); len(nodes) > 0 && !uu.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedConfigTable,
			Columns: []string{user.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FeedConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedConfigTable,
			Columns: []string{user.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedActionSetTable,
			Columns: []string{user.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFeedActionSetIDs(); len(nodes) > 0 && !uu.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedActionSetTable,
			Columns: []string{user.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FeedActionSetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedActionSetTable,
			Columns: []string{user.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FeedItemCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedItemCollectionTable,
			Columns: []string{user.FeedItemCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFeedItemCollectionIDs(); len(nodes) > 0 && !uu.mutation.FeedItemCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedItemCollectionTable,
			Columns: []string{user.FeedItemCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FeedItemCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedItemCollectionTable,
			Columns: []string{user.FeedItemCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifySourceTable,
			Columns: []string{user.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotifySourceIDs(); len(nodes) > 0 && !uu.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifySourceTable,
			Columns: []string{user.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotifySourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifySourceTable,
			Columns: []string{user.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotifyTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTargetTable,
			Columns: []string{user.NotifyTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotifyTargetIDs(); len(nodes) > 0 && !uu.mutation.NotifyTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTargetTable,
			Columns: []string{user.NotifyTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotifyTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTargetTable,
			Columns: []string{user.NotifyTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotifyFlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyFlowTable,
			Columns: []string{user.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotifyFlowIDs(); len(nodes) > 0 && !uu.mutation.NotifyFlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyFlowTable,
			Columns: []string{user.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotifyFlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyFlowTable,
			Columns: []string{user.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImageTable,
			Columns: []string{user.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedImageIDs(); len(nodes) > 0 && !uu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImageTable,
			Columns: []string{user.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImageTable,
			Columns: []string{user.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FileTable,
			Columns: []string{user.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFileIDs(); len(nodes) > 0 && !uu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FileTable,
			Columns: []string{user.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FileTable,
			Columns: []string{user.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagTable,
			Columns: []string{user.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTagIDs(); len(nodes) > 0 && !uu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagTable,
			Columns: []string{user.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagTable,
			Columns: []string{user.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PorterContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PorterContextTable,
			Columns: []string{user.PorterContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPorterContextIDs(); len(nodes) > 0 && !uu.mutation.PorterContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PorterContextTable,
			Columns: []string{user.PorterContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PorterContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PorterContextTable,
			Columns: []string{user.PorterContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUserTable,
			Columns: []string{user.CreatedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedUserIDs(); len(nodes) > 0 && !uu.mutation.CreatedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUserTable,
			Columns: []string{user.CreatedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUserTable,
			Columns: []string{user.CreatedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(u user.Status) *UserUpdateOne {
	uuo.mutation.SetStatus(u)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(u *user.Status) *UserUpdateOne {
	if u != nil {
		uuo.SetStatus(*u)
	}
	return uuo
}

// SetType sets the "type" field.
func (uuo *UserUpdateOne) SetType(u user.Type) *UserUpdateOne {
	uuo.mutation.SetType(u)
	return uuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableType(u *user.Type) *UserUpdateOne {
	if u != nil {
		uuo.SetType(*u)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// AddSessionIDs adds the "session" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSession adds the "session" edges to the Session entity.
func (uuo *UserUpdateOne) AddSession(s ...*Session) *UserUpdateOne {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddAccountIDs adds the "account" edge to the Account entity by IDs.
func (uuo *UserUpdateOne) AddAccountIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddAccountIDs(ids...)
	return uuo
}

// AddAccount adds the "account" edges to the Account entity.
func (uuo *UserUpdateOne) AddAccount(a ...*Account) *UserUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAccountIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (uuo *UserUpdateOne) AddAppIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddAppIDs(ids...)
	return uuo
}

// AddApp adds the "app" edges to the App entity.
func (uuo *UserUpdateOne) AddApp(a ...*App) *UserUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAppIDs(ids...)
}

// AddFeedConfigIDs adds the "feed_config" edge to the FeedConfig entity by IDs.
func (uuo *UserUpdateOne) AddFeedConfigIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddFeedConfigIDs(ids...)
	return uuo
}

// AddFeedConfig adds the "feed_config" edges to the FeedConfig entity.
func (uuo *UserUpdateOne) AddFeedConfig(f ...*FeedConfig) *UserUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddFeedConfigIDs(ids...)
}

// AddFeedActionSetIDs adds the "feed_action_set" edge to the FeedActionSet entity by IDs.
func (uuo *UserUpdateOne) AddFeedActionSetIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddFeedActionSetIDs(ids...)
	return uuo
}

// AddFeedActionSet adds the "feed_action_set" edges to the FeedActionSet entity.
func (uuo *UserUpdateOne) AddFeedActionSet(f ...*FeedActionSet) *UserUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddFeedActionSetIDs(ids...)
}

// AddFeedItemCollectionIDs adds the "feed_item_collection" edge to the FeedItemCollection entity by IDs.
func (uuo *UserUpdateOne) AddFeedItemCollectionIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddFeedItemCollectionIDs(ids...)
	return uuo
}

// AddFeedItemCollection adds the "feed_item_collection" edges to the FeedItemCollection entity.
func (uuo *UserUpdateOne) AddFeedItemCollection(f ...*FeedItemCollection) *UserUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddFeedItemCollectionIDs(ids...)
}

// AddNotifySourceIDs adds the "notify_source" edge to the NotifySource entity by IDs.
func (uuo *UserUpdateOne) AddNotifySourceIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddNotifySourceIDs(ids...)
	return uuo
}

// AddNotifySource adds the "notify_source" edges to the NotifySource entity.
func (uuo *UserUpdateOne) AddNotifySource(n ...*NotifySource) *UserUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotifySourceIDs(ids...)
}

// AddNotifyTargetIDs adds the "notify_target" edge to the NotifyTarget entity by IDs.
func (uuo *UserUpdateOne) AddNotifyTargetIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddNotifyTargetIDs(ids...)
	return uuo
}

// AddNotifyTarget adds the "notify_target" edges to the NotifyTarget entity.
func (uuo *UserUpdateOne) AddNotifyTarget(n ...*NotifyTarget) *UserUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotifyTargetIDs(ids...)
}

// AddNotifyFlowIDs adds the "notify_flow" edge to the NotifyFlow entity by IDs.
func (uuo *UserUpdateOne) AddNotifyFlowIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddNotifyFlowIDs(ids...)
	return uuo
}

// AddNotifyFlow adds the "notify_flow" edges to the NotifyFlow entity.
func (uuo *UserUpdateOne) AddNotifyFlow(n ...*NotifyFlow) *UserUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotifyFlowIDs(ids...)
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (uuo *UserUpdateOne) AddImageIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddImageIDs(ids...)
	return uuo
}

// AddImage adds the "image" edges to the Image entity.
func (uuo *UserUpdateOne) AddImage(i ...*Image) *UserUpdateOne {
	ids := make([]model.InternalID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddImageIDs(ids...)
}

// AddFileIDs adds the "file" edge to the File entity by IDs.
func (uuo *UserUpdateOne) AddFileIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddFileIDs(ids...)
	return uuo
}

// AddFile adds the "file" edges to the File entity.
func (uuo *UserUpdateOne) AddFile(f ...*File) *UserUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddFileIDs(ids...)
}

// AddTagIDs adds the "tag" edge to the Tag entity by IDs.
func (uuo *UserUpdateOne) AddTagIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddTagIDs(ids...)
	return uuo
}

// AddTag adds the "tag" edges to the Tag entity.
func (uuo *UserUpdateOne) AddTag(t ...*Tag) *UserUpdateOne {
	ids := make([]model.InternalID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTagIDs(ids...)
}

// AddPorterContextIDs adds the "porter_context" edge to the PorterContext entity by IDs.
func (uuo *UserUpdateOne) AddPorterContextIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddPorterContextIDs(ids...)
	return uuo
}

// AddPorterContext adds the "porter_context" edges to the PorterContext entity.
func (uuo *UserUpdateOne) AddPorterContext(p ...*PorterContext) *UserUpdateOne {
	ids := make([]model.InternalID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPorterContextIDs(ids...)
}

// AddCreatedUserIDs adds the "created_user" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddCreatedUserIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.AddCreatedUserIDs(ids...)
	return uuo
}

// AddCreatedUser adds the "created_user" edges to the User entity.
func (uuo *UserUpdateOne) AddCreatedUser(u ...*User) *UserUpdateOne {
	ids := make([]model.InternalID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddCreatedUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearSession clears all "session" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSession() *UserUpdateOne {
	uuo.mutation.ClearSession()
	return uuo
}

// RemoveSessionIDs removes the "session" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSession removes "session" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSession(s ...*Session) *UserUpdateOne {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearAccount clears all "account" edges to the Account entity.
func (uuo *UserUpdateOne) ClearAccount() *UserUpdateOne {
	uuo.mutation.ClearAccount()
	return uuo
}

// RemoveAccountIDs removes the "account" edge to Account entities by IDs.
func (uuo *UserUpdateOne) RemoveAccountIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveAccountIDs(ids...)
	return uuo
}

// RemoveAccount removes "account" edges to Account entities.
func (uuo *UserUpdateOne) RemoveAccount(a ...*Account) *UserUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAccountIDs(ids...)
}

// ClearApp clears all "app" edges to the App entity.
func (uuo *UserUpdateOne) ClearApp() *UserUpdateOne {
	uuo.mutation.ClearApp()
	return uuo
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (uuo *UserUpdateOne) RemoveAppIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveAppIDs(ids...)
	return uuo
}

// RemoveApp removes "app" edges to App entities.
func (uuo *UserUpdateOne) RemoveApp(a ...*App) *UserUpdateOne {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAppIDs(ids...)
}

// ClearFeedConfig clears all "feed_config" edges to the FeedConfig entity.
func (uuo *UserUpdateOne) ClearFeedConfig() *UserUpdateOne {
	uuo.mutation.ClearFeedConfig()
	return uuo
}

// RemoveFeedConfigIDs removes the "feed_config" edge to FeedConfig entities by IDs.
func (uuo *UserUpdateOne) RemoveFeedConfigIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveFeedConfigIDs(ids...)
	return uuo
}

// RemoveFeedConfig removes "feed_config" edges to FeedConfig entities.
func (uuo *UserUpdateOne) RemoveFeedConfig(f ...*FeedConfig) *UserUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveFeedConfigIDs(ids...)
}

// ClearFeedActionSet clears all "feed_action_set" edges to the FeedActionSet entity.
func (uuo *UserUpdateOne) ClearFeedActionSet() *UserUpdateOne {
	uuo.mutation.ClearFeedActionSet()
	return uuo
}

// RemoveFeedActionSetIDs removes the "feed_action_set" edge to FeedActionSet entities by IDs.
func (uuo *UserUpdateOne) RemoveFeedActionSetIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveFeedActionSetIDs(ids...)
	return uuo
}

// RemoveFeedActionSet removes "feed_action_set" edges to FeedActionSet entities.
func (uuo *UserUpdateOne) RemoveFeedActionSet(f ...*FeedActionSet) *UserUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveFeedActionSetIDs(ids...)
}

// ClearFeedItemCollection clears all "feed_item_collection" edges to the FeedItemCollection entity.
func (uuo *UserUpdateOne) ClearFeedItemCollection() *UserUpdateOne {
	uuo.mutation.ClearFeedItemCollection()
	return uuo
}

// RemoveFeedItemCollectionIDs removes the "feed_item_collection" edge to FeedItemCollection entities by IDs.
func (uuo *UserUpdateOne) RemoveFeedItemCollectionIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveFeedItemCollectionIDs(ids...)
	return uuo
}

// RemoveFeedItemCollection removes "feed_item_collection" edges to FeedItemCollection entities.
func (uuo *UserUpdateOne) RemoveFeedItemCollection(f ...*FeedItemCollection) *UserUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveFeedItemCollectionIDs(ids...)
}

// ClearNotifySource clears all "notify_source" edges to the NotifySource entity.
func (uuo *UserUpdateOne) ClearNotifySource() *UserUpdateOne {
	uuo.mutation.ClearNotifySource()
	return uuo
}

// RemoveNotifySourceIDs removes the "notify_source" edge to NotifySource entities by IDs.
func (uuo *UserUpdateOne) RemoveNotifySourceIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveNotifySourceIDs(ids...)
	return uuo
}

// RemoveNotifySource removes "notify_source" edges to NotifySource entities.
func (uuo *UserUpdateOne) RemoveNotifySource(n ...*NotifySource) *UserUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotifySourceIDs(ids...)
}

// ClearNotifyTarget clears all "notify_target" edges to the NotifyTarget entity.
func (uuo *UserUpdateOne) ClearNotifyTarget() *UserUpdateOne {
	uuo.mutation.ClearNotifyTarget()
	return uuo
}

// RemoveNotifyTargetIDs removes the "notify_target" edge to NotifyTarget entities by IDs.
func (uuo *UserUpdateOne) RemoveNotifyTargetIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveNotifyTargetIDs(ids...)
	return uuo
}

// RemoveNotifyTarget removes "notify_target" edges to NotifyTarget entities.
func (uuo *UserUpdateOne) RemoveNotifyTarget(n ...*NotifyTarget) *UserUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotifyTargetIDs(ids...)
}

// ClearNotifyFlow clears all "notify_flow" edges to the NotifyFlow entity.
func (uuo *UserUpdateOne) ClearNotifyFlow() *UserUpdateOne {
	uuo.mutation.ClearNotifyFlow()
	return uuo
}

// RemoveNotifyFlowIDs removes the "notify_flow" edge to NotifyFlow entities by IDs.
func (uuo *UserUpdateOne) RemoveNotifyFlowIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveNotifyFlowIDs(ids...)
	return uuo
}

// RemoveNotifyFlow removes "notify_flow" edges to NotifyFlow entities.
func (uuo *UserUpdateOne) RemoveNotifyFlow(n ...*NotifyFlow) *UserUpdateOne {
	ids := make([]model.InternalID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotifyFlowIDs(ids...)
}

// ClearImage clears all "image" edges to the Image entity.
func (uuo *UserUpdateOne) ClearImage() *UserUpdateOne {
	uuo.mutation.ClearImage()
	return uuo
}

// RemoveImageIDs removes the "image" edge to Image entities by IDs.
func (uuo *UserUpdateOne) RemoveImageIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveImageIDs(ids...)
	return uuo
}

// RemoveImage removes "image" edges to Image entities.
func (uuo *UserUpdateOne) RemoveImage(i ...*Image) *UserUpdateOne {
	ids := make([]model.InternalID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveImageIDs(ids...)
}

// ClearFile clears all "file" edges to the File entity.
func (uuo *UserUpdateOne) ClearFile() *UserUpdateOne {
	uuo.mutation.ClearFile()
	return uuo
}

// RemoveFileIDs removes the "file" edge to File entities by IDs.
func (uuo *UserUpdateOne) RemoveFileIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveFileIDs(ids...)
	return uuo
}

// RemoveFile removes "file" edges to File entities.
func (uuo *UserUpdateOne) RemoveFile(f ...*File) *UserUpdateOne {
	ids := make([]model.InternalID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveFileIDs(ids...)
}

// ClearTag clears all "tag" edges to the Tag entity.
func (uuo *UserUpdateOne) ClearTag() *UserUpdateOne {
	uuo.mutation.ClearTag()
	return uuo
}

// RemoveTagIDs removes the "tag" edge to Tag entities by IDs.
func (uuo *UserUpdateOne) RemoveTagIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveTagIDs(ids...)
	return uuo
}

// RemoveTag removes "tag" edges to Tag entities.
func (uuo *UserUpdateOne) RemoveTag(t ...*Tag) *UserUpdateOne {
	ids := make([]model.InternalID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTagIDs(ids...)
}

// ClearPorterContext clears all "porter_context" edges to the PorterContext entity.
func (uuo *UserUpdateOne) ClearPorterContext() *UserUpdateOne {
	uuo.mutation.ClearPorterContext()
	return uuo
}

// RemovePorterContextIDs removes the "porter_context" edge to PorterContext entities by IDs.
func (uuo *UserUpdateOne) RemovePorterContextIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemovePorterContextIDs(ids...)
	return uuo
}

// RemovePorterContext removes "porter_context" edges to PorterContext entities.
func (uuo *UserUpdateOne) RemovePorterContext(p ...*PorterContext) *UserUpdateOne {
	ids := make([]model.InternalID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePorterContextIDs(ids...)
}

// ClearCreatedUser clears all "created_user" edges to the User entity.
func (uuo *UserUpdateOne) ClearCreatedUser() *UserUpdateOne {
	uuo.mutation.ClearCreatedUser()
	return uuo
}

// RemoveCreatedUserIDs removes the "created_user" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedUserIDs(ids ...model.InternalID) *UserUpdateOne {
	uuo.mutation.RemoveCreatedUserIDs(ids...)
	return uuo
}

// RemoveCreatedUser removes "created_user" edges to User entities.
func (uuo *UserUpdateOne) RemoveCreatedUser(u ...*User) *UserUpdateOne {
	ids := make([]model.InternalID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveCreatedUserIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	if uuo.mutation.CreatorCleared() && len(uuo.mutation.CreatorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.creator"`)
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionTable,
			Columns: []string{user.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionIDs(); len(nodes) > 0 && !uuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionTable,
			Columns: []string{user.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionTable,
			Columns: []string{user.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountTable,
			Columns: []string{user.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAccountIDs(); len(nodes) > 0 && !uuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountTable,
			Columns: []string{user.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccountTable,
			Columns: []string{user.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAppIDs(); len(nodes) > 0 && !uuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AppTable,
			Columns: []string{user.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedConfigTable,
			Columns: []string{user.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFeedConfigIDs(); len(nodes) > 0 && !uuo.mutation.FeedConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedConfigTable,
			Columns: []string{user.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FeedConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedConfigTable,
			Columns: []string{user.FeedConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedconfig.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedActionSetTable,
			Columns: []string{user.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFeedActionSetIDs(); len(nodes) > 0 && !uuo.mutation.FeedActionSetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedActionSetTable,
			Columns: []string{user.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FeedActionSetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedActionSetTable,
			Columns: []string{user.FeedActionSetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feedactionset.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FeedItemCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedItemCollectionTable,
			Columns: []string{user.FeedItemCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFeedItemCollectionIDs(); len(nodes) > 0 && !uuo.mutation.FeedItemCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedItemCollectionTable,
			Columns: []string{user.FeedItemCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FeedItemCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FeedItemCollectionTable,
			Columns: []string{user.FeedItemCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeditemcollection.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifySourceTable,
			Columns: []string{user.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotifySourceIDs(); len(nodes) > 0 && !uuo.mutation.NotifySourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifySourceTable,
			Columns: []string{user.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotifySourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifySourceTable,
			Columns: []string{user.NotifySourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifysource.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotifyTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTargetTable,
			Columns: []string{user.NotifyTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotifyTargetIDs(); len(nodes) > 0 && !uuo.mutation.NotifyTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTargetTable,
			Columns: []string{user.NotifyTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotifyTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyTargetTable,
			Columns: []string{user.NotifyTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifytarget.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotifyFlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyFlowTable,
			Columns: []string{user.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotifyFlowIDs(); len(nodes) > 0 && !uuo.mutation.NotifyFlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyFlowTable,
			Columns: []string{user.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotifyFlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotifyFlowTable,
			Columns: []string{user.NotifyFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notifyflow.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImageTable,
			Columns: []string{user.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedImageIDs(); len(nodes) > 0 && !uuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImageTable,
			Columns: []string{user.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImageTable,
			Columns: []string{user.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FileTable,
			Columns: []string{user.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFileIDs(); len(nodes) > 0 && !uuo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FileTable,
			Columns: []string{user.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FileTable,
			Columns: []string{user.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagTable,
			Columns: []string{user.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTagIDs(); len(nodes) > 0 && !uuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagTable,
			Columns: []string{user.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TagTable,
			Columns: []string{user.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PorterContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PorterContextTable,
			Columns: []string{user.PorterContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPorterContextIDs(); len(nodes) > 0 && !uuo.mutation.PorterContextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PorterContextTable,
			Columns: []string{user.PorterContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PorterContextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PorterContextTable,
			Columns: []string{user.PorterContextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(portercontext.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUserTable,
			Columns: []string{user.CreatedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedUserIDs(); len(nodes) > 0 && !uuo.mutation.CreatedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUserTable,
			Columns: []string{user.CreatedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreatedUserTable,
			Columns: []string{user.CreatedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
