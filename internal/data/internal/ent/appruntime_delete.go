// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/appruntime"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
)

// AppRunTimeDelete is the builder for deleting a AppRunTime entity.
type AppRunTimeDelete struct {
	config
	hooks    []Hook
	mutation *AppRunTimeMutation
}

// Where appends a list predicates to the AppRunTimeDelete builder.
func (artd *AppRunTimeDelete) Where(ps ...predicate.AppRunTime) *AppRunTimeDelete {
	artd.mutation.Where(ps...)
	return artd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (artd *AppRunTimeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, artd.sqlExec, artd.mutation, artd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (artd *AppRunTimeDelete) ExecX(ctx context.Context) int {
	n, err := artd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (artd *AppRunTimeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(appruntime.Table, sqlgraph.NewFieldSpec(appruntime.FieldID, field.TypeInt))
	if ps := artd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, artd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	artd.mutation.done = true
	return affected, err
}

// AppRunTimeDeleteOne is the builder for deleting a single AppRunTime entity.
type AppRunTimeDeleteOne struct {
	artd *AppRunTimeDelete
}

// Where appends a list predicates to the AppRunTimeDelete builder.
func (artdo *AppRunTimeDeleteOne) Where(ps ...predicate.AppRunTime) *AppRunTimeDeleteOne {
	artdo.artd.mutation.Where(ps...)
	return artdo
}

// Exec executes the deletion query.
func (artdo *AppRunTimeDeleteOne) Exec(ctx context.Context) error {
	n, err := artdo.artd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{appruntime.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (artdo *AppRunTimeDeleteOne) ExecX(ctx context.Context) {
	if err := artdo.Exec(ctx); err != nil {
		panic(err)
	}
}
