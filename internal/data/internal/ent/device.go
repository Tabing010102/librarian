// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/device"
	"github.com/tuihub/librarian/internal/model"
)

// Device is the model entity for the Device schema.
type Device struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName string `json:"device_name,omitempty"`
	// SystemType holds the value of the "system_type" field.
	SystemType device.SystemType `json:"system_type,omitempty"`
	// SystemVersion holds the value of the "system_version" field.
	SystemVersion string `json:"system_version,omitempty"`
	// ClientName holds the value of the "client_name" field.
	ClientName string `json:"client_name,omitempty"`
	// ClientSourceCodeAddress holds the value of the "client_source_code_address" field.
	ClientSourceCodeAddress string `json:"client_source_code_address,omitempty"`
	// ClientVersion holds the value of the "client_version" field.
	ClientVersion string `json:"client_version,omitempty"`
	// ClientLocalID holds the value of the "client_local_id" field.
	ClientLocalID string `json:"client_local_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeviceQuery when eager-loading is set.
	Edges        DeviceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DeviceEdges holds the relations/edges for other nodes in the graph.
type DeviceEdges struct {
	// Session holds the value of the session edge.
	Session []*Session `json:"session,omitempty"`
	// App holds the value of the app edge.
	App []*App `json:"app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceEdges) SessionOrErr() ([]*Session, error) {
	if e.loadedTypes[0] {
		return e.Session, nil
	}
	return nil, &NotLoadedError{edge: "session"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e DeviceEdges) AppOrErr() ([]*App, error) {
	if e.loadedTypes[1] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Device) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case device.FieldID:
			values[i] = new(sql.NullInt64)
		case device.FieldDeviceName, device.FieldSystemType, device.FieldSystemVersion, device.FieldClientName, device.FieldClientSourceCodeAddress, device.FieldClientVersion, device.FieldClientLocalID:
			values[i] = new(sql.NullString)
		case device.FieldUpdatedAt, device.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Device fields.
func (d *Device) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case device.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = model.InternalID(value.Int64)
			}
		case device.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				d.DeviceName = value.String
			}
		case device.FieldSystemType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_type", values[i])
			} else if value.Valid {
				d.SystemType = device.SystemType(value.String)
			}
		case device.FieldSystemVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_version", values[i])
			} else if value.Valid {
				d.SystemVersion = value.String
			}
		case device.FieldClientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_name", values[i])
			} else if value.Valid {
				d.ClientName = value.String
			}
		case device.FieldClientSourceCodeAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_source_code_address", values[i])
			} else if value.Valid {
				d.ClientSourceCodeAddress = value.String
			}
		case device.FieldClientVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_version", values[i])
			} else if value.Valid {
				d.ClientVersion = value.String
			}
		case device.FieldClientLocalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_local_id", values[i])
			} else if value.Valid {
				d.ClientLocalID = value.String
			}
		case device.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case device.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Device.
// This includes values selected through modifiers, order, etc.
func (d *Device) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the Device entity.
func (d *Device) QuerySession() *SessionQuery {
	return NewDeviceClient(d.config).QuerySession(d)
}

// QueryApp queries the "app" edge of the Device entity.
func (d *Device) QueryApp() *AppQuery {
	return NewDeviceClient(d.config).QueryApp(d)
}

// Update returns a builder for updating this Device.
// Note that you need to call Device.Unwrap() before calling this method if this Device
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Device) Update() *DeviceUpdateOne {
	return NewDeviceClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Device entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Device) Unwrap() *Device {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Device is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Device) String() string {
	var builder strings.Builder
	builder.WriteString("Device(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("device_name=")
	builder.WriteString(d.DeviceName)
	builder.WriteString(", ")
	builder.WriteString("system_type=")
	builder.WriteString(fmt.Sprintf("%v", d.SystemType))
	builder.WriteString(", ")
	builder.WriteString("system_version=")
	builder.WriteString(d.SystemVersion)
	builder.WriteString(", ")
	builder.WriteString("client_name=")
	builder.WriteString(d.ClientName)
	builder.WriteString(", ")
	builder.WriteString("client_source_code_address=")
	builder.WriteString(d.ClientSourceCodeAddress)
	builder.WriteString(", ")
	builder.WriteString("client_version=")
	builder.WriteString(d.ClientVersion)
	builder.WriteString(", ")
	builder.WriteString("client_local_id=")
	builder.WriteString(d.ClientLocalID)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Devices is a parsable slice of Device.
type Devices []*Device
