// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeappbinary"
)

// StoreAppBinaryDelete is the builder for deleting a StoreAppBinary entity.
type StoreAppBinaryDelete struct {
	config
	hooks    []Hook
	mutation *StoreAppBinaryMutation
}

// Where appends a list predicates to the StoreAppBinaryDelete builder.
func (sabd *StoreAppBinaryDelete) Where(ps ...predicate.StoreAppBinary) *StoreAppBinaryDelete {
	sabd.mutation.Where(ps...)
	return sabd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sabd *StoreAppBinaryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sabd.sqlExec, sabd.mutation, sabd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sabd *StoreAppBinaryDelete) ExecX(ctx context.Context) int {
	n, err := sabd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sabd *StoreAppBinaryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(storeappbinary.Table, sqlgraph.NewFieldSpec(storeappbinary.FieldID, field.TypeInt64))
	if ps := sabd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sabd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sabd.mutation.done = true
	return affected, err
}

// StoreAppBinaryDeleteOne is the builder for deleting a single StoreAppBinary entity.
type StoreAppBinaryDeleteOne struct {
	sabd *StoreAppBinaryDelete
}

// Where appends a list predicates to the StoreAppBinaryDelete builder.
func (sabdo *StoreAppBinaryDeleteOne) Where(ps ...predicate.StoreAppBinary) *StoreAppBinaryDeleteOne {
	sabdo.sabd.mutation.Where(ps...)
	return sabdo
}

// Exec executes the deletion query.
func (sabdo *StoreAppBinaryDeleteOne) Exec(ctx context.Context) error {
	n, err := sabdo.sabd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{storeappbinary.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sabdo *StoreAppBinaryDeleteOne) ExecX(ctx context.Context) {
	if err := sabdo.Exec(ctx); err != nil {
		panic(err)
	}
}
