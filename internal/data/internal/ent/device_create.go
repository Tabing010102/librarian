// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/device"
	"github.com/tuihub/librarian/internal/data/internal/ent/session"
	"github.com/tuihub/librarian/internal/model"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeviceName sets the "device_name" field.
func (dc *DeviceCreate) SetDeviceName(s string) *DeviceCreate {
	dc.mutation.SetDeviceName(s)
	return dc
}

// SetSystemType sets the "system_type" field.
func (dc *DeviceCreate) SetSystemType(dt device.SystemType) *DeviceCreate {
	dc.mutation.SetSystemType(dt)
	return dc
}

// SetSystemVersion sets the "system_version" field.
func (dc *DeviceCreate) SetSystemVersion(s string) *DeviceCreate {
	dc.mutation.SetSystemVersion(s)
	return dc
}

// SetClientName sets the "client_name" field.
func (dc *DeviceCreate) SetClientName(s string) *DeviceCreate {
	dc.mutation.SetClientName(s)
	return dc
}

// SetClientSourceCodeAddress sets the "client_source_code_address" field.
func (dc *DeviceCreate) SetClientSourceCodeAddress(s string) *DeviceCreate {
	dc.mutation.SetClientSourceCodeAddress(s)
	return dc
}

// SetClientVersion sets the "client_version" field.
func (dc *DeviceCreate) SetClientVersion(s string) *DeviceCreate {
	dc.mutation.SetClientVersion(s)
	return dc
}

// SetClientLocalID sets the "client_local_id" field.
func (dc *DeviceCreate) SetClientLocalID(s string) *DeviceCreate {
	dc.mutation.SetClientLocalID(s)
	return dc
}

// SetNillableClientLocalID sets the "client_local_id" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableClientLocalID(s *string) *DeviceCreate {
	if s != nil {
		dc.SetClientLocalID(*s)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DeviceCreate) SetUpdatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableUpdatedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DeviceCreate) SetCreatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableCreatedAt(t *time.Time) *DeviceCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DeviceCreate) SetID(mi model.InternalID) *DeviceCreate {
	dc.mutation.SetID(mi)
	return dc
}

// AddSessionIDs adds the "session" edge to the Session entity by IDs.
func (dc *DeviceCreate) AddSessionIDs(ids ...model.InternalID) *DeviceCreate {
	dc.mutation.AddSessionIDs(ids...)
	return dc
}

// AddSession adds the "session" edges to the Session entity.
func (dc *DeviceCreate) AddSession(s ...*Session) *DeviceCreate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dc.AddSessionIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (dc *DeviceCreate) AddAppIDs(ids ...model.InternalID) *DeviceCreate {
	dc.mutation.AddAppIDs(ids...)
	return dc
}

// AddApp adds the "app" edges to the App entity.
func (dc *DeviceCreate) AddApp(a ...*App) *DeviceCreate {
	ids := make([]model.InternalID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dc.AddAppIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (dc *DeviceCreate) Mutation() *DeviceMutation {
	return dc.mutation
}

// Save creates the Device in the database.
func (dc *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeviceCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeviceCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeviceCreate) defaults() {
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := device.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := device.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeviceCreate) check() error {
	if _, ok := dc.mutation.DeviceName(); !ok {
		return &ValidationError{Name: "device_name", err: errors.New(`ent: missing required field "Device.device_name"`)}
	}
	if _, ok := dc.mutation.SystemType(); !ok {
		return &ValidationError{Name: "system_type", err: errors.New(`ent: missing required field "Device.system_type"`)}
	}
	if v, ok := dc.mutation.SystemType(); ok {
		if err := device.SystemTypeValidator(v); err != nil {
			return &ValidationError{Name: "system_type", err: fmt.Errorf(`ent: validator failed for field "Device.system_type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.SystemVersion(); !ok {
		return &ValidationError{Name: "system_version", err: errors.New(`ent: missing required field "Device.system_version"`)}
	}
	if _, ok := dc.mutation.ClientName(); !ok {
		return &ValidationError{Name: "client_name", err: errors.New(`ent: missing required field "Device.client_name"`)}
	}
	if _, ok := dc.mutation.ClientSourceCodeAddress(); !ok {
		return &ValidationError{Name: "client_source_code_address", err: errors.New(`ent: missing required field "Device.client_source_code_address"`)}
	}
	if _, ok := dc.mutation.ClientVersion(); !ok {
		return &ValidationError{Name: "client_version", err: errors.New(`ent: missing required field "Device.client_version"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Device.updated_at"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Device.created_at"`)}
	}
	return nil
}

func (dc *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec) {
	var (
		_node = &Device{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(device.Table, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.DeviceName(); ok {
		_spec.SetField(device.FieldDeviceName, field.TypeString, value)
		_node.DeviceName = value
	}
	if value, ok := dc.mutation.SystemType(); ok {
		_spec.SetField(device.FieldSystemType, field.TypeEnum, value)
		_node.SystemType = value
	}
	if value, ok := dc.mutation.SystemVersion(); ok {
		_spec.SetField(device.FieldSystemVersion, field.TypeString, value)
		_node.SystemVersion = value
	}
	if value, ok := dc.mutation.ClientName(); ok {
		_spec.SetField(device.FieldClientName, field.TypeString, value)
		_node.ClientName = value
	}
	if value, ok := dc.mutation.ClientSourceCodeAddress(); ok {
		_spec.SetField(device.FieldClientSourceCodeAddress, field.TypeString, value)
		_node.ClientSourceCodeAddress = value
	}
	if value, ok := dc.mutation.ClientVersion(); ok {
		_spec.SetField(device.FieldClientVersion, field.TypeString, value)
		_node.ClientVersion = value
	}
	if value, ok := dc.mutation.ClientLocalID(); ok {
		_spec.SetField(device.FieldClientLocalID, field.TypeString, value)
		_node.ClientLocalID = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(device.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := dc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.SessionTable,
			Columns: []string{device.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.AppTable,
			Columns: []string{device.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Device.Create().
//		SetDeviceName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceUpsert) {
//			SetDeviceName(v+v).
//		}).
//		Exec(ctx)
func (dc *DeviceCreate) OnConflict(opts ...sql.ConflictOption) *DeviceUpsertOne {
	dc.conflict = opts
	return &DeviceUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DeviceCreate) OnConflictColumns(columns ...string) *DeviceUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DeviceUpsertOne{
		create: dc,
	}
}

type (
	// DeviceUpsertOne is the builder for "upsert"-ing
	//  one Device node.
	DeviceUpsertOne struct {
		create *DeviceCreate
	}

	// DeviceUpsert is the "OnConflict" setter.
	DeviceUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeviceName sets the "device_name" field.
func (u *DeviceUpsert) SetDeviceName(v string) *DeviceUpsert {
	u.Set(device.FieldDeviceName, v)
	return u
}

// UpdateDeviceName sets the "device_name" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateDeviceName() *DeviceUpsert {
	u.SetExcluded(device.FieldDeviceName)
	return u
}

// SetSystemType sets the "system_type" field.
func (u *DeviceUpsert) SetSystemType(v device.SystemType) *DeviceUpsert {
	u.Set(device.FieldSystemType, v)
	return u
}

// UpdateSystemType sets the "system_type" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateSystemType() *DeviceUpsert {
	u.SetExcluded(device.FieldSystemType)
	return u
}

// SetSystemVersion sets the "system_version" field.
func (u *DeviceUpsert) SetSystemVersion(v string) *DeviceUpsert {
	u.Set(device.FieldSystemVersion, v)
	return u
}

// UpdateSystemVersion sets the "system_version" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateSystemVersion() *DeviceUpsert {
	u.SetExcluded(device.FieldSystemVersion)
	return u
}

// SetClientName sets the "client_name" field.
func (u *DeviceUpsert) SetClientName(v string) *DeviceUpsert {
	u.Set(device.FieldClientName, v)
	return u
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateClientName() *DeviceUpsert {
	u.SetExcluded(device.FieldClientName)
	return u
}

// SetClientSourceCodeAddress sets the "client_source_code_address" field.
func (u *DeviceUpsert) SetClientSourceCodeAddress(v string) *DeviceUpsert {
	u.Set(device.FieldClientSourceCodeAddress, v)
	return u
}

// UpdateClientSourceCodeAddress sets the "client_source_code_address" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateClientSourceCodeAddress() *DeviceUpsert {
	u.SetExcluded(device.FieldClientSourceCodeAddress)
	return u
}

// SetClientVersion sets the "client_version" field.
func (u *DeviceUpsert) SetClientVersion(v string) *DeviceUpsert {
	u.Set(device.FieldClientVersion, v)
	return u
}

// UpdateClientVersion sets the "client_version" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateClientVersion() *DeviceUpsert {
	u.SetExcluded(device.FieldClientVersion)
	return u
}

// SetClientLocalID sets the "client_local_id" field.
func (u *DeviceUpsert) SetClientLocalID(v string) *DeviceUpsert {
	u.Set(device.FieldClientLocalID, v)
	return u
}

// UpdateClientLocalID sets the "client_local_id" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateClientLocalID() *DeviceUpsert {
	u.SetExcluded(device.FieldClientLocalID)
	return u
}

// ClearClientLocalID clears the value of the "client_local_id" field.
func (u *DeviceUpsert) ClearClientLocalID() *DeviceUpsert {
	u.SetNull(device.FieldClientLocalID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsert) SetUpdatedAt(v time.Time) *DeviceUpsert {
	u.Set(device.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateUpdatedAt() *DeviceUpsert {
	u.SetExcluded(device.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeviceUpsert) SetCreatedAt(v time.Time) *DeviceUpsert {
	u.Set(device.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeviceUpsert) UpdateCreatedAt() *DeviceUpsert {
	u.SetExcluded(device.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(device.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceUpsertOne) UpdateNewValues() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(device.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeviceUpsertOne) Ignore() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceUpsertOne) DoNothing() *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceCreate.OnConflict
// documentation for more info.
func (u *DeviceUpsertOne) Update(set func(*DeviceUpsert)) *DeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeviceName sets the "device_name" field.
func (u *DeviceUpsertOne) SetDeviceName(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDeviceName(v)
	})
}

// UpdateDeviceName sets the "device_name" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateDeviceName() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDeviceName()
	})
}

// SetSystemType sets the "system_type" field.
func (u *DeviceUpsertOne) SetSystemType(v device.SystemType) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSystemType(v)
	})
}

// UpdateSystemType sets the "system_type" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateSystemType() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSystemType()
	})
}

// SetSystemVersion sets the "system_version" field.
func (u *DeviceUpsertOne) SetSystemVersion(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSystemVersion(v)
	})
}

// UpdateSystemVersion sets the "system_version" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateSystemVersion() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSystemVersion()
	})
}

// SetClientName sets the "client_name" field.
func (u *DeviceUpsertOne) SetClientName(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetClientName(v)
	})
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateClientName() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateClientName()
	})
}

// SetClientSourceCodeAddress sets the "client_source_code_address" field.
func (u *DeviceUpsertOne) SetClientSourceCodeAddress(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetClientSourceCodeAddress(v)
	})
}

// UpdateClientSourceCodeAddress sets the "client_source_code_address" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateClientSourceCodeAddress() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateClientSourceCodeAddress()
	})
}

// SetClientVersion sets the "client_version" field.
func (u *DeviceUpsertOne) SetClientVersion(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetClientVersion(v)
	})
}

// UpdateClientVersion sets the "client_version" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateClientVersion() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateClientVersion()
	})
}

// SetClientLocalID sets the "client_local_id" field.
func (u *DeviceUpsertOne) SetClientLocalID(v string) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetClientLocalID(v)
	})
}

// UpdateClientLocalID sets the "client_local_id" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateClientLocalID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateClientLocalID()
	})
}

// ClearClientLocalID clears the value of the "client_local_id" field.
func (u *DeviceUpsertOne) ClearClientLocalID() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearClientLocalID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsertOne) SetUpdatedAt(v time.Time) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateUpdatedAt() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DeviceUpsertOne) SetCreatedAt(v time.Time) *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeviceUpsertOne) UpdateCreatedAt() *DeviceUpsertOne {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *DeviceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeviceUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeviceUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeviceCreateBulk is the builder for creating many Device entities in bulk.
type DeviceCreateBulk struct {
	config
	err      error
	builders []*DeviceCreate
	conflict []sql.ConflictOption
}

// Save creates the Device entities in the database.
func (dcb *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Device, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeviceCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Device.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceUpsert) {
//			SetDeviceName(v+v).
//		}).
//		Exec(ctx)
func (dcb *DeviceCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeviceUpsertBulk {
	dcb.conflict = opts
	return &DeviceUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DeviceCreateBulk) OnConflictColumns(columns ...string) *DeviceUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DeviceUpsertBulk{
		create: dcb,
	}
}

// DeviceUpsertBulk is the builder for "upsert"-ing
// a bulk of Device nodes.
type DeviceUpsertBulk struct {
	create *DeviceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(device.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeviceUpsertBulk) UpdateNewValues() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(device.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Device.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeviceUpsertBulk) Ignore() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceUpsertBulk) DoNothing() *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceCreateBulk.OnConflict
// documentation for more info.
func (u *DeviceUpsertBulk) Update(set func(*DeviceUpsert)) *DeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeviceName sets the "device_name" field.
func (u *DeviceUpsertBulk) SetDeviceName(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetDeviceName(v)
	})
}

// UpdateDeviceName sets the "device_name" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateDeviceName() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateDeviceName()
	})
}

// SetSystemType sets the "system_type" field.
func (u *DeviceUpsertBulk) SetSystemType(v device.SystemType) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSystemType(v)
	})
}

// UpdateSystemType sets the "system_type" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateSystemType() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSystemType()
	})
}

// SetSystemVersion sets the "system_version" field.
func (u *DeviceUpsertBulk) SetSystemVersion(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetSystemVersion(v)
	})
}

// UpdateSystemVersion sets the "system_version" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateSystemVersion() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateSystemVersion()
	})
}

// SetClientName sets the "client_name" field.
func (u *DeviceUpsertBulk) SetClientName(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetClientName(v)
	})
}

// UpdateClientName sets the "client_name" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateClientName() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateClientName()
	})
}

// SetClientSourceCodeAddress sets the "client_source_code_address" field.
func (u *DeviceUpsertBulk) SetClientSourceCodeAddress(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetClientSourceCodeAddress(v)
	})
}

// UpdateClientSourceCodeAddress sets the "client_source_code_address" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateClientSourceCodeAddress() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateClientSourceCodeAddress()
	})
}

// SetClientVersion sets the "client_version" field.
func (u *DeviceUpsertBulk) SetClientVersion(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetClientVersion(v)
	})
}

// UpdateClientVersion sets the "client_version" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateClientVersion() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateClientVersion()
	})
}

// SetClientLocalID sets the "client_local_id" field.
func (u *DeviceUpsertBulk) SetClientLocalID(v string) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetClientLocalID(v)
	})
}

// UpdateClientLocalID sets the "client_local_id" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateClientLocalID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateClientLocalID()
	})
}

// ClearClientLocalID clears the value of the "client_local_id" field.
func (u *DeviceUpsertBulk) ClearClientLocalID() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.ClearClientLocalID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeviceUpsertBulk) SetUpdatedAt(v time.Time) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateUpdatedAt() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *DeviceUpsertBulk) SetCreatedAt(v time.Time) *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeviceUpsertBulk) UpdateCreatedAt() *DeviceUpsertBulk {
	return u.Update(func(s *DeviceUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *DeviceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeviceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
