// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinel"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelsession"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelSession is the model entity for the SentinelSession schema.
type SentinelSession struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// SentinelID holds the value of the "sentinel_id" field.
	SentinelID model.InternalID `json:"sentinel_id,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	// ExpireAt holds the value of the "expire_at" field.
	ExpireAt time.Time `json:"expire_at,omitempty"`
	// Status holds the value of the "status" field.
	Status sentinelsession.Status `json:"status,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID model.InternalID `json:"creator_id,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`
	// LastRefreshedAt holds the value of the "last_refreshed_at" field.
	LastRefreshedAt *time.Time `json:"last_refreshed_at,omitempty"`
	// RefreshCount holds the value of the "refresh_count" field.
	RefreshCount int64 `json:"refresh_count,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SentinelSessionQuery when eager-loading is set.
	Edges        SentinelSessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SentinelSessionEdges holds the relations/edges for other nodes in the graph.
type SentinelSessionEdges struct {
	// Sentinel holds the value of the sentinel edge.
	Sentinel *Sentinel `json:"sentinel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SentinelOrErr returns the Sentinel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SentinelSessionEdges) SentinelOrErr() (*Sentinel, error) {
	if e.Sentinel != nil {
		return e.Sentinel, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sentinel.Label}
	}
	return nil, &NotLoadedError{edge: "sentinel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SentinelSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sentinelsession.FieldID, sentinelsession.FieldSentinelID, sentinelsession.FieldCreatorID, sentinelsession.FieldRefreshCount:
			values[i] = new(sql.NullInt64)
		case sentinelsession.FieldRefreshToken, sentinelsession.FieldStatus:
			values[i] = new(sql.NullString)
		case sentinelsession.FieldExpireAt, sentinelsession.FieldLastUsedAt, sentinelsession.FieldLastRefreshedAt, sentinelsession.FieldUpdatedAt, sentinelsession.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SentinelSession fields.
func (ss *SentinelSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sentinelsession.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ss.ID = model.InternalID(value.Int64)
			}
		case sentinelsession.FieldSentinelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sentinel_id", values[i])
			} else if value.Valid {
				ss.SentinelID = model.InternalID(value.Int64)
			}
		case sentinelsession.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				ss.RefreshToken = value.String
			}
		case sentinelsession.FieldExpireAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_at", values[i])
			} else if value.Valid {
				ss.ExpireAt = value.Time
			}
		case sentinelsession.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ss.Status = sentinelsession.Status(value.String)
			}
		case sentinelsession.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				ss.CreatorID = model.InternalID(value.Int64)
			}
		case sentinelsession.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				ss.LastUsedAt = new(time.Time)
				*ss.LastUsedAt = value.Time
			}
		case sentinelsession.FieldLastRefreshedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_refreshed_at", values[i])
			} else if value.Valid {
				ss.LastRefreshedAt = new(time.Time)
				*ss.LastRefreshedAt = value.Time
			}
		case sentinelsession.FieldRefreshCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_count", values[i])
			} else if value.Valid {
				ss.RefreshCount = value.Int64
			}
		case sentinelsession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ss.UpdatedAt = value.Time
			}
		case sentinelsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ss.CreatedAt = value.Time
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SentinelSession.
// This includes values selected through modifiers, order, etc.
func (ss *SentinelSession) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QuerySentinel queries the "sentinel" edge of the SentinelSession entity.
func (ss *SentinelSession) QuerySentinel() *SentinelQuery {
	return NewSentinelSessionClient(ss.config).QuerySentinel(ss)
}

// Update returns a builder for updating this SentinelSession.
// Note that you need to call SentinelSession.Unwrap() before calling this method if this SentinelSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SentinelSession) Update() *SentinelSessionUpdateOne {
	return NewSentinelSessionClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SentinelSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SentinelSession) Unwrap() *SentinelSession {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SentinelSession is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SentinelSession) String() string {
	var builder strings.Builder
	builder.WriteString("SentinelSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("sentinel_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.SentinelID))
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(ss.RefreshToken)
	builder.WriteString(", ")
	builder.WriteString("expire_at=")
	builder.WriteString(ss.ExpireAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ss.Status))
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.CreatorID))
	builder.WriteString(", ")
	if v := ss.LastUsedAt; v != nil {
		builder.WriteString("last_used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ss.LastRefreshedAt; v != nil {
		builder.WriteString("last_refreshed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("refresh_count=")
	builder.WriteString(fmt.Sprintf("%v", ss.RefreshCount))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ss.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ss.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SentinelSessions is a parsable slice of SentinelSession.
type SentinelSessions []*SentinelSession
