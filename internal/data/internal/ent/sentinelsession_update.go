// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinel"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelsession"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelSessionUpdate is the builder for updating SentinelSession entities.
type SentinelSessionUpdate struct {
	config
	hooks    []Hook
	mutation *SentinelSessionMutation
}

// Where appends a list predicates to the SentinelSessionUpdate builder.
func (ssu *SentinelSessionUpdate) Where(ps ...predicate.SentinelSession) *SentinelSessionUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetSentinelID sets the "sentinel_id" field.
func (ssu *SentinelSessionUpdate) SetSentinelID(mi model.InternalID) *SentinelSessionUpdate {
	ssu.mutation.SetSentinelID(mi)
	return ssu
}

// SetNillableSentinelID sets the "sentinel_id" field if the given value is not nil.
func (ssu *SentinelSessionUpdate) SetNillableSentinelID(mi *model.InternalID) *SentinelSessionUpdate {
	if mi != nil {
		ssu.SetSentinelID(*mi)
	}
	return ssu
}

// SetRefreshToken sets the "refresh_token" field.
func (ssu *SentinelSessionUpdate) SetRefreshToken(s string) *SentinelSessionUpdate {
	ssu.mutation.SetRefreshToken(s)
	return ssu
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (ssu *SentinelSessionUpdate) SetNillableRefreshToken(s *string) *SentinelSessionUpdate {
	if s != nil {
		ssu.SetRefreshToken(*s)
	}
	return ssu
}

// SetExpireAt sets the "expire_at" field.
func (ssu *SentinelSessionUpdate) SetExpireAt(t time.Time) *SentinelSessionUpdate {
	ssu.mutation.SetExpireAt(t)
	return ssu
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (ssu *SentinelSessionUpdate) SetNillableExpireAt(t *time.Time) *SentinelSessionUpdate {
	if t != nil {
		ssu.SetExpireAt(*t)
	}
	return ssu
}

// SetStatus sets the "status" field.
func (ssu *SentinelSessionUpdate) SetStatus(s sentinelsession.Status) *SentinelSessionUpdate {
	ssu.mutation.SetStatus(s)
	return ssu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ssu *SentinelSessionUpdate) SetNillableStatus(s *sentinelsession.Status) *SentinelSessionUpdate {
	if s != nil {
		ssu.SetStatus(*s)
	}
	return ssu
}

// SetLastUsedAt sets the "last_used_at" field.
func (ssu *SentinelSessionUpdate) SetLastUsedAt(t time.Time) *SentinelSessionUpdate {
	ssu.mutation.SetLastUsedAt(t)
	return ssu
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (ssu *SentinelSessionUpdate) SetNillableLastUsedAt(t *time.Time) *SentinelSessionUpdate {
	if t != nil {
		ssu.SetLastUsedAt(*t)
	}
	return ssu
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (ssu *SentinelSessionUpdate) ClearLastUsedAt() *SentinelSessionUpdate {
	ssu.mutation.ClearLastUsedAt()
	return ssu
}

// SetLastRefreshedAt sets the "last_refreshed_at" field.
func (ssu *SentinelSessionUpdate) SetLastRefreshedAt(t time.Time) *SentinelSessionUpdate {
	ssu.mutation.SetLastRefreshedAt(t)
	return ssu
}

// SetNillableLastRefreshedAt sets the "last_refreshed_at" field if the given value is not nil.
func (ssu *SentinelSessionUpdate) SetNillableLastRefreshedAt(t *time.Time) *SentinelSessionUpdate {
	if t != nil {
		ssu.SetLastRefreshedAt(*t)
	}
	return ssu
}

// ClearLastRefreshedAt clears the value of the "last_refreshed_at" field.
func (ssu *SentinelSessionUpdate) ClearLastRefreshedAt() *SentinelSessionUpdate {
	ssu.mutation.ClearLastRefreshedAt()
	return ssu
}

// SetRefreshCount sets the "refresh_count" field.
func (ssu *SentinelSessionUpdate) SetRefreshCount(i int64) *SentinelSessionUpdate {
	ssu.mutation.ResetRefreshCount()
	ssu.mutation.SetRefreshCount(i)
	return ssu
}

// SetNillableRefreshCount sets the "refresh_count" field if the given value is not nil.
func (ssu *SentinelSessionUpdate) SetNillableRefreshCount(i *int64) *SentinelSessionUpdate {
	if i != nil {
		ssu.SetRefreshCount(*i)
	}
	return ssu
}

// AddRefreshCount adds i to the "refresh_count" field.
func (ssu *SentinelSessionUpdate) AddRefreshCount(i int64) *SentinelSessionUpdate {
	ssu.mutation.AddRefreshCount(i)
	return ssu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssu *SentinelSessionUpdate) SetUpdatedAt(t time.Time) *SentinelSessionUpdate {
	ssu.mutation.SetUpdatedAt(t)
	return ssu
}

// SetCreatedAt sets the "created_at" field.
func (ssu *SentinelSessionUpdate) SetCreatedAt(t time.Time) *SentinelSessionUpdate {
	ssu.mutation.SetCreatedAt(t)
	return ssu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssu *SentinelSessionUpdate) SetNillableCreatedAt(t *time.Time) *SentinelSessionUpdate {
	if t != nil {
		ssu.SetCreatedAt(*t)
	}
	return ssu
}

// SetSentinel sets the "sentinel" edge to the Sentinel entity.
func (ssu *SentinelSessionUpdate) SetSentinel(s *Sentinel) *SentinelSessionUpdate {
	return ssu.SetSentinelID(s.ID)
}

// Mutation returns the SentinelSessionMutation object of the builder.
func (ssu *SentinelSessionUpdate) Mutation() *SentinelSessionMutation {
	return ssu.mutation
}

// ClearSentinel clears the "sentinel" edge to the Sentinel entity.
func (ssu *SentinelSessionUpdate) ClearSentinel() *SentinelSessionUpdate {
	ssu.mutation.ClearSentinel()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SentinelSessionUpdate) Save(ctx context.Context) (int, error) {
	ssu.defaults()
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SentinelSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SentinelSessionUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SentinelSessionUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *SentinelSessionUpdate) defaults() {
	if _, ok := ssu.mutation.UpdatedAt(); !ok {
		v := sentinelsession.UpdateDefaultUpdatedAt()
		ssu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SentinelSessionUpdate) check() error {
	if v, ok := ssu.mutation.Status(); ok {
		if err := sentinelsession.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SentinelSession.status": %w`, err)}
		}
	}
	if ssu.mutation.SentinelCleared() && len(ssu.mutation.SentinelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SentinelSession.sentinel"`)
	}
	return nil
}

func (ssu *SentinelSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sentinelsession.Table, sentinelsession.Columns, sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.RefreshToken(); ok {
		_spec.SetField(sentinelsession.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := ssu.mutation.ExpireAt(); ok {
		_spec.SetField(sentinelsession.FieldExpireAt, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.Status(); ok {
		_spec.SetField(sentinelsession.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ssu.mutation.LastUsedAt(); ok {
		_spec.SetField(sentinelsession.FieldLastUsedAt, field.TypeTime, value)
	}
	if ssu.mutation.LastUsedAtCleared() {
		_spec.ClearField(sentinelsession.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := ssu.mutation.LastRefreshedAt(); ok {
		_spec.SetField(sentinelsession.FieldLastRefreshedAt, field.TypeTime, value)
	}
	if ssu.mutation.LastRefreshedAtCleared() {
		_spec.ClearField(sentinelsession.FieldLastRefreshedAt, field.TypeTime)
	}
	if value, ok := ssu.mutation.RefreshCount(); ok {
		_spec.SetField(sentinelsession.FieldRefreshCount, field.TypeInt64, value)
	}
	if value, ok := ssu.mutation.AddedRefreshCount(); ok {
		_spec.AddField(sentinelsession.FieldRefreshCount, field.TypeInt64, value)
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelsession.FieldCreatedAt, field.TypeTime, value)
	}
	if ssu.mutation.SentinelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinelsession.SentinelTable,
			Columns: []string{sentinelsession.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SentinelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinelsession.SentinelTable,
			Columns: []string{sentinelsession.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinelsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SentinelSessionUpdateOne is the builder for updating a single SentinelSession entity.
type SentinelSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SentinelSessionMutation
}

// SetSentinelID sets the "sentinel_id" field.
func (ssuo *SentinelSessionUpdateOne) SetSentinelID(mi model.InternalID) *SentinelSessionUpdateOne {
	ssuo.mutation.SetSentinelID(mi)
	return ssuo
}

// SetNillableSentinelID sets the "sentinel_id" field if the given value is not nil.
func (ssuo *SentinelSessionUpdateOne) SetNillableSentinelID(mi *model.InternalID) *SentinelSessionUpdateOne {
	if mi != nil {
		ssuo.SetSentinelID(*mi)
	}
	return ssuo
}

// SetRefreshToken sets the "refresh_token" field.
func (ssuo *SentinelSessionUpdateOne) SetRefreshToken(s string) *SentinelSessionUpdateOne {
	ssuo.mutation.SetRefreshToken(s)
	return ssuo
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (ssuo *SentinelSessionUpdateOne) SetNillableRefreshToken(s *string) *SentinelSessionUpdateOne {
	if s != nil {
		ssuo.SetRefreshToken(*s)
	}
	return ssuo
}

// SetExpireAt sets the "expire_at" field.
func (ssuo *SentinelSessionUpdateOne) SetExpireAt(t time.Time) *SentinelSessionUpdateOne {
	ssuo.mutation.SetExpireAt(t)
	return ssuo
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (ssuo *SentinelSessionUpdateOne) SetNillableExpireAt(t *time.Time) *SentinelSessionUpdateOne {
	if t != nil {
		ssuo.SetExpireAt(*t)
	}
	return ssuo
}

// SetStatus sets the "status" field.
func (ssuo *SentinelSessionUpdateOne) SetStatus(s sentinelsession.Status) *SentinelSessionUpdateOne {
	ssuo.mutation.SetStatus(s)
	return ssuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ssuo *SentinelSessionUpdateOne) SetNillableStatus(s *sentinelsession.Status) *SentinelSessionUpdateOne {
	if s != nil {
		ssuo.SetStatus(*s)
	}
	return ssuo
}

// SetLastUsedAt sets the "last_used_at" field.
func (ssuo *SentinelSessionUpdateOne) SetLastUsedAt(t time.Time) *SentinelSessionUpdateOne {
	ssuo.mutation.SetLastUsedAt(t)
	return ssuo
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (ssuo *SentinelSessionUpdateOne) SetNillableLastUsedAt(t *time.Time) *SentinelSessionUpdateOne {
	if t != nil {
		ssuo.SetLastUsedAt(*t)
	}
	return ssuo
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (ssuo *SentinelSessionUpdateOne) ClearLastUsedAt() *SentinelSessionUpdateOne {
	ssuo.mutation.ClearLastUsedAt()
	return ssuo
}

// SetLastRefreshedAt sets the "last_refreshed_at" field.
func (ssuo *SentinelSessionUpdateOne) SetLastRefreshedAt(t time.Time) *SentinelSessionUpdateOne {
	ssuo.mutation.SetLastRefreshedAt(t)
	return ssuo
}

// SetNillableLastRefreshedAt sets the "last_refreshed_at" field if the given value is not nil.
func (ssuo *SentinelSessionUpdateOne) SetNillableLastRefreshedAt(t *time.Time) *SentinelSessionUpdateOne {
	if t != nil {
		ssuo.SetLastRefreshedAt(*t)
	}
	return ssuo
}

// ClearLastRefreshedAt clears the value of the "last_refreshed_at" field.
func (ssuo *SentinelSessionUpdateOne) ClearLastRefreshedAt() *SentinelSessionUpdateOne {
	ssuo.mutation.ClearLastRefreshedAt()
	return ssuo
}

// SetRefreshCount sets the "refresh_count" field.
func (ssuo *SentinelSessionUpdateOne) SetRefreshCount(i int64) *SentinelSessionUpdateOne {
	ssuo.mutation.ResetRefreshCount()
	ssuo.mutation.SetRefreshCount(i)
	return ssuo
}

// SetNillableRefreshCount sets the "refresh_count" field if the given value is not nil.
func (ssuo *SentinelSessionUpdateOne) SetNillableRefreshCount(i *int64) *SentinelSessionUpdateOne {
	if i != nil {
		ssuo.SetRefreshCount(*i)
	}
	return ssuo
}

// AddRefreshCount adds i to the "refresh_count" field.
func (ssuo *SentinelSessionUpdateOne) AddRefreshCount(i int64) *SentinelSessionUpdateOne {
	ssuo.mutation.AddRefreshCount(i)
	return ssuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ssuo *SentinelSessionUpdateOne) SetUpdatedAt(t time.Time) *SentinelSessionUpdateOne {
	ssuo.mutation.SetUpdatedAt(t)
	return ssuo
}

// SetCreatedAt sets the "created_at" field.
func (ssuo *SentinelSessionUpdateOne) SetCreatedAt(t time.Time) *SentinelSessionUpdateOne {
	ssuo.mutation.SetCreatedAt(t)
	return ssuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssuo *SentinelSessionUpdateOne) SetNillableCreatedAt(t *time.Time) *SentinelSessionUpdateOne {
	if t != nil {
		ssuo.SetCreatedAt(*t)
	}
	return ssuo
}

// SetSentinel sets the "sentinel" edge to the Sentinel entity.
func (ssuo *SentinelSessionUpdateOne) SetSentinel(s *Sentinel) *SentinelSessionUpdateOne {
	return ssuo.SetSentinelID(s.ID)
}

// Mutation returns the SentinelSessionMutation object of the builder.
func (ssuo *SentinelSessionUpdateOne) Mutation() *SentinelSessionMutation {
	return ssuo.mutation
}

// ClearSentinel clears the "sentinel" edge to the Sentinel entity.
func (ssuo *SentinelSessionUpdateOne) ClearSentinel() *SentinelSessionUpdateOne {
	ssuo.mutation.ClearSentinel()
	return ssuo
}

// Where appends a list predicates to the SentinelSessionUpdate builder.
func (ssuo *SentinelSessionUpdateOne) Where(ps ...predicate.SentinelSession) *SentinelSessionUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SentinelSessionUpdateOne) Select(field string, fields ...string) *SentinelSessionUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SentinelSession entity.
func (ssuo *SentinelSessionUpdateOne) Save(ctx context.Context) (*SentinelSession, error) {
	ssuo.defaults()
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SentinelSessionUpdateOne) SaveX(ctx context.Context) *SentinelSession {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SentinelSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SentinelSessionUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *SentinelSessionUpdateOne) defaults() {
	if _, ok := ssuo.mutation.UpdatedAt(); !ok {
		v := sentinelsession.UpdateDefaultUpdatedAt()
		ssuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SentinelSessionUpdateOne) check() error {
	if v, ok := ssuo.mutation.Status(); ok {
		if err := sentinelsession.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SentinelSession.status": %w`, err)}
		}
	}
	if ssuo.mutation.SentinelCleared() && len(ssuo.mutation.SentinelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SentinelSession.sentinel"`)
	}
	return nil
}

func (ssuo *SentinelSessionUpdateOne) sqlSave(ctx context.Context) (_node *SentinelSession, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sentinelsession.Table, sentinelsession.Columns, sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SentinelSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentinelsession.FieldID)
		for _, f := range fields {
			if !sentinelsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sentinelsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.RefreshToken(); ok {
		_spec.SetField(sentinelsession.FieldRefreshToken, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.ExpireAt(); ok {
		_spec.SetField(sentinelsession.FieldExpireAt, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.Status(); ok {
		_spec.SetField(sentinelsession.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ssuo.mutation.LastUsedAt(); ok {
		_spec.SetField(sentinelsession.FieldLastUsedAt, field.TypeTime, value)
	}
	if ssuo.mutation.LastUsedAtCleared() {
		_spec.ClearField(sentinelsession.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := ssuo.mutation.LastRefreshedAt(); ok {
		_spec.SetField(sentinelsession.FieldLastRefreshedAt, field.TypeTime, value)
	}
	if ssuo.mutation.LastRefreshedAtCleared() {
		_spec.ClearField(sentinelsession.FieldLastRefreshedAt, field.TypeTime)
	}
	if value, ok := ssuo.mutation.RefreshCount(); ok {
		_spec.SetField(sentinelsession.FieldRefreshCount, field.TypeInt64, value)
	}
	if value, ok := ssuo.mutation.AddedRefreshCount(); ok {
		_spec.AddField(sentinelsession.FieldRefreshCount, field.TypeInt64, value)
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelsession.FieldCreatedAt, field.TypeTime, value)
	}
	if ssuo.mutation.SentinelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinelsession.SentinelTable,
			Columns: []string{sentinelsession.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SentinelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinelsession.SentinelTable,
			Columns: []string{sentinelsession.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SentinelSession{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinelsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
