// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinel"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinellibrary"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelsession"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelCreate is the builder for creating a Sentinel entity.
type SentinelCreate struct {
	config
	mutation *SentinelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (sc *SentinelCreate) SetName(s string) *SentinelCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SentinelCreate) SetDescription(s string) *SentinelCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetURL sets the "url" field.
func (sc *SentinelCreate) SetURL(s string) *SentinelCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (sc *SentinelCreate) SetNillableURL(s *string) *SentinelCreate {
	if s != nil {
		sc.SetURL(*s)
	}
	return sc
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (sc *SentinelCreate) SetAlternativeUrls(s []string) *SentinelCreate {
	sc.mutation.SetAlternativeUrls(s)
	return sc
}

// SetGetTokenPath sets the "get_token_path" field.
func (sc *SentinelCreate) SetGetTokenPath(s string) *SentinelCreate {
	sc.mutation.SetGetTokenPath(s)
	return sc
}

// SetNillableGetTokenPath sets the "get_token_path" field if the given value is not nil.
func (sc *SentinelCreate) SetNillableGetTokenPath(s *string) *SentinelCreate {
	if s != nil {
		sc.SetGetTokenPath(*s)
	}
	return sc
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (sc *SentinelCreate) SetDownloadFileBasePath(s string) *SentinelCreate {
	sc.mutation.SetDownloadFileBasePath(s)
	return sc
}

// SetNillableDownloadFileBasePath sets the "download_file_base_path" field if the given value is not nil.
func (sc *SentinelCreate) SetNillableDownloadFileBasePath(s *string) *SentinelCreate {
	if s != nil {
		sc.SetDownloadFileBasePath(*s)
	}
	return sc
}

// SetCreatorID sets the "creator_id" field.
func (sc *SentinelCreate) SetCreatorID(mi model.InternalID) *SentinelCreate {
	sc.mutation.SetCreatorID(mi)
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SentinelCreate) SetUpdatedAt(t time.Time) *SentinelCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SentinelCreate) SetNillableUpdatedAt(t *time.Time) *SentinelCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SentinelCreate) SetCreatedAt(t time.Time) *SentinelCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SentinelCreate) SetNillableCreatedAt(t *time.Time) *SentinelCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (sc *SentinelCreate) SetLibraryReportSequence(i int64) *SentinelCreate {
	sc.mutation.SetLibraryReportSequence(i)
	return sc
}

// SetNillableLibraryReportSequence sets the "library_report_sequence" field if the given value is not nil.
func (sc *SentinelCreate) SetNillableLibraryReportSequence(i *int64) *SentinelCreate {
	if i != nil {
		sc.SetLibraryReportSequence(*i)
	}
	return sc
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (sc *SentinelCreate) SetAppBinaryReportSequence(i int64) *SentinelCreate {
	sc.mutation.SetAppBinaryReportSequence(i)
	return sc
}

// SetNillableAppBinaryReportSequence sets the "app_binary_report_sequence" field if the given value is not nil.
func (sc *SentinelCreate) SetNillableAppBinaryReportSequence(i *int64) *SentinelCreate {
	if i != nil {
		sc.SetAppBinaryReportSequence(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SentinelCreate) SetID(mi model.InternalID) *SentinelCreate {
	sc.mutation.SetID(mi)
	return sc
}

// AddSentinelSessionIDs adds the "sentinel_session" edge to the SentinelSession entity by IDs.
func (sc *SentinelCreate) AddSentinelSessionIDs(ids ...model.InternalID) *SentinelCreate {
	sc.mutation.AddSentinelSessionIDs(ids...)
	return sc
}

// AddSentinelSession adds the "sentinel_session" edges to the SentinelSession entity.
func (sc *SentinelCreate) AddSentinelSession(s ...*SentinelSession) *SentinelCreate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSentinelSessionIDs(ids...)
}

// AddSentinelLibraryIDs adds the "sentinel_library" edge to the SentinelLibrary entity by IDs.
func (sc *SentinelCreate) AddSentinelLibraryIDs(ids ...model.InternalID) *SentinelCreate {
	sc.mutation.AddSentinelLibraryIDs(ids...)
	return sc
}

// AddSentinelLibrary adds the "sentinel_library" edges to the SentinelLibrary entity.
func (sc *SentinelCreate) AddSentinelLibrary(s ...*SentinelLibrary) *SentinelCreate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSentinelLibraryIDs(ids...)
}

// Mutation returns the SentinelMutation object of the builder.
func (sc *SentinelCreate) Mutation() *SentinelMutation {
	return sc.mutation
}

// Save creates the Sentinel in the database.
func (sc *SentinelCreate) Save(ctx context.Context) (*Sentinel, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SentinelCreate) SaveX(ctx context.Context) *Sentinel {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SentinelCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SentinelCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SentinelCreate) defaults() {
	if _, ok := sc.mutation.URL(); !ok {
		v := sentinel.DefaultURL
		sc.mutation.SetURL(v)
	}
	if _, ok := sc.mutation.DownloadFileBasePath(); !ok {
		v := sentinel.DefaultDownloadFileBasePath
		sc.mutation.SetDownloadFileBasePath(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := sentinel.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := sentinel.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.LibraryReportSequence(); !ok {
		v := sentinel.DefaultLibraryReportSequence
		sc.mutation.SetLibraryReportSequence(v)
	}
	if _, ok := sc.mutation.AppBinaryReportSequence(); !ok {
		v := sentinel.DefaultAppBinaryReportSequence
		sc.mutation.SetAppBinaryReportSequence(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SentinelCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Sentinel.name"`)}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Sentinel.description"`)}
	}
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Sentinel.url"`)}
	}
	if _, ok := sc.mutation.DownloadFileBasePath(); !ok {
		return &ValidationError{Name: "download_file_base_path", err: errors.New(`ent: missing required field "Sentinel.download_file_base_path"`)}
	}
	if _, ok := sc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Sentinel.creator_id"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Sentinel.updated_at"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Sentinel.created_at"`)}
	}
	if _, ok := sc.mutation.LibraryReportSequence(); !ok {
		return &ValidationError{Name: "library_report_sequence", err: errors.New(`ent: missing required field "Sentinel.library_report_sequence"`)}
	}
	if _, ok := sc.mutation.AppBinaryReportSequence(); !ok {
		return &ValidationError{Name: "app_binary_report_sequence", err: errors.New(`ent: missing required field "Sentinel.app_binary_report_sequence"`)}
	}
	return nil
}

func (sc *SentinelCreate) sqlSave(ctx context.Context) (*Sentinel, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SentinelCreate) createSpec() (*Sentinel, *sqlgraph.CreateSpec) {
	var (
		_node = &Sentinel{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sentinel.Table, sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(sentinel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(sentinel.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(sentinel.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.AlternativeUrls(); ok {
		_spec.SetField(sentinel.FieldAlternativeUrls, field.TypeJSON, value)
		_node.AlternativeUrls = value
	}
	if value, ok := sc.mutation.GetTokenPath(); ok {
		_spec.SetField(sentinel.FieldGetTokenPath, field.TypeString, value)
		_node.GetTokenPath = value
	}
	if value, ok := sc.mutation.DownloadFileBasePath(); ok {
		_spec.SetField(sentinel.FieldDownloadFileBasePath, field.TypeString, value)
		_node.DownloadFileBasePath = value
	}
	if value, ok := sc.mutation.CreatorID(); ok {
		_spec.SetField(sentinel.FieldCreatorID, field.TypeInt64, value)
		_node.CreatorID = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(sentinel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.LibraryReportSequence(); ok {
		_spec.SetField(sentinel.FieldLibraryReportSequence, field.TypeInt64, value)
		_node.LibraryReportSequence = value
	}
	if value, ok := sc.mutation.AppBinaryReportSequence(); ok {
		_spec.SetField(sentinel.FieldAppBinaryReportSequence, field.TypeInt64, value)
		_node.AppBinaryReportSequence = value
	}
	if nodes := sc.mutation.SentinelSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelSessionTable,
			Columns: []string{sentinel.SentinelSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SentinelLibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelLibraryTable,
			Columns: []string{sentinel.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Sentinel.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (sc *SentinelCreate) OnConflict(opts ...sql.ConflictOption) *SentinelUpsertOne {
	sc.conflict = opts
	return &SentinelUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Sentinel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SentinelCreate) OnConflictColumns(columns ...string) *SentinelUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SentinelUpsertOne{
		create: sc,
	}
}

type (
	// SentinelUpsertOne is the builder for "upsert"-ing
	//  one Sentinel node.
	SentinelUpsertOne struct {
		create *SentinelCreate
	}

	// SentinelUpsert is the "OnConflict" setter.
	SentinelUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *SentinelUpsert) SetName(v string) *SentinelUpsert {
	u.Set(sentinel.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateName() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *SentinelUpsert) SetDescription(v string) *SentinelUpsert {
	u.Set(sentinel.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateDescription() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldDescription)
	return u
}

// SetURL sets the "url" field.
func (u *SentinelUpsert) SetURL(v string) *SentinelUpsert {
	u.Set(sentinel.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateURL() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldURL)
	return u
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (u *SentinelUpsert) SetAlternativeUrls(v []string) *SentinelUpsert {
	u.Set(sentinel.FieldAlternativeUrls, v)
	return u
}

// UpdateAlternativeUrls sets the "alternative_urls" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateAlternativeUrls() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldAlternativeUrls)
	return u
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (u *SentinelUpsert) ClearAlternativeUrls() *SentinelUpsert {
	u.SetNull(sentinel.FieldAlternativeUrls)
	return u
}

// SetGetTokenPath sets the "get_token_path" field.
func (u *SentinelUpsert) SetGetTokenPath(v string) *SentinelUpsert {
	u.Set(sentinel.FieldGetTokenPath, v)
	return u
}

// UpdateGetTokenPath sets the "get_token_path" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateGetTokenPath() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldGetTokenPath)
	return u
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (u *SentinelUpsert) ClearGetTokenPath() *SentinelUpsert {
	u.SetNull(sentinel.FieldGetTokenPath)
	return u
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (u *SentinelUpsert) SetDownloadFileBasePath(v string) *SentinelUpsert {
	u.Set(sentinel.FieldDownloadFileBasePath, v)
	return u
}

// UpdateDownloadFileBasePath sets the "download_file_base_path" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateDownloadFileBasePath() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldDownloadFileBasePath)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelUpsert) SetUpdatedAt(v time.Time) *SentinelUpsert {
	u.Set(sentinel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateUpdatedAt() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelUpsert) SetCreatedAt(v time.Time) *SentinelUpsert {
	u.Set(sentinel.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateCreatedAt() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldCreatedAt)
	return u
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (u *SentinelUpsert) SetLibraryReportSequence(v int64) *SentinelUpsert {
	u.Set(sentinel.FieldLibraryReportSequence, v)
	return u
}

// UpdateLibraryReportSequence sets the "library_report_sequence" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateLibraryReportSequence() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldLibraryReportSequence)
	return u
}

// AddLibraryReportSequence adds v to the "library_report_sequence" field.
func (u *SentinelUpsert) AddLibraryReportSequence(v int64) *SentinelUpsert {
	u.Add(sentinel.FieldLibraryReportSequence, v)
	return u
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (u *SentinelUpsert) SetAppBinaryReportSequence(v int64) *SentinelUpsert {
	u.Set(sentinel.FieldAppBinaryReportSequence, v)
	return u
}

// UpdateAppBinaryReportSequence sets the "app_binary_report_sequence" field to the value that was provided on create.
func (u *SentinelUpsert) UpdateAppBinaryReportSequence() *SentinelUpsert {
	u.SetExcluded(sentinel.FieldAppBinaryReportSequence)
	return u
}

// AddAppBinaryReportSequence adds v to the "app_binary_report_sequence" field.
func (u *SentinelUpsert) AddAppBinaryReportSequence(v int64) *SentinelUpsert {
	u.Add(sentinel.FieldAppBinaryReportSequence, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Sentinel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sentinel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SentinelUpsertOne) UpdateNewValues() *SentinelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sentinel.FieldID)
		}
		if _, exists := u.create.mutation.CreatorID(); exists {
			s.SetIgnore(sentinel.FieldCreatorID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Sentinel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SentinelUpsertOne) Ignore() *SentinelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelUpsertOne) DoNothing() *SentinelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelCreate.OnConflict
// documentation for more info.
func (u *SentinelUpsertOne) Update(set func(*SentinelUpsert)) *SentinelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SentinelUpsertOne) SetName(v string) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateName() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *SentinelUpsertOne) SetDescription(v string) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateDescription() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateDescription()
	})
}

// SetURL sets the "url" field.
func (u *SentinelUpsertOne) SetURL(v string) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateURL() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateURL()
	})
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (u *SentinelUpsertOne) SetAlternativeUrls(v []string) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetAlternativeUrls(v)
	})
}

// UpdateAlternativeUrls sets the "alternative_urls" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateAlternativeUrls() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateAlternativeUrls()
	})
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (u *SentinelUpsertOne) ClearAlternativeUrls() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.ClearAlternativeUrls()
	})
}

// SetGetTokenPath sets the "get_token_path" field.
func (u *SentinelUpsertOne) SetGetTokenPath(v string) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetGetTokenPath(v)
	})
}

// UpdateGetTokenPath sets the "get_token_path" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateGetTokenPath() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateGetTokenPath()
	})
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (u *SentinelUpsertOne) ClearGetTokenPath() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.ClearGetTokenPath()
	})
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (u *SentinelUpsertOne) SetDownloadFileBasePath(v string) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetDownloadFileBasePath(v)
	})
}

// UpdateDownloadFileBasePath sets the "download_file_base_path" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateDownloadFileBasePath() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateDownloadFileBasePath()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelUpsertOne) SetUpdatedAt(v time.Time) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateUpdatedAt() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelUpsertOne) SetCreatedAt(v time.Time) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateCreatedAt() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (u *SentinelUpsertOne) SetLibraryReportSequence(v int64) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetLibraryReportSequence(v)
	})
}

// AddLibraryReportSequence adds v to the "library_report_sequence" field.
func (u *SentinelUpsertOne) AddLibraryReportSequence(v int64) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.AddLibraryReportSequence(v)
	})
}

// UpdateLibraryReportSequence sets the "library_report_sequence" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateLibraryReportSequence() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateLibraryReportSequence()
	})
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (u *SentinelUpsertOne) SetAppBinaryReportSequence(v int64) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.SetAppBinaryReportSequence(v)
	})
}

// AddAppBinaryReportSequence adds v to the "app_binary_report_sequence" field.
func (u *SentinelUpsertOne) AddAppBinaryReportSequence(v int64) *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.AddAppBinaryReportSequence(v)
	})
}

// UpdateAppBinaryReportSequence sets the "app_binary_report_sequence" field to the value that was provided on create.
func (u *SentinelUpsertOne) UpdateAppBinaryReportSequence() *SentinelUpsertOne {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateAppBinaryReportSequence()
	})
}

// Exec executes the query.
func (u *SentinelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SentinelUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SentinelUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SentinelCreateBulk is the builder for creating many Sentinel entities in bulk.
type SentinelCreateBulk struct {
	config
	err      error
	builders []*SentinelCreate
	conflict []sql.ConflictOption
}

// Save creates the Sentinel entities in the database.
func (scb *SentinelCreateBulk) Save(ctx context.Context) ([]*Sentinel, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sentinel, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SentinelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SentinelCreateBulk) SaveX(ctx context.Context) []*Sentinel {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SentinelCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SentinelCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Sentinel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (scb *SentinelCreateBulk) OnConflict(opts ...sql.ConflictOption) *SentinelUpsertBulk {
	scb.conflict = opts
	return &SentinelUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Sentinel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SentinelCreateBulk) OnConflictColumns(columns ...string) *SentinelUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SentinelUpsertBulk{
		create: scb,
	}
}

// SentinelUpsertBulk is the builder for "upsert"-ing
// a bulk of Sentinel nodes.
type SentinelUpsertBulk struct {
	create *SentinelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Sentinel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sentinel.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SentinelUpsertBulk) UpdateNewValues() *SentinelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sentinel.FieldID)
			}
			if _, exists := b.mutation.CreatorID(); exists {
				s.SetIgnore(sentinel.FieldCreatorID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Sentinel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SentinelUpsertBulk) Ignore() *SentinelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelUpsertBulk) DoNothing() *SentinelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelCreateBulk.OnConflict
// documentation for more info.
func (u *SentinelUpsertBulk) Update(set func(*SentinelUpsert)) *SentinelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *SentinelUpsertBulk) SetName(v string) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateName() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *SentinelUpsertBulk) SetDescription(v string) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateDescription() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateDescription()
	})
}

// SetURL sets the "url" field.
func (u *SentinelUpsertBulk) SetURL(v string) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateURL() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateURL()
	})
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (u *SentinelUpsertBulk) SetAlternativeUrls(v []string) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetAlternativeUrls(v)
	})
}

// UpdateAlternativeUrls sets the "alternative_urls" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateAlternativeUrls() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateAlternativeUrls()
	})
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (u *SentinelUpsertBulk) ClearAlternativeUrls() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.ClearAlternativeUrls()
	})
}

// SetGetTokenPath sets the "get_token_path" field.
func (u *SentinelUpsertBulk) SetGetTokenPath(v string) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetGetTokenPath(v)
	})
}

// UpdateGetTokenPath sets the "get_token_path" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateGetTokenPath() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateGetTokenPath()
	})
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (u *SentinelUpsertBulk) ClearGetTokenPath() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.ClearGetTokenPath()
	})
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (u *SentinelUpsertBulk) SetDownloadFileBasePath(v string) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetDownloadFileBasePath(v)
	})
}

// UpdateDownloadFileBasePath sets the "download_file_base_path" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateDownloadFileBasePath() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateDownloadFileBasePath()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelUpsertBulk) SetUpdatedAt(v time.Time) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateUpdatedAt() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelUpsertBulk) SetCreatedAt(v time.Time) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateCreatedAt() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (u *SentinelUpsertBulk) SetLibraryReportSequence(v int64) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetLibraryReportSequence(v)
	})
}

// AddLibraryReportSequence adds v to the "library_report_sequence" field.
func (u *SentinelUpsertBulk) AddLibraryReportSequence(v int64) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.AddLibraryReportSequence(v)
	})
}

// UpdateLibraryReportSequence sets the "library_report_sequence" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateLibraryReportSequence() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateLibraryReportSequence()
	})
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (u *SentinelUpsertBulk) SetAppBinaryReportSequence(v int64) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.SetAppBinaryReportSequence(v)
	})
}

// AddAppBinaryReportSequence adds v to the "app_binary_report_sequence" field.
func (u *SentinelUpsertBulk) AddAppBinaryReportSequence(v int64) *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.AddAppBinaryReportSequence(v)
	})
}

// UpdateAppBinaryReportSequence sets the "app_binary_report_sequence" field to the value that was provided on create.
func (u *SentinelUpsertBulk) UpdateAppBinaryReportSequence() *SentinelUpsertBulk {
	return u.Update(func(s *SentinelUpsert) {
		s.UpdateAppBinaryReportSequence()
	})
}

// Exec executes the query.
func (u *SentinelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SentinelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
