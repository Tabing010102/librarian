// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinaryfile"
)

// SentinelAppBinaryFileCreate is the builder for creating a SentinelAppBinaryFile entity.
type SentinelAppBinaryFileCreate struct {
	config
	mutation *SentinelAppBinaryFileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSentinelAppBinaryID sets the "sentinel_app_binary_id" field.
func (sabfc *SentinelAppBinaryFileCreate) SetSentinelAppBinaryID(i int) *SentinelAppBinaryFileCreate {
	sabfc.mutation.SetSentinelAppBinaryID(i)
	return sabfc
}

// SetName sets the "name" field.
func (sabfc *SentinelAppBinaryFileCreate) SetName(s string) *SentinelAppBinaryFileCreate {
	sabfc.mutation.SetName(s)
	return sabfc
}

// SetSizeBytes sets the "size_bytes" field.
func (sabfc *SentinelAppBinaryFileCreate) SetSizeBytes(i int64) *SentinelAppBinaryFileCreate {
	sabfc.mutation.SetSizeBytes(i)
	return sabfc
}

// SetSha256 sets the "sha256" field.
func (sabfc *SentinelAppBinaryFileCreate) SetSha256(b []byte) *SentinelAppBinaryFileCreate {
	sabfc.mutation.SetSha256(b)
	return sabfc
}

// SetServerFilePath sets the "server_file_path" field.
func (sabfc *SentinelAppBinaryFileCreate) SetServerFilePath(s string) *SentinelAppBinaryFileCreate {
	sabfc.mutation.SetServerFilePath(s)
	return sabfc
}

// SetChunksInfo sets the "chunks_info" field.
func (sabfc *SentinelAppBinaryFileCreate) SetChunksInfo(s string) *SentinelAppBinaryFileCreate {
	sabfc.mutation.SetChunksInfo(s)
	return sabfc
}

// SetNillableChunksInfo sets the "chunks_info" field if the given value is not nil.
func (sabfc *SentinelAppBinaryFileCreate) SetNillableChunksInfo(s *string) *SentinelAppBinaryFileCreate {
	if s != nil {
		sabfc.SetChunksInfo(*s)
	}
	return sabfc
}

// SetUpdatedAt sets the "updated_at" field.
func (sabfc *SentinelAppBinaryFileCreate) SetUpdatedAt(t time.Time) *SentinelAppBinaryFileCreate {
	sabfc.mutation.SetUpdatedAt(t)
	return sabfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sabfc *SentinelAppBinaryFileCreate) SetNillableUpdatedAt(t *time.Time) *SentinelAppBinaryFileCreate {
	if t != nil {
		sabfc.SetUpdatedAt(*t)
	}
	return sabfc
}

// SetCreatedAt sets the "created_at" field.
func (sabfc *SentinelAppBinaryFileCreate) SetCreatedAt(t time.Time) *SentinelAppBinaryFileCreate {
	sabfc.mutation.SetCreatedAt(t)
	return sabfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sabfc *SentinelAppBinaryFileCreate) SetNillableCreatedAt(t *time.Time) *SentinelAppBinaryFileCreate {
	if t != nil {
		sabfc.SetCreatedAt(*t)
	}
	return sabfc
}

// SetSentinelAppBinary sets the "sentinel_app_binary" edge to the SentinelAppBinary entity.
func (sabfc *SentinelAppBinaryFileCreate) SetSentinelAppBinary(s *SentinelAppBinary) *SentinelAppBinaryFileCreate {
	return sabfc.SetSentinelAppBinaryID(s.ID)
}

// Mutation returns the SentinelAppBinaryFileMutation object of the builder.
func (sabfc *SentinelAppBinaryFileCreate) Mutation() *SentinelAppBinaryFileMutation {
	return sabfc.mutation
}

// Save creates the SentinelAppBinaryFile in the database.
func (sabfc *SentinelAppBinaryFileCreate) Save(ctx context.Context) (*SentinelAppBinaryFile, error) {
	sabfc.defaults()
	return withHooks(ctx, sabfc.sqlSave, sabfc.mutation, sabfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sabfc *SentinelAppBinaryFileCreate) SaveX(ctx context.Context) *SentinelAppBinaryFile {
	v, err := sabfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sabfc *SentinelAppBinaryFileCreate) Exec(ctx context.Context) error {
	_, err := sabfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabfc *SentinelAppBinaryFileCreate) ExecX(ctx context.Context) {
	if err := sabfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sabfc *SentinelAppBinaryFileCreate) defaults() {
	if _, ok := sabfc.mutation.UpdatedAt(); !ok {
		v := sentinelappbinaryfile.DefaultUpdatedAt()
		sabfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sabfc.mutation.CreatedAt(); !ok {
		v := sentinelappbinaryfile.DefaultCreatedAt()
		sabfc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sabfc *SentinelAppBinaryFileCreate) check() error {
	if _, ok := sabfc.mutation.SentinelAppBinaryID(); !ok {
		return &ValidationError{Name: "sentinel_app_binary_id", err: errors.New(`ent: missing required field "SentinelAppBinaryFile.sentinel_app_binary_id"`)}
	}
	if _, ok := sabfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SentinelAppBinaryFile.name"`)}
	}
	if _, ok := sabfc.mutation.SizeBytes(); !ok {
		return &ValidationError{Name: "size_bytes", err: errors.New(`ent: missing required field "SentinelAppBinaryFile.size_bytes"`)}
	}
	if _, ok := sabfc.mutation.Sha256(); !ok {
		return &ValidationError{Name: "sha256", err: errors.New(`ent: missing required field "SentinelAppBinaryFile.sha256"`)}
	}
	if _, ok := sabfc.mutation.ServerFilePath(); !ok {
		return &ValidationError{Name: "server_file_path", err: errors.New(`ent: missing required field "SentinelAppBinaryFile.server_file_path"`)}
	}
	if _, ok := sabfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SentinelAppBinaryFile.updated_at"`)}
	}
	if _, ok := sabfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SentinelAppBinaryFile.created_at"`)}
	}
	if len(sabfc.mutation.SentinelAppBinaryIDs()) == 0 {
		return &ValidationError{Name: "sentinel_app_binary", err: errors.New(`ent: missing required edge "SentinelAppBinaryFile.sentinel_app_binary"`)}
	}
	return nil
}

func (sabfc *SentinelAppBinaryFileCreate) sqlSave(ctx context.Context) (*SentinelAppBinaryFile, error) {
	if err := sabfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sabfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sabfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sabfc.mutation.id = &_node.ID
	sabfc.mutation.done = true
	return _node, nil
}

func (sabfc *SentinelAppBinaryFileCreate) createSpec() (*SentinelAppBinaryFile, *sqlgraph.CreateSpec) {
	var (
		_node = &SentinelAppBinaryFile{config: sabfc.config}
		_spec = sqlgraph.NewCreateSpec(sentinelappbinaryfile.Table, sqlgraph.NewFieldSpec(sentinelappbinaryfile.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sabfc.conflict
	if value, ok := sabfc.mutation.Name(); ok {
		_spec.SetField(sentinelappbinaryfile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sabfc.mutation.SizeBytes(); ok {
		_spec.SetField(sentinelappbinaryfile.FieldSizeBytes, field.TypeInt64, value)
		_node.SizeBytes = value
	}
	if value, ok := sabfc.mutation.Sha256(); ok {
		_spec.SetField(sentinelappbinaryfile.FieldSha256, field.TypeBytes, value)
		_node.Sha256 = value
	}
	if value, ok := sabfc.mutation.ServerFilePath(); ok {
		_spec.SetField(sentinelappbinaryfile.FieldServerFilePath, field.TypeString, value)
		_node.ServerFilePath = value
	}
	if value, ok := sabfc.mutation.ChunksInfo(); ok {
		_spec.SetField(sentinelappbinaryfile.FieldChunksInfo, field.TypeString, value)
		_node.ChunksInfo = value
	}
	if value, ok := sabfc.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelappbinaryfile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sabfc.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelappbinaryfile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sabfc.mutation.SentinelAppBinaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sentinelappbinaryfile.SentinelAppBinaryTable,
			Columns: []string{sentinelappbinaryfile.SentinelAppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelappbinary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SentinelAppBinaryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SentinelAppBinaryFile.Create().
//		SetSentinelAppBinaryID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelAppBinaryFileUpsert) {
//			SetSentinelAppBinaryID(v+v).
//		}).
//		Exec(ctx)
func (sabfc *SentinelAppBinaryFileCreate) OnConflict(opts ...sql.ConflictOption) *SentinelAppBinaryFileUpsertOne {
	sabfc.conflict = opts
	return &SentinelAppBinaryFileUpsertOne{
		create: sabfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SentinelAppBinaryFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sabfc *SentinelAppBinaryFileCreate) OnConflictColumns(columns ...string) *SentinelAppBinaryFileUpsertOne {
	sabfc.conflict = append(sabfc.conflict, sql.ConflictColumns(columns...))
	return &SentinelAppBinaryFileUpsertOne{
		create: sabfc,
	}
}

type (
	// SentinelAppBinaryFileUpsertOne is the builder for "upsert"-ing
	//  one SentinelAppBinaryFile node.
	SentinelAppBinaryFileUpsertOne struct {
		create *SentinelAppBinaryFileCreate
	}

	// SentinelAppBinaryFileUpsert is the "OnConflict" setter.
	SentinelAppBinaryFileUpsert struct {
		*sql.UpdateSet
	}
)

// SetSentinelAppBinaryID sets the "sentinel_app_binary_id" field.
func (u *SentinelAppBinaryFileUpsert) SetSentinelAppBinaryID(v int) *SentinelAppBinaryFileUpsert {
	u.Set(sentinelappbinaryfile.FieldSentinelAppBinaryID, v)
	return u
}

// UpdateSentinelAppBinaryID sets the "sentinel_app_binary_id" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsert) UpdateSentinelAppBinaryID() *SentinelAppBinaryFileUpsert {
	u.SetExcluded(sentinelappbinaryfile.FieldSentinelAppBinaryID)
	return u
}

// SetName sets the "name" field.
func (u *SentinelAppBinaryFileUpsert) SetName(v string) *SentinelAppBinaryFileUpsert {
	u.Set(sentinelappbinaryfile.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsert) UpdateName() *SentinelAppBinaryFileUpsert {
	u.SetExcluded(sentinelappbinaryfile.FieldName)
	return u
}

// SetSizeBytes sets the "size_bytes" field.
func (u *SentinelAppBinaryFileUpsert) SetSizeBytes(v int64) *SentinelAppBinaryFileUpsert {
	u.Set(sentinelappbinaryfile.FieldSizeBytes, v)
	return u
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsert) UpdateSizeBytes() *SentinelAppBinaryFileUpsert {
	u.SetExcluded(sentinelappbinaryfile.FieldSizeBytes)
	return u
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *SentinelAppBinaryFileUpsert) AddSizeBytes(v int64) *SentinelAppBinaryFileUpsert {
	u.Add(sentinelappbinaryfile.FieldSizeBytes, v)
	return u
}

// SetSha256 sets the "sha256" field.
func (u *SentinelAppBinaryFileUpsert) SetSha256(v []byte) *SentinelAppBinaryFileUpsert {
	u.Set(sentinelappbinaryfile.FieldSha256, v)
	return u
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsert) UpdateSha256() *SentinelAppBinaryFileUpsert {
	u.SetExcluded(sentinelappbinaryfile.FieldSha256)
	return u
}

// SetServerFilePath sets the "server_file_path" field.
func (u *SentinelAppBinaryFileUpsert) SetServerFilePath(v string) *SentinelAppBinaryFileUpsert {
	u.Set(sentinelappbinaryfile.FieldServerFilePath, v)
	return u
}

// UpdateServerFilePath sets the "server_file_path" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsert) UpdateServerFilePath() *SentinelAppBinaryFileUpsert {
	u.SetExcluded(sentinelappbinaryfile.FieldServerFilePath)
	return u
}

// SetChunksInfo sets the "chunks_info" field.
func (u *SentinelAppBinaryFileUpsert) SetChunksInfo(v string) *SentinelAppBinaryFileUpsert {
	u.Set(sentinelappbinaryfile.FieldChunksInfo, v)
	return u
}

// UpdateChunksInfo sets the "chunks_info" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsert) UpdateChunksInfo() *SentinelAppBinaryFileUpsert {
	u.SetExcluded(sentinelappbinaryfile.FieldChunksInfo)
	return u
}

// ClearChunksInfo clears the value of the "chunks_info" field.
func (u *SentinelAppBinaryFileUpsert) ClearChunksInfo() *SentinelAppBinaryFileUpsert {
	u.SetNull(sentinelappbinaryfile.FieldChunksInfo)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelAppBinaryFileUpsert) SetUpdatedAt(v time.Time) *SentinelAppBinaryFileUpsert {
	u.Set(sentinelappbinaryfile.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsert) UpdateUpdatedAt() *SentinelAppBinaryFileUpsert {
	u.SetExcluded(sentinelappbinaryfile.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelAppBinaryFileUpsert) SetCreatedAt(v time.Time) *SentinelAppBinaryFileUpsert {
	u.Set(sentinelappbinaryfile.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsert) UpdateCreatedAt() *SentinelAppBinaryFileUpsert {
	u.SetExcluded(sentinelappbinaryfile.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SentinelAppBinaryFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SentinelAppBinaryFileUpsertOne) UpdateNewValues() *SentinelAppBinaryFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SentinelAppBinaryFile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SentinelAppBinaryFileUpsertOne) Ignore() *SentinelAppBinaryFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelAppBinaryFileUpsertOne) DoNothing() *SentinelAppBinaryFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelAppBinaryFileCreate.OnConflict
// documentation for more info.
func (u *SentinelAppBinaryFileUpsertOne) Update(set func(*SentinelAppBinaryFileUpsert)) *SentinelAppBinaryFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelAppBinaryFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetSentinelAppBinaryID sets the "sentinel_app_binary_id" field.
func (u *SentinelAppBinaryFileUpsertOne) SetSentinelAppBinaryID(v int) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetSentinelAppBinaryID(v)
	})
}

// UpdateSentinelAppBinaryID sets the "sentinel_app_binary_id" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertOne) UpdateSentinelAppBinaryID() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateSentinelAppBinaryID()
	})
}

// SetName sets the "name" field.
func (u *SentinelAppBinaryFileUpsertOne) SetName(v string) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertOne) UpdateName() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateName()
	})
}

// SetSizeBytes sets the "size_bytes" field.
func (u *SentinelAppBinaryFileUpsertOne) SetSizeBytes(v int64) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetSizeBytes(v)
	})
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *SentinelAppBinaryFileUpsertOne) AddSizeBytes(v int64) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.AddSizeBytes(v)
	})
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertOne) UpdateSizeBytes() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateSizeBytes()
	})
}

// SetSha256 sets the "sha256" field.
func (u *SentinelAppBinaryFileUpsertOne) SetSha256(v []byte) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetSha256(v)
	})
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertOne) UpdateSha256() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateSha256()
	})
}

// SetServerFilePath sets the "server_file_path" field.
func (u *SentinelAppBinaryFileUpsertOne) SetServerFilePath(v string) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetServerFilePath(v)
	})
}

// UpdateServerFilePath sets the "server_file_path" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertOne) UpdateServerFilePath() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateServerFilePath()
	})
}

// SetChunksInfo sets the "chunks_info" field.
func (u *SentinelAppBinaryFileUpsertOne) SetChunksInfo(v string) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetChunksInfo(v)
	})
}

// UpdateChunksInfo sets the "chunks_info" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertOne) UpdateChunksInfo() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateChunksInfo()
	})
}

// ClearChunksInfo clears the value of the "chunks_info" field.
func (u *SentinelAppBinaryFileUpsertOne) ClearChunksInfo() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.ClearChunksInfo()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelAppBinaryFileUpsertOne) SetUpdatedAt(v time.Time) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertOne) UpdateUpdatedAt() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelAppBinaryFileUpsertOne) SetCreatedAt(v time.Time) *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertOne) UpdateCreatedAt() *SentinelAppBinaryFileUpsertOne {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SentinelAppBinaryFileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelAppBinaryFileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelAppBinaryFileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SentinelAppBinaryFileUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SentinelAppBinaryFileUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SentinelAppBinaryFileCreateBulk is the builder for creating many SentinelAppBinaryFile entities in bulk.
type SentinelAppBinaryFileCreateBulk struct {
	config
	err      error
	builders []*SentinelAppBinaryFileCreate
	conflict []sql.ConflictOption
}

// Save creates the SentinelAppBinaryFile entities in the database.
func (sabfcb *SentinelAppBinaryFileCreateBulk) Save(ctx context.Context) ([]*SentinelAppBinaryFile, error) {
	if sabfcb.err != nil {
		return nil, sabfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sabfcb.builders))
	nodes := make([]*SentinelAppBinaryFile, len(sabfcb.builders))
	mutators := make([]Mutator, len(sabfcb.builders))
	for i := range sabfcb.builders {
		func(i int, root context.Context) {
			builder := sabfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SentinelAppBinaryFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sabfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sabfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sabfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sabfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sabfcb *SentinelAppBinaryFileCreateBulk) SaveX(ctx context.Context) []*SentinelAppBinaryFile {
	v, err := sabfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sabfcb *SentinelAppBinaryFileCreateBulk) Exec(ctx context.Context) error {
	_, err := sabfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabfcb *SentinelAppBinaryFileCreateBulk) ExecX(ctx context.Context) {
	if err := sabfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SentinelAppBinaryFile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelAppBinaryFileUpsert) {
//			SetSentinelAppBinaryID(v+v).
//		}).
//		Exec(ctx)
func (sabfcb *SentinelAppBinaryFileCreateBulk) OnConflict(opts ...sql.ConflictOption) *SentinelAppBinaryFileUpsertBulk {
	sabfcb.conflict = opts
	return &SentinelAppBinaryFileUpsertBulk{
		create: sabfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SentinelAppBinaryFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sabfcb *SentinelAppBinaryFileCreateBulk) OnConflictColumns(columns ...string) *SentinelAppBinaryFileUpsertBulk {
	sabfcb.conflict = append(sabfcb.conflict, sql.ConflictColumns(columns...))
	return &SentinelAppBinaryFileUpsertBulk{
		create: sabfcb,
	}
}

// SentinelAppBinaryFileUpsertBulk is the builder for "upsert"-ing
// a bulk of SentinelAppBinaryFile nodes.
type SentinelAppBinaryFileUpsertBulk struct {
	create *SentinelAppBinaryFileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SentinelAppBinaryFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SentinelAppBinaryFileUpsertBulk) UpdateNewValues() *SentinelAppBinaryFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SentinelAppBinaryFile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SentinelAppBinaryFileUpsertBulk) Ignore() *SentinelAppBinaryFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelAppBinaryFileUpsertBulk) DoNothing() *SentinelAppBinaryFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelAppBinaryFileCreateBulk.OnConflict
// documentation for more info.
func (u *SentinelAppBinaryFileUpsertBulk) Update(set func(*SentinelAppBinaryFileUpsert)) *SentinelAppBinaryFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelAppBinaryFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetSentinelAppBinaryID sets the "sentinel_app_binary_id" field.
func (u *SentinelAppBinaryFileUpsertBulk) SetSentinelAppBinaryID(v int) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetSentinelAppBinaryID(v)
	})
}

// UpdateSentinelAppBinaryID sets the "sentinel_app_binary_id" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertBulk) UpdateSentinelAppBinaryID() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateSentinelAppBinaryID()
	})
}

// SetName sets the "name" field.
func (u *SentinelAppBinaryFileUpsertBulk) SetName(v string) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertBulk) UpdateName() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateName()
	})
}

// SetSizeBytes sets the "size_bytes" field.
func (u *SentinelAppBinaryFileUpsertBulk) SetSizeBytes(v int64) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetSizeBytes(v)
	})
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *SentinelAppBinaryFileUpsertBulk) AddSizeBytes(v int64) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.AddSizeBytes(v)
	})
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertBulk) UpdateSizeBytes() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateSizeBytes()
	})
}

// SetSha256 sets the "sha256" field.
func (u *SentinelAppBinaryFileUpsertBulk) SetSha256(v []byte) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetSha256(v)
	})
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertBulk) UpdateSha256() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateSha256()
	})
}

// SetServerFilePath sets the "server_file_path" field.
func (u *SentinelAppBinaryFileUpsertBulk) SetServerFilePath(v string) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetServerFilePath(v)
	})
}

// UpdateServerFilePath sets the "server_file_path" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertBulk) UpdateServerFilePath() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateServerFilePath()
	})
}

// SetChunksInfo sets the "chunks_info" field.
func (u *SentinelAppBinaryFileUpsertBulk) SetChunksInfo(v string) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetChunksInfo(v)
	})
}

// UpdateChunksInfo sets the "chunks_info" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertBulk) UpdateChunksInfo() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateChunksInfo()
	})
}

// ClearChunksInfo clears the value of the "chunks_info" field.
func (u *SentinelAppBinaryFileUpsertBulk) ClearChunksInfo() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.ClearChunksInfo()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelAppBinaryFileUpsertBulk) SetUpdatedAt(v time.Time) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertBulk) UpdateUpdatedAt() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelAppBinaryFileUpsertBulk) SetCreatedAt(v time.Time) *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelAppBinaryFileUpsertBulk) UpdateCreatedAt() *SentinelAppBinaryFileUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryFileUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SentinelAppBinaryFileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SentinelAppBinaryFileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelAppBinaryFileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelAppBinaryFileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
