// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinel"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelsession"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelSessionCreate is the builder for creating a SentinelSession entity.
type SentinelSessionCreate struct {
	config
	mutation *SentinelSessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSentinelID sets the "sentinel_id" field.
func (ssc *SentinelSessionCreate) SetSentinelID(mi model.InternalID) *SentinelSessionCreate {
	ssc.mutation.SetSentinelID(mi)
	return ssc
}

// SetRefreshToken sets the "refresh_token" field.
func (ssc *SentinelSessionCreate) SetRefreshToken(s string) *SentinelSessionCreate {
	ssc.mutation.SetRefreshToken(s)
	return ssc
}

// SetExpireAt sets the "expire_at" field.
func (ssc *SentinelSessionCreate) SetExpireAt(t time.Time) *SentinelSessionCreate {
	ssc.mutation.SetExpireAt(t)
	return ssc
}

// SetStatus sets the "status" field.
func (ssc *SentinelSessionCreate) SetStatus(s sentinelsession.Status) *SentinelSessionCreate {
	ssc.mutation.SetStatus(s)
	return ssc
}

// SetCreatorID sets the "creator_id" field.
func (ssc *SentinelSessionCreate) SetCreatorID(mi model.InternalID) *SentinelSessionCreate {
	ssc.mutation.SetCreatorID(mi)
	return ssc
}

// SetLastUsedAt sets the "last_used_at" field.
func (ssc *SentinelSessionCreate) SetLastUsedAt(t time.Time) *SentinelSessionCreate {
	ssc.mutation.SetLastUsedAt(t)
	return ssc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (ssc *SentinelSessionCreate) SetNillableLastUsedAt(t *time.Time) *SentinelSessionCreate {
	if t != nil {
		ssc.SetLastUsedAt(*t)
	}
	return ssc
}

// SetLastRefreshedAt sets the "last_refreshed_at" field.
func (ssc *SentinelSessionCreate) SetLastRefreshedAt(t time.Time) *SentinelSessionCreate {
	ssc.mutation.SetLastRefreshedAt(t)
	return ssc
}

// SetNillableLastRefreshedAt sets the "last_refreshed_at" field if the given value is not nil.
func (ssc *SentinelSessionCreate) SetNillableLastRefreshedAt(t *time.Time) *SentinelSessionCreate {
	if t != nil {
		ssc.SetLastRefreshedAt(*t)
	}
	return ssc
}

// SetRefreshCount sets the "refresh_count" field.
func (ssc *SentinelSessionCreate) SetRefreshCount(i int64) *SentinelSessionCreate {
	ssc.mutation.SetRefreshCount(i)
	return ssc
}

// SetNillableRefreshCount sets the "refresh_count" field if the given value is not nil.
func (ssc *SentinelSessionCreate) SetNillableRefreshCount(i *int64) *SentinelSessionCreate {
	if i != nil {
		ssc.SetRefreshCount(*i)
	}
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *SentinelSessionCreate) SetUpdatedAt(t time.Time) *SentinelSessionCreate {
	ssc.mutation.SetUpdatedAt(t)
	return ssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssc *SentinelSessionCreate) SetNillableUpdatedAt(t *time.Time) *SentinelSessionCreate {
	if t != nil {
		ssc.SetUpdatedAt(*t)
	}
	return ssc
}

// SetCreatedAt sets the "created_at" field.
func (ssc *SentinelSessionCreate) SetCreatedAt(t time.Time) *SentinelSessionCreate {
	ssc.mutation.SetCreatedAt(t)
	return ssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssc *SentinelSessionCreate) SetNillableCreatedAt(t *time.Time) *SentinelSessionCreate {
	if t != nil {
		ssc.SetCreatedAt(*t)
	}
	return ssc
}

// SetID sets the "id" field.
func (ssc *SentinelSessionCreate) SetID(mi model.InternalID) *SentinelSessionCreate {
	ssc.mutation.SetID(mi)
	return ssc
}

// SetSentinel sets the "sentinel" edge to the Sentinel entity.
func (ssc *SentinelSessionCreate) SetSentinel(s *Sentinel) *SentinelSessionCreate {
	return ssc.SetSentinelID(s.ID)
}

// Mutation returns the SentinelSessionMutation object of the builder.
func (ssc *SentinelSessionCreate) Mutation() *SentinelSessionMutation {
	return ssc.mutation
}

// Save creates the SentinelSession in the database.
func (ssc *SentinelSessionCreate) Save(ctx context.Context) (*SentinelSession, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SentinelSessionCreate) SaveX(ctx context.Context) *SentinelSession {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SentinelSessionCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SentinelSessionCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SentinelSessionCreate) defaults() {
	if _, ok := ssc.mutation.RefreshCount(); !ok {
		v := sentinelsession.DefaultRefreshCount
		ssc.mutation.SetRefreshCount(v)
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		v := sentinelsession.DefaultUpdatedAt()
		ssc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		v := sentinelsession.DefaultCreatedAt()
		ssc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SentinelSessionCreate) check() error {
	if _, ok := ssc.mutation.SentinelID(); !ok {
		return &ValidationError{Name: "sentinel_id", err: errors.New(`ent: missing required field "SentinelSession.sentinel_id"`)}
	}
	if _, ok := ssc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "SentinelSession.refresh_token"`)}
	}
	if _, ok := ssc.mutation.ExpireAt(); !ok {
		return &ValidationError{Name: "expire_at", err: errors.New(`ent: missing required field "SentinelSession.expire_at"`)}
	}
	if _, ok := ssc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SentinelSession.status"`)}
	}
	if v, ok := ssc.mutation.Status(); ok {
		if err := sentinelsession.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SentinelSession.status": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "SentinelSession.creator_id"`)}
	}
	if _, ok := ssc.mutation.RefreshCount(); !ok {
		return &ValidationError{Name: "refresh_count", err: errors.New(`ent: missing required field "SentinelSession.refresh_count"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SentinelSession.updated_at"`)}
	}
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SentinelSession.created_at"`)}
	}
	if len(ssc.mutation.SentinelIDs()) == 0 {
		return &ValidationError{Name: "sentinel", err: errors.New(`ent: missing required edge "SentinelSession.sentinel"`)}
	}
	return nil
}

func (ssc *SentinelSessionCreate) sqlSave(ctx context.Context) (*SentinelSession, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SentinelSessionCreate) createSpec() (*SentinelSession, *sqlgraph.CreateSpec) {
	var (
		_node = &SentinelSession{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(sentinelsession.Table, sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = ssc.conflict
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.RefreshToken(); ok {
		_spec.SetField(sentinelsession.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := ssc.mutation.ExpireAt(); ok {
		_spec.SetField(sentinelsession.FieldExpireAt, field.TypeTime, value)
		_node.ExpireAt = value
	}
	if value, ok := ssc.mutation.Status(); ok {
		_spec.SetField(sentinelsession.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ssc.mutation.CreatorID(); ok {
		_spec.SetField(sentinelsession.FieldCreatorID, field.TypeInt64, value)
		_node.CreatorID = value
	}
	if value, ok := ssc.mutation.LastUsedAt(); ok {
		_spec.SetField(sentinelsession.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = value
	}
	if value, ok := ssc.mutation.LastRefreshedAt(); ok {
		_spec.SetField(sentinelsession.FieldLastRefreshedAt, field.TypeTime, value)
		_node.LastRefreshedAt = value
	}
	if value, ok := ssc.mutation.RefreshCount(); ok {
		_spec.SetField(sentinelsession.FieldRefreshCount, field.TypeInt64, value)
		_node.RefreshCount = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelsession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelsession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ssc.mutation.SentinelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinelsession.SentinelTable,
			Columns: []string{sentinelsession.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SentinelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SentinelSession.Create().
//		SetSentinelID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelSessionUpsert) {
//			SetSentinelID(v+v).
//		}).
//		Exec(ctx)
func (ssc *SentinelSessionCreate) OnConflict(opts ...sql.ConflictOption) *SentinelSessionUpsertOne {
	ssc.conflict = opts
	return &SentinelSessionUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SentinelSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *SentinelSessionCreate) OnConflictColumns(columns ...string) *SentinelSessionUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &SentinelSessionUpsertOne{
		create: ssc,
	}
}

type (
	// SentinelSessionUpsertOne is the builder for "upsert"-ing
	//  one SentinelSession node.
	SentinelSessionUpsertOne struct {
		create *SentinelSessionCreate
	}

	// SentinelSessionUpsert is the "OnConflict" setter.
	SentinelSessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetSentinelID sets the "sentinel_id" field.
func (u *SentinelSessionUpsert) SetSentinelID(v model.InternalID) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldSentinelID, v)
	return u
}

// UpdateSentinelID sets the "sentinel_id" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateSentinelID() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldSentinelID)
	return u
}

// SetRefreshToken sets the "refresh_token" field.
func (u *SentinelSessionUpsert) SetRefreshToken(v string) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldRefreshToken, v)
	return u
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateRefreshToken() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldRefreshToken)
	return u
}

// SetExpireAt sets the "expire_at" field.
func (u *SentinelSessionUpsert) SetExpireAt(v time.Time) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldExpireAt, v)
	return u
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateExpireAt() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldExpireAt)
	return u
}

// SetStatus sets the "status" field.
func (u *SentinelSessionUpsert) SetStatus(v sentinelsession.Status) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateStatus() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldStatus)
	return u
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *SentinelSessionUpsert) SetLastUsedAt(v time.Time) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldLastUsedAt, v)
	return u
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateLastUsedAt() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldLastUsedAt)
	return u
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (u *SentinelSessionUpsert) ClearLastUsedAt() *SentinelSessionUpsert {
	u.SetNull(sentinelsession.FieldLastUsedAt)
	return u
}

// SetLastRefreshedAt sets the "last_refreshed_at" field.
func (u *SentinelSessionUpsert) SetLastRefreshedAt(v time.Time) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldLastRefreshedAt, v)
	return u
}

// UpdateLastRefreshedAt sets the "last_refreshed_at" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateLastRefreshedAt() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldLastRefreshedAt)
	return u
}

// ClearLastRefreshedAt clears the value of the "last_refreshed_at" field.
func (u *SentinelSessionUpsert) ClearLastRefreshedAt() *SentinelSessionUpsert {
	u.SetNull(sentinelsession.FieldLastRefreshedAt)
	return u
}

// SetRefreshCount sets the "refresh_count" field.
func (u *SentinelSessionUpsert) SetRefreshCount(v int64) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldRefreshCount, v)
	return u
}

// UpdateRefreshCount sets the "refresh_count" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateRefreshCount() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldRefreshCount)
	return u
}

// AddRefreshCount adds v to the "refresh_count" field.
func (u *SentinelSessionUpsert) AddRefreshCount(v int64) *SentinelSessionUpsert {
	u.Add(sentinelsession.FieldRefreshCount, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelSessionUpsert) SetUpdatedAt(v time.Time) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateUpdatedAt() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelSessionUpsert) SetCreatedAt(v time.Time) *SentinelSessionUpsert {
	u.Set(sentinelsession.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelSessionUpsert) UpdateCreatedAt() *SentinelSessionUpsert {
	u.SetExcluded(sentinelsession.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SentinelSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sentinelsession.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SentinelSessionUpsertOne) UpdateNewValues() *SentinelSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sentinelsession.FieldID)
		}
		if _, exists := u.create.mutation.CreatorID(); exists {
			s.SetIgnore(sentinelsession.FieldCreatorID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SentinelSession.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SentinelSessionUpsertOne) Ignore() *SentinelSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelSessionUpsertOne) DoNothing() *SentinelSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelSessionCreate.OnConflict
// documentation for more info.
func (u *SentinelSessionUpsertOne) Update(set func(*SentinelSessionUpsert)) *SentinelSessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetSentinelID sets the "sentinel_id" field.
func (u *SentinelSessionUpsertOne) SetSentinelID(v model.InternalID) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetSentinelID(v)
	})
}

// UpdateSentinelID sets the "sentinel_id" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateSentinelID() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateSentinelID()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *SentinelSessionUpsertOne) SetRefreshToken(v string) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateRefreshToken() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetExpireAt sets the "expire_at" field.
func (u *SentinelSessionUpsertOne) SetExpireAt(v time.Time) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetExpireAt(v)
	})
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateExpireAt() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateExpireAt()
	})
}

// SetStatus sets the "status" field.
func (u *SentinelSessionUpsertOne) SetStatus(v sentinelsession.Status) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateStatus() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateStatus()
	})
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *SentinelSessionUpsertOne) SetLastUsedAt(v time.Time) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetLastUsedAt(v)
	})
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateLastUsedAt() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateLastUsedAt()
	})
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (u *SentinelSessionUpsertOne) ClearLastUsedAt() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.ClearLastUsedAt()
	})
}

// SetLastRefreshedAt sets the "last_refreshed_at" field.
func (u *SentinelSessionUpsertOne) SetLastRefreshedAt(v time.Time) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetLastRefreshedAt(v)
	})
}

// UpdateLastRefreshedAt sets the "last_refreshed_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateLastRefreshedAt() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateLastRefreshedAt()
	})
}

// ClearLastRefreshedAt clears the value of the "last_refreshed_at" field.
func (u *SentinelSessionUpsertOne) ClearLastRefreshedAt() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.ClearLastRefreshedAt()
	})
}

// SetRefreshCount sets the "refresh_count" field.
func (u *SentinelSessionUpsertOne) SetRefreshCount(v int64) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetRefreshCount(v)
	})
}

// AddRefreshCount adds v to the "refresh_count" field.
func (u *SentinelSessionUpsertOne) AddRefreshCount(v int64) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.AddRefreshCount(v)
	})
}

// UpdateRefreshCount sets the "refresh_count" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateRefreshCount() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateRefreshCount()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelSessionUpsertOne) SetUpdatedAt(v time.Time) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateUpdatedAt() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelSessionUpsertOne) SetCreatedAt(v time.Time) *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertOne) UpdateCreatedAt() *SentinelSessionUpsertOne {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SentinelSessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelSessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelSessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SentinelSessionUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SentinelSessionUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SentinelSessionCreateBulk is the builder for creating many SentinelSession entities in bulk.
type SentinelSessionCreateBulk struct {
	config
	err      error
	builders []*SentinelSessionCreate
	conflict []sql.ConflictOption
}

// Save creates the SentinelSession entities in the database.
func (sscb *SentinelSessionCreateBulk) Save(ctx context.Context) ([]*SentinelSession, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SentinelSession, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SentinelSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SentinelSessionCreateBulk) SaveX(ctx context.Context) []*SentinelSession {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SentinelSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SentinelSessionCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SentinelSession.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelSessionUpsert) {
//			SetSentinelID(v+v).
//		}).
//		Exec(ctx)
func (sscb *SentinelSessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SentinelSessionUpsertBulk {
	sscb.conflict = opts
	return &SentinelSessionUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SentinelSession.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *SentinelSessionCreateBulk) OnConflictColumns(columns ...string) *SentinelSessionUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &SentinelSessionUpsertBulk{
		create: sscb,
	}
}

// SentinelSessionUpsertBulk is the builder for "upsert"-ing
// a bulk of SentinelSession nodes.
type SentinelSessionUpsertBulk struct {
	create *SentinelSessionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SentinelSession.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sentinelsession.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SentinelSessionUpsertBulk) UpdateNewValues() *SentinelSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sentinelsession.FieldID)
			}
			if _, exists := b.mutation.CreatorID(); exists {
				s.SetIgnore(sentinelsession.FieldCreatorID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SentinelSession.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SentinelSessionUpsertBulk) Ignore() *SentinelSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelSessionUpsertBulk) DoNothing() *SentinelSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelSessionCreateBulk.OnConflict
// documentation for more info.
func (u *SentinelSessionUpsertBulk) Update(set func(*SentinelSessionUpsert)) *SentinelSessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelSessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetSentinelID sets the "sentinel_id" field.
func (u *SentinelSessionUpsertBulk) SetSentinelID(v model.InternalID) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetSentinelID(v)
	})
}

// UpdateSentinelID sets the "sentinel_id" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateSentinelID() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateSentinelID()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *SentinelSessionUpsertBulk) SetRefreshToken(v string) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateRefreshToken() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateRefreshToken()
	})
}

// SetExpireAt sets the "expire_at" field.
func (u *SentinelSessionUpsertBulk) SetExpireAt(v time.Time) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetExpireAt(v)
	})
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateExpireAt() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateExpireAt()
	})
}

// SetStatus sets the "status" field.
func (u *SentinelSessionUpsertBulk) SetStatus(v sentinelsession.Status) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateStatus() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateStatus()
	})
}

// SetLastUsedAt sets the "last_used_at" field.
func (u *SentinelSessionUpsertBulk) SetLastUsedAt(v time.Time) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetLastUsedAt(v)
	})
}

// UpdateLastUsedAt sets the "last_used_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateLastUsedAt() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateLastUsedAt()
	})
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (u *SentinelSessionUpsertBulk) ClearLastUsedAt() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.ClearLastUsedAt()
	})
}

// SetLastRefreshedAt sets the "last_refreshed_at" field.
func (u *SentinelSessionUpsertBulk) SetLastRefreshedAt(v time.Time) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetLastRefreshedAt(v)
	})
}

// UpdateLastRefreshedAt sets the "last_refreshed_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateLastRefreshedAt() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateLastRefreshedAt()
	})
}

// ClearLastRefreshedAt clears the value of the "last_refreshed_at" field.
func (u *SentinelSessionUpsertBulk) ClearLastRefreshedAt() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.ClearLastRefreshedAt()
	})
}

// SetRefreshCount sets the "refresh_count" field.
func (u *SentinelSessionUpsertBulk) SetRefreshCount(v int64) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetRefreshCount(v)
	})
}

// AddRefreshCount adds v to the "refresh_count" field.
func (u *SentinelSessionUpsertBulk) AddRefreshCount(v int64) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.AddRefreshCount(v)
	})
}

// UpdateRefreshCount sets the "refresh_count" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateRefreshCount() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateRefreshCount()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelSessionUpsertBulk) SetUpdatedAt(v time.Time) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateUpdatedAt() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelSessionUpsertBulk) SetCreatedAt(v time.Time) *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelSessionUpsertBulk) UpdateCreatedAt() *SentinelSessionUpsertBulk {
	return u.Update(func(s *SentinelSessionUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SentinelSessionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SentinelSessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelSessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelSessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
