// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeapp"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeappbinary"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelAppBinaryCreate is the builder for creating a SentinelAppBinary entity.
type SentinelAppBinaryCreate struct {
	config
	mutation *SentinelAppBinaryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUnionID sets the "union_id" field.
func (sabc *SentinelAppBinaryCreate) SetUnionID(s string) *SentinelAppBinaryCreate {
	sabc.mutation.SetUnionID(s)
	return sabc
}

// SetSentinelID sets the "sentinel_id" field.
func (sabc *SentinelAppBinaryCreate) SetSentinelID(mi model.InternalID) *SentinelAppBinaryCreate {
	sabc.mutation.SetSentinelID(mi)
	return sabc
}

// SetSentinelLibraryReportedID sets the "sentinel_library_reported_id" field.
func (sabc *SentinelAppBinaryCreate) SetSentinelLibraryReportedID(i int64) *SentinelAppBinaryCreate {
	sabc.mutation.SetSentinelLibraryReportedID(i)
	return sabc
}

// SetGeneratedID sets the "generated_id" field.
func (sabc *SentinelAppBinaryCreate) SetGeneratedID(s string) *SentinelAppBinaryCreate {
	sabc.mutation.SetGeneratedID(s)
	return sabc
}

// SetSizeBytes sets the "size_bytes" field.
func (sabc *SentinelAppBinaryCreate) SetSizeBytes(i int64) *SentinelAppBinaryCreate {
	sabc.mutation.SetSizeBytes(i)
	return sabc
}

// SetNeedToken sets the "need_token" field.
func (sabc *SentinelAppBinaryCreate) SetNeedToken(b bool) *SentinelAppBinaryCreate {
	sabc.mutation.SetNeedToken(b)
	return sabc
}

// SetName sets the "name" field.
func (sabc *SentinelAppBinaryCreate) SetName(s string) *SentinelAppBinaryCreate {
	sabc.mutation.SetName(s)
	return sabc
}

// SetVersion sets the "version" field.
func (sabc *SentinelAppBinaryCreate) SetVersion(s string) *SentinelAppBinaryCreate {
	sabc.mutation.SetVersion(s)
	return sabc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sabc *SentinelAppBinaryCreate) SetNillableVersion(s *string) *SentinelAppBinaryCreate {
	if s != nil {
		sabc.SetVersion(*s)
	}
	return sabc
}

// SetDeveloper sets the "developer" field.
func (sabc *SentinelAppBinaryCreate) SetDeveloper(s string) *SentinelAppBinaryCreate {
	sabc.mutation.SetDeveloper(s)
	return sabc
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (sabc *SentinelAppBinaryCreate) SetNillableDeveloper(s *string) *SentinelAppBinaryCreate {
	if s != nil {
		sabc.SetDeveloper(*s)
	}
	return sabc
}

// SetPublisher sets the "publisher" field.
func (sabc *SentinelAppBinaryCreate) SetPublisher(s string) *SentinelAppBinaryCreate {
	sabc.mutation.SetPublisher(s)
	return sabc
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (sabc *SentinelAppBinaryCreate) SetNillablePublisher(s *string) *SentinelAppBinaryCreate {
	if s != nil {
		sabc.SetPublisher(*s)
	}
	return sabc
}

// SetUpdatedAt sets the "updated_at" field.
func (sabc *SentinelAppBinaryCreate) SetUpdatedAt(t time.Time) *SentinelAppBinaryCreate {
	sabc.mutation.SetUpdatedAt(t)
	return sabc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sabc *SentinelAppBinaryCreate) SetNillableUpdatedAt(t *time.Time) *SentinelAppBinaryCreate {
	if t != nil {
		sabc.SetUpdatedAt(*t)
	}
	return sabc
}

// SetCreatedAt sets the "created_at" field.
func (sabc *SentinelAppBinaryCreate) SetCreatedAt(t time.Time) *SentinelAppBinaryCreate {
	sabc.mutation.SetCreatedAt(t)
	return sabc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sabc *SentinelAppBinaryCreate) SetNillableCreatedAt(t *time.Time) *SentinelAppBinaryCreate {
	if t != nil {
		sabc.SetCreatedAt(*t)
	}
	return sabc
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (sabc *SentinelAppBinaryCreate) SetAppBinaryReportSequence(i int64) *SentinelAppBinaryCreate {
	sabc.mutation.SetAppBinaryReportSequence(i)
	return sabc
}

// SetID sets the "id" field.
func (sabc *SentinelAppBinaryCreate) SetID(mi model.InternalID) *SentinelAppBinaryCreate {
	sabc.mutation.SetID(mi)
	return sabc
}

// AddStoreAppIDs adds the "store_app" edge to the StoreApp entity by IDs.
func (sabc *SentinelAppBinaryCreate) AddStoreAppIDs(ids ...model.InternalID) *SentinelAppBinaryCreate {
	sabc.mutation.AddStoreAppIDs(ids...)
	return sabc
}

// AddStoreApp adds the "store_app" edges to the StoreApp entity.
func (sabc *SentinelAppBinaryCreate) AddStoreApp(s ...*StoreApp) *SentinelAppBinaryCreate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sabc.AddStoreAppIDs(ids...)
}

// AddStoreAppBinaryIDs adds the "store_app_binary" edge to the StoreAppBinary entity by IDs.
func (sabc *SentinelAppBinaryCreate) AddStoreAppBinaryIDs(ids ...int) *SentinelAppBinaryCreate {
	sabc.mutation.AddStoreAppBinaryIDs(ids...)
	return sabc
}

// AddStoreAppBinary adds the "store_app_binary" edges to the StoreAppBinary entity.
func (sabc *SentinelAppBinaryCreate) AddStoreAppBinary(s ...*StoreAppBinary) *SentinelAppBinaryCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sabc.AddStoreAppBinaryIDs(ids...)
}

// Mutation returns the SentinelAppBinaryMutation object of the builder.
func (sabc *SentinelAppBinaryCreate) Mutation() *SentinelAppBinaryMutation {
	return sabc.mutation
}

// Save creates the SentinelAppBinary in the database.
func (sabc *SentinelAppBinaryCreate) Save(ctx context.Context) (*SentinelAppBinary, error) {
	sabc.defaults()
	return withHooks(ctx, sabc.sqlSave, sabc.mutation, sabc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sabc *SentinelAppBinaryCreate) SaveX(ctx context.Context) *SentinelAppBinary {
	v, err := sabc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sabc *SentinelAppBinaryCreate) Exec(ctx context.Context) error {
	_, err := sabc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabc *SentinelAppBinaryCreate) ExecX(ctx context.Context) {
	if err := sabc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sabc *SentinelAppBinaryCreate) defaults() {
	if _, ok := sabc.mutation.UpdatedAt(); !ok {
		v := sentinelappbinary.DefaultUpdatedAt()
		sabc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sabc.mutation.CreatedAt(); !ok {
		v := sentinelappbinary.DefaultCreatedAt()
		sabc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sabc *SentinelAppBinaryCreate) check() error {
	if _, ok := sabc.mutation.UnionID(); !ok {
		return &ValidationError{Name: "union_id", err: errors.New(`ent: missing required field "SentinelAppBinary.union_id"`)}
	}
	if _, ok := sabc.mutation.SentinelID(); !ok {
		return &ValidationError{Name: "sentinel_id", err: errors.New(`ent: missing required field "SentinelAppBinary.sentinel_id"`)}
	}
	if _, ok := sabc.mutation.SentinelLibraryReportedID(); !ok {
		return &ValidationError{Name: "sentinel_library_reported_id", err: errors.New(`ent: missing required field "SentinelAppBinary.sentinel_library_reported_id"`)}
	}
	if _, ok := sabc.mutation.GeneratedID(); !ok {
		return &ValidationError{Name: "generated_id", err: errors.New(`ent: missing required field "SentinelAppBinary.generated_id"`)}
	}
	if _, ok := sabc.mutation.SizeBytes(); !ok {
		return &ValidationError{Name: "size_bytes", err: errors.New(`ent: missing required field "SentinelAppBinary.size_bytes"`)}
	}
	if _, ok := sabc.mutation.NeedToken(); !ok {
		return &ValidationError{Name: "need_token", err: errors.New(`ent: missing required field "SentinelAppBinary.need_token"`)}
	}
	if _, ok := sabc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SentinelAppBinary.name"`)}
	}
	if _, ok := sabc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SentinelAppBinary.updated_at"`)}
	}
	if _, ok := sabc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SentinelAppBinary.created_at"`)}
	}
	if _, ok := sabc.mutation.AppBinaryReportSequence(); !ok {
		return &ValidationError{Name: "app_binary_report_sequence", err: errors.New(`ent: missing required field "SentinelAppBinary.app_binary_report_sequence"`)}
	}
	return nil
}

func (sabc *SentinelAppBinaryCreate) sqlSave(ctx context.Context) (*SentinelAppBinary, error) {
	if err := sabc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sabc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sabc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	sabc.mutation.id = &_node.ID
	sabc.mutation.done = true
	return _node, nil
}

func (sabc *SentinelAppBinaryCreate) createSpec() (*SentinelAppBinary, *sqlgraph.CreateSpec) {
	var (
		_node = &SentinelAppBinary{config: sabc.config}
		_spec = sqlgraph.NewCreateSpec(sentinelappbinary.Table, sqlgraph.NewFieldSpec(sentinelappbinary.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sabc.conflict
	if id, ok := sabc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sabc.mutation.UnionID(); ok {
		_spec.SetField(sentinelappbinary.FieldUnionID, field.TypeString, value)
		_node.UnionID = value
	}
	if value, ok := sabc.mutation.SentinelID(); ok {
		_spec.SetField(sentinelappbinary.FieldSentinelID, field.TypeInt64, value)
		_node.SentinelID = value
	}
	if value, ok := sabc.mutation.SentinelLibraryReportedID(); ok {
		_spec.SetField(sentinelappbinary.FieldSentinelLibraryReportedID, field.TypeInt64, value)
		_node.SentinelLibraryReportedID = value
	}
	if value, ok := sabc.mutation.GeneratedID(); ok {
		_spec.SetField(sentinelappbinary.FieldGeneratedID, field.TypeString, value)
		_node.GeneratedID = value
	}
	if value, ok := sabc.mutation.SizeBytes(); ok {
		_spec.SetField(sentinelappbinary.FieldSizeBytes, field.TypeInt64, value)
		_node.SizeBytes = value
	}
	if value, ok := sabc.mutation.NeedToken(); ok {
		_spec.SetField(sentinelappbinary.FieldNeedToken, field.TypeBool, value)
		_node.NeedToken = value
	}
	if value, ok := sabc.mutation.Name(); ok {
		_spec.SetField(sentinelappbinary.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sabc.mutation.Version(); ok {
		_spec.SetField(sentinelappbinary.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := sabc.mutation.Developer(); ok {
		_spec.SetField(sentinelappbinary.FieldDeveloper, field.TypeString, value)
		_node.Developer = value
	}
	if value, ok := sabc.mutation.Publisher(); ok {
		_spec.SetField(sentinelappbinary.FieldPublisher, field.TypeString, value)
		_node.Publisher = value
	}
	if value, ok := sabc.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelappbinary.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sabc.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelappbinary.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sabc.mutation.AppBinaryReportSequence(); ok {
		_spec.SetField(sentinelappbinary.FieldAppBinaryReportSequence, field.TypeInt64, value)
		_node.AppBinaryReportSequence = value
	}
	if nodes := sabc.mutation.StoreAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sentinelappbinary.StoreAppTable,
			Columns: sentinelappbinary.StoreAppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storeapp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &StoreAppBinaryCreate{config: sabc.config, mutation: newStoreAppBinaryMutation(sabc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sabc.mutation.StoreAppBinaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sentinelappbinary.StoreAppBinaryTable,
			Columns: []string{sentinelappbinary.StoreAppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storeappbinary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SentinelAppBinary.Create().
//		SetUnionID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelAppBinaryUpsert) {
//			SetUnionID(v+v).
//		}).
//		Exec(ctx)
func (sabc *SentinelAppBinaryCreate) OnConflict(opts ...sql.ConflictOption) *SentinelAppBinaryUpsertOne {
	sabc.conflict = opts
	return &SentinelAppBinaryUpsertOne{
		create: sabc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SentinelAppBinary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sabc *SentinelAppBinaryCreate) OnConflictColumns(columns ...string) *SentinelAppBinaryUpsertOne {
	sabc.conflict = append(sabc.conflict, sql.ConflictColumns(columns...))
	return &SentinelAppBinaryUpsertOne{
		create: sabc,
	}
}

type (
	// SentinelAppBinaryUpsertOne is the builder for "upsert"-ing
	//  one SentinelAppBinary node.
	SentinelAppBinaryUpsertOne struct {
		create *SentinelAppBinaryCreate
	}

	// SentinelAppBinaryUpsert is the "OnConflict" setter.
	SentinelAppBinaryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUnionID sets the "union_id" field.
func (u *SentinelAppBinaryUpsert) SetUnionID(v string) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldUnionID, v)
	return u
}

// UpdateUnionID sets the "union_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateUnionID() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldUnionID)
	return u
}

// SetSentinelID sets the "sentinel_id" field.
func (u *SentinelAppBinaryUpsert) SetSentinelID(v model.InternalID) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldSentinelID, v)
	return u
}

// UpdateSentinelID sets the "sentinel_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateSentinelID() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldSentinelID)
	return u
}

// AddSentinelID adds v to the "sentinel_id" field.
func (u *SentinelAppBinaryUpsert) AddSentinelID(v model.InternalID) *SentinelAppBinaryUpsert {
	u.Add(sentinelappbinary.FieldSentinelID, v)
	return u
}

// SetSentinelLibraryReportedID sets the "sentinel_library_reported_id" field.
func (u *SentinelAppBinaryUpsert) SetSentinelLibraryReportedID(v int64) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldSentinelLibraryReportedID, v)
	return u
}

// UpdateSentinelLibraryReportedID sets the "sentinel_library_reported_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateSentinelLibraryReportedID() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldSentinelLibraryReportedID)
	return u
}

// AddSentinelLibraryReportedID adds v to the "sentinel_library_reported_id" field.
func (u *SentinelAppBinaryUpsert) AddSentinelLibraryReportedID(v int64) *SentinelAppBinaryUpsert {
	u.Add(sentinelappbinary.FieldSentinelLibraryReportedID, v)
	return u
}

// SetGeneratedID sets the "generated_id" field.
func (u *SentinelAppBinaryUpsert) SetGeneratedID(v string) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldGeneratedID, v)
	return u
}

// UpdateGeneratedID sets the "generated_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateGeneratedID() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldGeneratedID)
	return u
}

// SetSizeBytes sets the "size_bytes" field.
func (u *SentinelAppBinaryUpsert) SetSizeBytes(v int64) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldSizeBytes, v)
	return u
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateSizeBytes() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldSizeBytes)
	return u
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *SentinelAppBinaryUpsert) AddSizeBytes(v int64) *SentinelAppBinaryUpsert {
	u.Add(sentinelappbinary.FieldSizeBytes, v)
	return u
}

// SetNeedToken sets the "need_token" field.
func (u *SentinelAppBinaryUpsert) SetNeedToken(v bool) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldNeedToken, v)
	return u
}

// UpdateNeedToken sets the "need_token" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateNeedToken() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldNeedToken)
	return u
}

// SetName sets the "name" field.
func (u *SentinelAppBinaryUpsert) SetName(v string) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateName() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldName)
	return u
}

// SetVersion sets the "version" field.
func (u *SentinelAppBinaryUpsert) SetVersion(v string) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateVersion() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldVersion)
	return u
}

// ClearVersion clears the value of the "version" field.
func (u *SentinelAppBinaryUpsert) ClearVersion() *SentinelAppBinaryUpsert {
	u.SetNull(sentinelappbinary.FieldVersion)
	return u
}

// SetDeveloper sets the "developer" field.
func (u *SentinelAppBinaryUpsert) SetDeveloper(v string) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldDeveloper, v)
	return u
}

// UpdateDeveloper sets the "developer" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateDeveloper() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldDeveloper)
	return u
}

// ClearDeveloper clears the value of the "developer" field.
func (u *SentinelAppBinaryUpsert) ClearDeveloper() *SentinelAppBinaryUpsert {
	u.SetNull(sentinelappbinary.FieldDeveloper)
	return u
}

// SetPublisher sets the "publisher" field.
func (u *SentinelAppBinaryUpsert) SetPublisher(v string) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldPublisher, v)
	return u
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdatePublisher() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldPublisher)
	return u
}

// ClearPublisher clears the value of the "publisher" field.
func (u *SentinelAppBinaryUpsert) ClearPublisher() *SentinelAppBinaryUpsert {
	u.SetNull(sentinelappbinary.FieldPublisher)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelAppBinaryUpsert) SetUpdatedAt(v time.Time) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateUpdatedAt() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelAppBinaryUpsert) SetCreatedAt(v time.Time) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateCreatedAt() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldCreatedAt)
	return u
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (u *SentinelAppBinaryUpsert) SetAppBinaryReportSequence(v int64) *SentinelAppBinaryUpsert {
	u.Set(sentinelappbinary.FieldAppBinaryReportSequence, v)
	return u
}

// UpdateAppBinaryReportSequence sets the "app_binary_report_sequence" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsert) UpdateAppBinaryReportSequence() *SentinelAppBinaryUpsert {
	u.SetExcluded(sentinelappbinary.FieldAppBinaryReportSequence)
	return u
}

// AddAppBinaryReportSequence adds v to the "app_binary_report_sequence" field.
func (u *SentinelAppBinaryUpsert) AddAppBinaryReportSequence(v int64) *SentinelAppBinaryUpsert {
	u.Add(sentinelappbinary.FieldAppBinaryReportSequence, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SentinelAppBinary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sentinelappbinary.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SentinelAppBinaryUpsertOne) UpdateNewValues() *SentinelAppBinaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sentinelappbinary.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SentinelAppBinary.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SentinelAppBinaryUpsertOne) Ignore() *SentinelAppBinaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelAppBinaryUpsertOne) DoNothing() *SentinelAppBinaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelAppBinaryCreate.OnConflict
// documentation for more info.
func (u *SentinelAppBinaryUpsertOne) Update(set func(*SentinelAppBinaryUpsert)) *SentinelAppBinaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelAppBinaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUnionID sets the "union_id" field.
func (u *SentinelAppBinaryUpsertOne) SetUnionID(v string) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetUnionID(v)
	})
}

// UpdateUnionID sets the "union_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateUnionID() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateUnionID()
	})
}

// SetSentinelID sets the "sentinel_id" field.
func (u *SentinelAppBinaryUpsertOne) SetSentinelID(v model.InternalID) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetSentinelID(v)
	})
}

// AddSentinelID adds v to the "sentinel_id" field.
func (u *SentinelAppBinaryUpsertOne) AddSentinelID(v model.InternalID) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.AddSentinelID(v)
	})
}

// UpdateSentinelID sets the "sentinel_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateSentinelID() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateSentinelID()
	})
}

// SetSentinelLibraryReportedID sets the "sentinel_library_reported_id" field.
func (u *SentinelAppBinaryUpsertOne) SetSentinelLibraryReportedID(v int64) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetSentinelLibraryReportedID(v)
	})
}

// AddSentinelLibraryReportedID adds v to the "sentinel_library_reported_id" field.
func (u *SentinelAppBinaryUpsertOne) AddSentinelLibraryReportedID(v int64) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.AddSentinelLibraryReportedID(v)
	})
}

// UpdateSentinelLibraryReportedID sets the "sentinel_library_reported_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateSentinelLibraryReportedID() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateSentinelLibraryReportedID()
	})
}

// SetGeneratedID sets the "generated_id" field.
func (u *SentinelAppBinaryUpsertOne) SetGeneratedID(v string) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetGeneratedID(v)
	})
}

// UpdateGeneratedID sets the "generated_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateGeneratedID() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateGeneratedID()
	})
}

// SetSizeBytes sets the "size_bytes" field.
func (u *SentinelAppBinaryUpsertOne) SetSizeBytes(v int64) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetSizeBytes(v)
	})
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *SentinelAppBinaryUpsertOne) AddSizeBytes(v int64) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.AddSizeBytes(v)
	})
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateSizeBytes() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateSizeBytes()
	})
}

// SetNeedToken sets the "need_token" field.
func (u *SentinelAppBinaryUpsertOne) SetNeedToken(v bool) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetNeedToken(v)
	})
}

// UpdateNeedToken sets the "need_token" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateNeedToken() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateNeedToken()
	})
}

// SetName sets the "name" field.
func (u *SentinelAppBinaryUpsertOne) SetName(v string) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateName() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *SentinelAppBinaryUpsertOne) SetVersion(v string) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateVersion() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *SentinelAppBinaryUpsertOne) ClearVersion() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.ClearVersion()
	})
}

// SetDeveloper sets the "developer" field.
func (u *SentinelAppBinaryUpsertOne) SetDeveloper(v string) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetDeveloper(v)
	})
}

// UpdateDeveloper sets the "developer" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateDeveloper() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateDeveloper()
	})
}

// ClearDeveloper clears the value of the "developer" field.
func (u *SentinelAppBinaryUpsertOne) ClearDeveloper() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.ClearDeveloper()
	})
}

// SetPublisher sets the "publisher" field.
func (u *SentinelAppBinaryUpsertOne) SetPublisher(v string) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetPublisher(v)
	})
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdatePublisher() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdatePublisher()
	})
}

// ClearPublisher clears the value of the "publisher" field.
func (u *SentinelAppBinaryUpsertOne) ClearPublisher() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.ClearPublisher()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelAppBinaryUpsertOne) SetUpdatedAt(v time.Time) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateUpdatedAt() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelAppBinaryUpsertOne) SetCreatedAt(v time.Time) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateCreatedAt() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (u *SentinelAppBinaryUpsertOne) SetAppBinaryReportSequence(v int64) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetAppBinaryReportSequence(v)
	})
}

// AddAppBinaryReportSequence adds v to the "app_binary_report_sequence" field.
func (u *SentinelAppBinaryUpsertOne) AddAppBinaryReportSequence(v int64) *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.AddAppBinaryReportSequence(v)
	})
}

// UpdateAppBinaryReportSequence sets the "app_binary_report_sequence" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertOne) UpdateAppBinaryReportSequence() *SentinelAppBinaryUpsertOne {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateAppBinaryReportSequence()
	})
}

// Exec executes the query.
func (u *SentinelAppBinaryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelAppBinaryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelAppBinaryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SentinelAppBinaryUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SentinelAppBinaryUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SentinelAppBinaryCreateBulk is the builder for creating many SentinelAppBinary entities in bulk.
type SentinelAppBinaryCreateBulk struct {
	config
	err      error
	builders []*SentinelAppBinaryCreate
	conflict []sql.ConflictOption
}

// Save creates the SentinelAppBinary entities in the database.
func (sabcb *SentinelAppBinaryCreateBulk) Save(ctx context.Context) ([]*SentinelAppBinary, error) {
	if sabcb.err != nil {
		return nil, sabcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sabcb.builders))
	nodes := make([]*SentinelAppBinary, len(sabcb.builders))
	mutators := make([]Mutator, len(sabcb.builders))
	for i := range sabcb.builders {
		func(i int, root context.Context) {
			builder := sabcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SentinelAppBinaryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sabcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sabcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sabcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sabcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sabcb *SentinelAppBinaryCreateBulk) SaveX(ctx context.Context) []*SentinelAppBinary {
	v, err := sabcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sabcb *SentinelAppBinaryCreateBulk) Exec(ctx context.Context) error {
	_, err := sabcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabcb *SentinelAppBinaryCreateBulk) ExecX(ctx context.Context) {
	if err := sabcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SentinelAppBinary.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelAppBinaryUpsert) {
//			SetUnionID(v+v).
//		}).
//		Exec(ctx)
func (sabcb *SentinelAppBinaryCreateBulk) OnConflict(opts ...sql.ConflictOption) *SentinelAppBinaryUpsertBulk {
	sabcb.conflict = opts
	return &SentinelAppBinaryUpsertBulk{
		create: sabcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SentinelAppBinary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sabcb *SentinelAppBinaryCreateBulk) OnConflictColumns(columns ...string) *SentinelAppBinaryUpsertBulk {
	sabcb.conflict = append(sabcb.conflict, sql.ConflictColumns(columns...))
	return &SentinelAppBinaryUpsertBulk{
		create: sabcb,
	}
}

// SentinelAppBinaryUpsertBulk is the builder for "upsert"-ing
// a bulk of SentinelAppBinary nodes.
type SentinelAppBinaryUpsertBulk struct {
	create *SentinelAppBinaryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SentinelAppBinary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sentinelappbinary.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SentinelAppBinaryUpsertBulk) UpdateNewValues() *SentinelAppBinaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sentinelappbinary.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SentinelAppBinary.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SentinelAppBinaryUpsertBulk) Ignore() *SentinelAppBinaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelAppBinaryUpsertBulk) DoNothing() *SentinelAppBinaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelAppBinaryCreateBulk.OnConflict
// documentation for more info.
func (u *SentinelAppBinaryUpsertBulk) Update(set func(*SentinelAppBinaryUpsert)) *SentinelAppBinaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelAppBinaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUnionID sets the "union_id" field.
func (u *SentinelAppBinaryUpsertBulk) SetUnionID(v string) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetUnionID(v)
	})
}

// UpdateUnionID sets the "union_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateUnionID() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateUnionID()
	})
}

// SetSentinelID sets the "sentinel_id" field.
func (u *SentinelAppBinaryUpsertBulk) SetSentinelID(v model.InternalID) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetSentinelID(v)
	})
}

// AddSentinelID adds v to the "sentinel_id" field.
func (u *SentinelAppBinaryUpsertBulk) AddSentinelID(v model.InternalID) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.AddSentinelID(v)
	})
}

// UpdateSentinelID sets the "sentinel_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateSentinelID() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateSentinelID()
	})
}

// SetSentinelLibraryReportedID sets the "sentinel_library_reported_id" field.
func (u *SentinelAppBinaryUpsertBulk) SetSentinelLibraryReportedID(v int64) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetSentinelLibraryReportedID(v)
	})
}

// AddSentinelLibraryReportedID adds v to the "sentinel_library_reported_id" field.
func (u *SentinelAppBinaryUpsertBulk) AddSentinelLibraryReportedID(v int64) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.AddSentinelLibraryReportedID(v)
	})
}

// UpdateSentinelLibraryReportedID sets the "sentinel_library_reported_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateSentinelLibraryReportedID() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateSentinelLibraryReportedID()
	})
}

// SetGeneratedID sets the "generated_id" field.
func (u *SentinelAppBinaryUpsertBulk) SetGeneratedID(v string) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetGeneratedID(v)
	})
}

// UpdateGeneratedID sets the "generated_id" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateGeneratedID() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateGeneratedID()
	})
}

// SetSizeBytes sets the "size_bytes" field.
func (u *SentinelAppBinaryUpsertBulk) SetSizeBytes(v int64) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetSizeBytes(v)
	})
}

// AddSizeBytes adds v to the "size_bytes" field.
func (u *SentinelAppBinaryUpsertBulk) AddSizeBytes(v int64) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.AddSizeBytes(v)
	})
}

// UpdateSizeBytes sets the "size_bytes" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateSizeBytes() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateSizeBytes()
	})
}

// SetNeedToken sets the "need_token" field.
func (u *SentinelAppBinaryUpsertBulk) SetNeedToken(v bool) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetNeedToken(v)
	})
}

// UpdateNeedToken sets the "need_token" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateNeedToken() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateNeedToken()
	})
}

// SetName sets the "name" field.
func (u *SentinelAppBinaryUpsertBulk) SetName(v string) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateName() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateName()
	})
}

// SetVersion sets the "version" field.
func (u *SentinelAppBinaryUpsertBulk) SetVersion(v string) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateVersion() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *SentinelAppBinaryUpsertBulk) ClearVersion() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.ClearVersion()
	})
}

// SetDeveloper sets the "developer" field.
func (u *SentinelAppBinaryUpsertBulk) SetDeveloper(v string) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetDeveloper(v)
	})
}

// UpdateDeveloper sets the "developer" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateDeveloper() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateDeveloper()
	})
}

// ClearDeveloper clears the value of the "developer" field.
func (u *SentinelAppBinaryUpsertBulk) ClearDeveloper() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.ClearDeveloper()
	})
}

// SetPublisher sets the "publisher" field.
func (u *SentinelAppBinaryUpsertBulk) SetPublisher(v string) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetPublisher(v)
	})
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdatePublisher() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdatePublisher()
	})
}

// ClearPublisher clears the value of the "publisher" field.
func (u *SentinelAppBinaryUpsertBulk) ClearPublisher() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.ClearPublisher()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelAppBinaryUpsertBulk) SetUpdatedAt(v time.Time) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateUpdatedAt() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelAppBinaryUpsertBulk) SetCreatedAt(v time.Time) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateCreatedAt() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (u *SentinelAppBinaryUpsertBulk) SetAppBinaryReportSequence(v int64) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.SetAppBinaryReportSequence(v)
	})
}

// AddAppBinaryReportSequence adds v to the "app_binary_report_sequence" field.
func (u *SentinelAppBinaryUpsertBulk) AddAppBinaryReportSequence(v int64) *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.AddAppBinaryReportSequence(v)
	})
}

// UpdateAppBinaryReportSequence sets the "app_binary_report_sequence" field to the value that was provided on create.
func (u *SentinelAppBinaryUpsertBulk) UpdateAppBinaryReportSequence() *SentinelAppBinaryUpsertBulk {
	return u.Update(func(s *SentinelAppBinaryUpsert) {
		s.UpdateAppBinaryReportSequence()
	})
}

// Exec executes the query.
func (u *SentinelAppBinaryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SentinelAppBinaryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelAppBinaryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelAppBinaryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
