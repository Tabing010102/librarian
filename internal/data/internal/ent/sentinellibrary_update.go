// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinel"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinellibrary"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelLibraryUpdate is the builder for updating SentinelLibrary entities.
type SentinelLibraryUpdate struct {
	config
	hooks    []Hook
	mutation *SentinelLibraryMutation
}

// Where appends a list predicates to the SentinelLibraryUpdate builder.
func (slu *SentinelLibraryUpdate) Where(ps ...predicate.SentinelLibrary) *SentinelLibraryUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetSentinelID sets the "sentinel_id" field.
func (slu *SentinelLibraryUpdate) SetSentinelID(mi model.InternalID) *SentinelLibraryUpdate {
	slu.mutation.SetSentinelID(mi)
	return slu
}

// SetNillableSentinelID sets the "sentinel_id" field if the given value is not nil.
func (slu *SentinelLibraryUpdate) SetNillableSentinelID(mi *model.InternalID) *SentinelLibraryUpdate {
	if mi != nil {
		slu.SetSentinelID(*mi)
	}
	return slu
}

// SetReportedID sets the "reported_id" field.
func (slu *SentinelLibraryUpdate) SetReportedID(i int64) *SentinelLibraryUpdate {
	slu.mutation.ResetReportedID()
	slu.mutation.SetReportedID(i)
	return slu
}

// SetNillableReportedID sets the "reported_id" field if the given value is not nil.
func (slu *SentinelLibraryUpdate) SetNillableReportedID(i *int64) *SentinelLibraryUpdate {
	if i != nil {
		slu.SetReportedID(*i)
	}
	return slu
}

// AddReportedID adds i to the "reported_id" field.
func (slu *SentinelLibraryUpdate) AddReportedID(i int64) *SentinelLibraryUpdate {
	slu.mutation.AddReportedID(i)
	return slu
}

// SetDownloadBasePath sets the "download_base_path" field.
func (slu *SentinelLibraryUpdate) SetDownloadBasePath(s string) *SentinelLibraryUpdate {
	slu.mutation.SetDownloadBasePath(s)
	return slu
}

// SetNillableDownloadBasePath sets the "download_base_path" field if the given value is not nil.
func (slu *SentinelLibraryUpdate) SetNillableDownloadBasePath(s *string) *SentinelLibraryUpdate {
	if s != nil {
		slu.SetDownloadBasePath(*s)
	}
	return slu
}

// SetActiveSnapshot sets the "active_snapshot" field.
func (slu *SentinelLibraryUpdate) SetActiveSnapshot(t time.Time) *SentinelLibraryUpdate {
	slu.mutation.SetActiveSnapshot(t)
	return slu
}

// SetNillableActiveSnapshot sets the "active_snapshot" field if the given value is not nil.
func (slu *SentinelLibraryUpdate) SetNillableActiveSnapshot(t *time.Time) *SentinelLibraryUpdate {
	if t != nil {
		slu.SetActiveSnapshot(*t)
	}
	return slu
}

// ClearActiveSnapshot clears the value of the "active_snapshot" field.
func (slu *SentinelLibraryUpdate) ClearActiveSnapshot() *SentinelLibraryUpdate {
	slu.mutation.ClearActiveSnapshot()
	return slu
}

// SetUpdatedAt sets the "updated_at" field.
func (slu *SentinelLibraryUpdate) SetUpdatedAt(t time.Time) *SentinelLibraryUpdate {
	slu.mutation.SetUpdatedAt(t)
	return slu
}

// SetCreatedAt sets the "created_at" field.
func (slu *SentinelLibraryUpdate) SetCreatedAt(t time.Time) *SentinelLibraryUpdate {
	slu.mutation.SetCreatedAt(t)
	return slu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slu *SentinelLibraryUpdate) SetNillableCreatedAt(t *time.Time) *SentinelLibraryUpdate {
	if t != nil {
		slu.SetCreatedAt(*t)
	}
	return slu
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (slu *SentinelLibraryUpdate) SetLibraryReportSequence(i int64) *SentinelLibraryUpdate {
	slu.mutation.ResetLibraryReportSequence()
	slu.mutation.SetLibraryReportSequence(i)
	return slu
}

// SetNillableLibraryReportSequence sets the "library_report_sequence" field if the given value is not nil.
func (slu *SentinelLibraryUpdate) SetNillableLibraryReportSequence(i *int64) *SentinelLibraryUpdate {
	if i != nil {
		slu.SetLibraryReportSequence(*i)
	}
	return slu
}

// AddLibraryReportSequence adds i to the "library_report_sequence" field.
func (slu *SentinelLibraryUpdate) AddLibraryReportSequence(i int64) *SentinelLibraryUpdate {
	slu.mutation.AddLibraryReportSequence(i)
	return slu
}

// SetSentinel sets the "sentinel" edge to the Sentinel entity.
func (slu *SentinelLibraryUpdate) SetSentinel(s *Sentinel) *SentinelLibraryUpdate {
	return slu.SetSentinelID(s.ID)
}

// Mutation returns the SentinelLibraryMutation object of the builder.
func (slu *SentinelLibraryUpdate) Mutation() *SentinelLibraryMutation {
	return slu.mutation
}

// ClearSentinel clears the "sentinel" edge to the Sentinel entity.
func (slu *SentinelLibraryUpdate) ClearSentinel() *SentinelLibraryUpdate {
	slu.mutation.ClearSentinel()
	return slu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SentinelLibraryUpdate) Save(ctx context.Context) (int, error) {
	slu.defaults()
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SentinelLibraryUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SentinelLibraryUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SentinelLibraryUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *SentinelLibraryUpdate) defaults() {
	if _, ok := slu.mutation.UpdatedAt(); !ok {
		v := sentinellibrary.UpdateDefaultUpdatedAt()
		slu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *SentinelLibraryUpdate) check() error {
	if slu.mutation.SentinelCleared() && len(slu.mutation.SentinelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SentinelLibrary.sentinel"`)
	}
	return nil
}

func (slu *SentinelLibraryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sentinellibrary.Table, sentinellibrary.Columns, sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.ReportedID(); ok {
		_spec.SetField(sentinellibrary.FieldReportedID, field.TypeInt64, value)
	}
	if value, ok := slu.mutation.AddedReportedID(); ok {
		_spec.AddField(sentinellibrary.FieldReportedID, field.TypeInt64, value)
	}
	if value, ok := slu.mutation.DownloadBasePath(); ok {
		_spec.SetField(sentinellibrary.FieldDownloadBasePath, field.TypeString, value)
	}
	if value, ok := slu.mutation.ActiveSnapshot(); ok {
		_spec.SetField(sentinellibrary.FieldActiveSnapshot, field.TypeTime, value)
	}
	if slu.mutation.ActiveSnapshotCleared() {
		_spec.ClearField(sentinellibrary.FieldActiveSnapshot, field.TypeTime)
	}
	if value, ok := slu.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinellibrary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := slu.mutation.CreatedAt(); ok {
		_spec.SetField(sentinellibrary.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := slu.mutation.LibraryReportSequence(); ok {
		_spec.SetField(sentinellibrary.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := slu.mutation.AddedLibraryReportSequence(); ok {
		_spec.AddField(sentinellibrary.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if slu.mutation.SentinelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinellibrary.SentinelTable,
			Columns: []string{sentinellibrary.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.SentinelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinellibrary.SentinelTable,
			Columns: []string{sentinellibrary.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinellibrary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// SentinelLibraryUpdateOne is the builder for updating a single SentinelLibrary entity.
type SentinelLibraryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SentinelLibraryMutation
}

// SetSentinelID sets the "sentinel_id" field.
func (sluo *SentinelLibraryUpdateOne) SetSentinelID(mi model.InternalID) *SentinelLibraryUpdateOne {
	sluo.mutation.SetSentinelID(mi)
	return sluo
}

// SetNillableSentinelID sets the "sentinel_id" field if the given value is not nil.
func (sluo *SentinelLibraryUpdateOne) SetNillableSentinelID(mi *model.InternalID) *SentinelLibraryUpdateOne {
	if mi != nil {
		sluo.SetSentinelID(*mi)
	}
	return sluo
}

// SetReportedID sets the "reported_id" field.
func (sluo *SentinelLibraryUpdateOne) SetReportedID(i int64) *SentinelLibraryUpdateOne {
	sluo.mutation.ResetReportedID()
	sluo.mutation.SetReportedID(i)
	return sluo
}

// SetNillableReportedID sets the "reported_id" field if the given value is not nil.
func (sluo *SentinelLibraryUpdateOne) SetNillableReportedID(i *int64) *SentinelLibraryUpdateOne {
	if i != nil {
		sluo.SetReportedID(*i)
	}
	return sluo
}

// AddReportedID adds i to the "reported_id" field.
func (sluo *SentinelLibraryUpdateOne) AddReportedID(i int64) *SentinelLibraryUpdateOne {
	sluo.mutation.AddReportedID(i)
	return sluo
}

// SetDownloadBasePath sets the "download_base_path" field.
func (sluo *SentinelLibraryUpdateOne) SetDownloadBasePath(s string) *SentinelLibraryUpdateOne {
	sluo.mutation.SetDownloadBasePath(s)
	return sluo
}

// SetNillableDownloadBasePath sets the "download_base_path" field if the given value is not nil.
func (sluo *SentinelLibraryUpdateOne) SetNillableDownloadBasePath(s *string) *SentinelLibraryUpdateOne {
	if s != nil {
		sluo.SetDownloadBasePath(*s)
	}
	return sluo
}

// SetActiveSnapshot sets the "active_snapshot" field.
func (sluo *SentinelLibraryUpdateOne) SetActiveSnapshot(t time.Time) *SentinelLibraryUpdateOne {
	sluo.mutation.SetActiveSnapshot(t)
	return sluo
}

// SetNillableActiveSnapshot sets the "active_snapshot" field if the given value is not nil.
func (sluo *SentinelLibraryUpdateOne) SetNillableActiveSnapshot(t *time.Time) *SentinelLibraryUpdateOne {
	if t != nil {
		sluo.SetActiveSnapshot(*t)
	}
	return sluo
}

// ClearActiveSnapshot clears the value of the "active_snapshot" field.
func (sluo *SentinelLibraryUpdateOne) ClearActiveSnapshot() *SentinelLibraryUpdateOne {
	sluo.mutation.ClearActiveSnapshot()
	return sluo
}

// SetUpdatedAt sets the "updated_at" field.
func (sluo *SentinelLibraryUpdateOne) SetUpdatedAt(t time.Time) *SentinelLibraryUpdateOne {
	sluo.mutation.SetUpdatedAt(t)
	return sluo
}

// SetCreatedAt sets the "created_at" field.
func (sluo *SentinelLibraryUpdateOne) SetCreatedAt(t time.Time) *SentinelLibraryUpdateOne {
	sluo.mutation.SetCreatedAt(t)
	return sluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sluo *SentinelLibraryUpdateOne) SetNillableCreatedAt(t *time.Time) *SentinelLibraryUpdateOne {
	if t != nil {
		sluo.SetCreatedAt(*t)
	}
	return sluo
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (sluo *SentinelLibraryUpdateOne) SetLibraryReportSequence(i int64) *SentinelLibraryUpdateOne {
	sluo.mutation.ResetLibraryReportSequence()
	sluo.mutation.SetLibraryReportSequence(i)
	return sluo
}

// SetNillableLibraryReportSequence sets the "library_report_sequence" field if the given value is not nil.
func (sluo *SentinelLibraryUpdateOne) SetNillableLibraryReportSequence(i *int64) *SentinelLibraryUpdateOne {
	if i != nil {
		sluo.SetLibraryReportSequence(*i)
	}
	return sluo
}

// AddLibraryReportSequence adds i to the "library_report_sequence" field.
func (sluo *SentinelLibraryUpdateOne) AddLibraryReportSequence(i int64) *SentinelLibraryUpdateOne {
	sluo.mutation.AddLibraryReportSequence(i)
	return sluo
}

// SetSentinel sets the "sentinel" edge to the Sentinel entity.
func (sluo *SentinelLibraryUpdateOne) SetSentinel(s *Sentinel) *SentinelLibraryUpdateOne {
	return sluo.SetSentinelID(s.ID)
}

// Mutation returns the SentinelLibraryMutation object of the builder.
func (sluo *SentinelLibraryUpdateOne) Mutation() *SentinelLibraryMutation {
	return sluo.mutation
}

// ClearSentinel clears the "sentinel" edge to the Sentinel entity.
func (sluo *SentinelLibraryUpdateOne) ClearSentinel() *SentinelLibraryUpdateOne {
	sluo.mutation.ClearSentinel()
	return sluo
}

// Where appends a list predicates to the SentinelLibraryUpdate builder.
func (sluo *SentinelLibraryUpdateOne) Where(ps ...predicate.SentinelLibrary) *SentinelLibraryUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SentinelLibraryUpdateOne) Select(field string, fields ...string) *SentinelLibraryUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SentinelLibrary entity.
func (sluo *SentinelLibraryUpdateOne) Save(ctx context.Context) (*SentinelLibrary, error) {
	sluo.defaults()
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SentinelLibraryUpdateOne) SaveX(ctx context.Context) *SentinelLibrary {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SentinelLibraryUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SentinelLibraryUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *SentinelLibraryUpdateOne) defaults() {
	if _, ok := sluo.mutation.UpdatedAt(); !ok {
		v := sentinellibrary.UpdateDefaultUpdatedAt()
		sluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *SentinelLibraryUpdateOne) check() error {
	if sluo.mutation.SentinelCleared() && len(sluo.mutation.SentinelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SentinelLibrary.sentinel"`)
	}
	return nil
}

func (sluo *SentinelLibraryUpdateOne) sqlSave(ctx context.Context) (_node *SentinelLibrary, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sentinellibrary.Table, sentinellibrary.Columns, sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SentinelLibrary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentinellibrary.FieldID)
		for _, f := range fields {
			if !sentinellibrary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sentinellibrary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.ReportedID(); ok {
		_spec.SetField(sentinellibrary.FieldReportedID, field.TypeInt64, value)
	}
	if value, ok := sluo.mutation.AddedReportedID(); ok {
		_spec.AddField(sentinellibrary.FieldReportedID, field.TypeInt64, value)
	}
	if value, ok := sluo.mutation.DownloadBasePath(); ok {
		_spec.SetField(sentinellibrary.FieldDownloadBasePath, field.TypeString, value)
	}
	if value, ok := sluo.mutation.ActiveSnapshot(); ok {
		_spec.SetField(sentinellibrary.FieldActiveSnapshot, field.TypeTime, value)
	}
	if sluo.mutation.ActiveSnapshotCleared() {
		_spec.ClearField(sentinellibrary.FieldActiveSnapshot, field.TypeTime)
	}
	if value, ok := sluo.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinellibrary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sluo.mutation.CreatedAt(); ok {
		_spec.SetField(sentinellibrary.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sluo.mutation.LibraryReportSequence(); ok {
		_spec.SetField(sentinellibrary.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := sluo.mutation.AddedLibraryReportSequence(); ok {
		_spec.AddField(sentinellibrary.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if sluo.mutation.SentinelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinellibrary.SentinelTable,
			Columns: []string{sentinellibrary.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.SentinelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sentinellibrary.SentinelTable,
			Columns: []string{sentinellibrary.SentinelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SentinelLibrary{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinellibrary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
