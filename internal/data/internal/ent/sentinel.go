// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinel"
	"github.com/tuihub/librarian/internal/model"
)

// Sentinel is the model entity for the Sentinel schema.
type Sentinel struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// AlternativeUrls holds the value of the "alternative_urls" field.
	AlternativeUrls []string `json:"alternative_urls,omitempty"`
	// GetTokenPath holds the value of the "get_token_path" field.
	GetTokenPath string `json:"get_token_path,omitempty"`
	// DownloadFileBasePath holds the value of the "download_file_base_path" field.
	DownloadFileBasePath string `json:"download_file_base_path,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID model.InternalID `json:"creator_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LibraryReportSequence holds the value of the "library_report_sequence" field.
	LibraryReportSequence int64 `json:"library_report_sequence,omitempty"`
	// AppBinaryReportSequence holds the value of the "app_binary_report_sequence" field.
	AppBinaryReportSequence int64 `json:"app_binary_report_sequence,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SentinelQuery when eager-loading is set.
	Edges        SentinelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SentinelEdges holds the relations/edges for other nodes in the graph.
type SentinelEdges struct {
	// SentinelSession holds the value of the sentinel_session edge.
	SentinelSession []*SentinelSession `json:"sentinel_session,omitempty"`
	// SentinelLibrary holds the value of the sentinel_library edge.
	SentinelLibrary []*SentinelLibrary `json:"sentinel_library,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SentinelSessionOrErr returns the SentinelSession value or an error if the edge
// was not loaded in eager-loading.
func (e SentinelEdges) SentinelSessionOrErr() ([]*SentinelSession, error) {
	if e.loadedTypes[0] {
		return e.SentinelSession, nil
	}
	return nil, &NotLoadedError{edge: "sentinel_session"}
}

// SentinelLibraryOrErr returns the SentinelLibrary value or an error if the edge
// was not loaded in eager-loading.
func (e SentinelEdges) SentinelLibraryOrErr() ([]*SentinelLibrary, error) {
	if e.loadedTypes[1] {
		return e.SentinelLibrary, nil
	}
	return nil, &NotLoadedError{edge: "sentinel_library"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sentinel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sentinel.FieldAlternativeUrls:
			values[i] = new([]byte)
		case sentinel.FieldID, sentinel.FieldCreatorID, sentinel.FieldLibraryReportSequence, sentinel.FieldAppBinaryReportSequence:
			values[i] = new(sql.NullInt64)
		case sentinel.FieldName, sentinel.FieldDescription, sentinel.FieldURL, sentinel.FieldGetTokenPath, sentinel.FieldDownloadFileBasePath:
			values[i] = new(sql.NullString)
		case sentinel.FieldUpdatedAt, sentinel.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sentinel fields.
func (s *Sentinel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sentinel.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = model.InternalID(value.Int64)
			}
		case sentinel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case sentinel.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case sentinel.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				s.URL = value.String
			}
		case sentinel.FieldAlternativeUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field alternative_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.AlternativeUrls); err != nil {
					return fmt.Errorf("unmarshal field alternative_urls: %w", err)
				}
			}
		case sentinel.FieldGetTokenPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field get_token_path", values[i])
			} else if value.Valid {
				s.GetTokenPath = value.String
			}
		case sentinel.FieldDownloadFileBasePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_file_base_path", values[i])
			} else if value.Valid {
				s.DownloadFileBasePath = value.String
			}
		case sentinel.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				s.CreatorID = model.InternalID(value.Int64)
			}
		case sentinel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case sentinel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case sentinel.FieldLibraryReportSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field library_report_sequence", values[i])
			} else if value.Valid {
				s.LibraryReportSequence = value.Int64
			}
		case sentinel.FieldAppBinaryReportSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_binary_report_sequence", values[i])
			} else if value.Valid {
				s.AppBinaryReportSequence = value.Int64
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sentinel.
// This includes values selected through modifiers, order, etc.
func (s *Sentinel) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QuerySentinelSession queries the "sentinel_session" edge of the Sentinel entity.
func (s *Sentinel) QuerySentinelSession() *SentinelSessionQuery {
	return NewSentinelClient(s.config).QuerySentinelSession(s)
}

// QuerySentinelLibrary queries the "sentinel_library" edge of the Sentinel entity.
func (s *Sentinel) QuerySentinelLibrary() *SentinelLibraryQuery {
	return NewSentinelClient(s.config).QuerySentinelLibrary(s)
}

// Update returns a builder for updating this Sentinel.
// Note that you need to call Sentinel.Unwrap() before calling this method if this Sentinel
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sentinel) Update() *SentinelUpdateOne {
	return NewSentinelClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sentinel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sentinel) Unwrap() *Sentinel {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sentinel is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sentinel) String() string {
	var builder strings.Builder
	builder.WriteString("Sentinel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(s.URL)
	builder.WriteString(", ")
	builder.WriteString("alternative_urls=")
	builder.WriteString(fmt.Sprintf("%v", s.AlternativeUrls))
	builder.WriteString(", ")
	builder.WriteString("get_token_path=")
	builder.WriteString(s.GetTokenPath)
	builder.WriteString(", ")
	builder.WriteString("download_file_base_path=")
	builder.WriteString(s.DownloadFileBasePath)
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatorID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("library_report_sequence=")
	builder.WriteString(fmt.Sprintf("%v", s.LibraryReportSequence))
	builder.WriteString(", ")
	builder.WriteString("app_binary_report_sequence=")
	builder.WriteString(fmt.Sprintf("%v", s.AppBinaryReportSequence))
	builder.WriteByte(')')
	return builder.String()
}

// Sentinels is a parsable slice of Sentinel.
type Sentinels []*Sentinel
