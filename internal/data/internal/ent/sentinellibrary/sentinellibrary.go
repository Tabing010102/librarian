// Code generated by ent, DO NOT EDIT.

package sentinellibrary

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sentinellibrary type in the database.
	Label = "sentinel_library"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSentinelID holds the string denoting the sentinel_id field in the database.
	FieldSentinelID = "sentinel_id"
	// FieldReportedID holds the string denoting the reported_id field in the database.
	FieldReportedID = "reported_id"
	// FieldDownloadBasePath holds the string denoting the download_base_path field in the database.
	FieldDownloadBasePath = "download_base_path"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLibraryReportSequence holds the string denoting the library_report_sequence field in the database.
	FieldLibraryReportSequence = "library_report_sequence"
	// EdgeSentinel holds the string denoting the sentinel edge name in mutations.
	EdgeSentinel = "sentinel"
	// Table holds the table name of the sentinellibrary in the database.
	Table = "sentinel_libraries"
	// SentinelTable is the table that holds the sentinel relation/edge.
	SentinelTable = "sentinel_libraries"
	// SentinelInverseTable is the table name for the Sentinel entity.
	// It exists in this package in order to avoid circular dependency with the "sentinel" package.
	SentinelInverseTable = "sentinels"
	// SentinelColumn is the table column denoting the sentinel relation/edge.
	SentinelColumn = "sentinel_id"
)

// Columns holds all SQL columns for sentinellibrary fields.
var Columns = []string{
	FieldID,
	FieldSentinelID,
	FieldReportedID,
	FieldDownloadBasePath,
	FieldUpdatedAt,
	FieldCreatedAt,
	FieldLibraryReportSequence,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the SentinelLibrary queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySentinelID orders the results by the sentinel_id field.
func BySentinelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentinelID, opts...).ToFunc()
}

// ByReportedID orders the results by the reported_id field.
func ByReportedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportedID, opts...).ToFunc()
}

// ByDownloadBasePath orders the results by the download_base_path field.
func ByDownloadBasePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadBasePath, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLibraryReportSequence orders the results by the library_report_sequence field.
func ByLibraryReportSequence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLibraryReportSequence, opts...).ToFunc()
}

// BySentinelField orders the results by sentinel field.
func BySentinelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentinelStep(), sql.OrderByField(field, opts...))
	}
}
func newSentinelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentinelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SentinelTable, SentinelColumn),
	)
}
