// Code generated by ent, DO NOT EDIT.

package sentinel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sentinel type in the database.
	Label = "sentinel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldAlternativeUrls holds the string denoting the alternative_urls field in the database.
	FieldAlternativeUrls = "alternative_urls"
	// FieldGetTokenPath holds the string denoting the get_token_path field in the database.
	FieldGetTokenPath = "get_token_path"
	// FieldDownloadFileBasePath holds the string denoting the download_file_base_path field in the database.
	FieldDownloadFileBasePath = "download_file_base_path"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLibraryReportSequence holds the string denoting the library_report_sequence field in the database.
	FieldLibraryReportSequence = "library_report_sequence"
	// EdgeSentinelSession holds the string denoting the sentinel_session edge name in mutations.
	EdgeSentinelSession = "sentinel_session"
	// EdgeSentinelLibrary holds the string denoting the sentinel_library edge name in mutations.
	EdgeSentinelLibrary = "sentinel_library"
	// Table holds the table name of the sentinel in the database.
	Table = "sentinels"
	// SentinelSessionTable is the table that holds the sentinel_session relation/edge.
	SentinelSessionTable = "sentinel_sessions"
	// SentinelSessionInverseTable is the table name for the SentinelSession entity.
	// It exists in this package in order to avoid circular dependency with the "sentinelsession" package.
	SentinelSessionInverseTable = "sentinel_sessions"
	// SentinelSessionColumn is the table column denoting the sentinel_session relation/edge.
	SentinelSessionColumn = "sentinel_id"
	// SentinelLibraryTable is the table that holds the sentinel_library relation/edge.
	SentinelLibraryTable = "sentinel_libraries"
	// SentinelLibraryInverseTable is the table name for the SentinelLibrary entity.
	// It exists in this package in order to avoid circular dependency with the "sentinellibrary" package.
	SentinelLibraryInverseTable = "sentinel_libraries"
	// SentinelLibraryColumn is the table column denoting the sentinel_library relation/edge.
	SentinelLibraryColumn = "sentinel_id"
)

// Columns holds all SQL columns for sentinel fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldURL,
	FieldAlternativeUrls,
	FieldGetTokenPath,
	FieldDownloadFileBasePath,
	FieldCreatorID,
	FieldUpdatedAt,
	FieldCreatedAt,
	FieldLibraryReportSequence,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultURL holds the default value on creation for the "url" field.
	DefaultURL string
	// DefaultDownloadFileBasePath holds the default value on creation for the "download_file_base_path" field.
	DefaultDownloadFileBasePath string
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLibraryReportSequence holds the default value on creation for the "library_report_sequence" field.
	DefaultLibraryReportSequence int64
)

// OrderOption defines the ordering options for the Sentinel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByGetTokenPath orders the results by the get_token_path field.
func ByGetTokenPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGetTokenPath, opts...).ToFunc()
}

// ByDownloadFileBasePath orders the results by the download_file_base_path field.
func ByDownloadFileBasePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadFileBasePath, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLibraryReportSequence orders the results by the library_report_sequence field.
func ByLibraryReportSequence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLibraryReportSequence, opts...).ToFunc()
}

// BySentinelSessionCount orders the results by sentinel_session count.
func BySentinelSessionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentinelSessionStep(), opts...)
	}
}

// BySentinelSession orders the results by sentinel_session terms.
func BySentinelSession(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentinelSessionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySentinelLibraryCount orders the results by sentinel_library count.
func BySentinelLibraryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentinelLibraryStep(), opts...)
	}
}

// BySentinelLibrary orders the results by sentinel_library terms.
func BySentinelLibrary(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentinelLibraryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSentinelSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentinelSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentinelSessionTable, SentinelSessionColumn),
	)
}
func newSentinelLibraryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentinelLibraryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentinelLibraryTable, SentinelLibraryColumn),
	)
}
