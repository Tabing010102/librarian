// Code generated by ent, DO NOT EDIT.

package sentinel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// ID filters vertices based on their ID field.
func ID(id model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id model.InternalID) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldDescription, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldURL, v))
}

// GetTokenPath applies equality check predicate on the "get_token_path" field. It's identical to GetTokenPathEQ.
func GetTokenPath(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldGetTokenPath, v))
}

// DownloadFileBasePath applies equality check predicate on the "download_file_base_path" field. It's identical to DownloadFileBasePathEQ.
func DownloadFileBasePath(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldDownloadFileBasePath, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v model.InternalID) predicate.Sentinel {
	vc := int64(v)
	return predicate.Sentinel(sql.FieldEQ(FieldCreatorID, vc))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldCreatedAt, v))
}

// LibraryReportSequence applies equality check predicate on the "library_report_sequence" field. It's identical to LibraryReportSequenceEQ.
func LibraryReportSequence(v int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldLibraryReportSequence, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContainsFold(FieldDescription, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContainsFold(FieldURL, v))
}

// AlternativeUrlsIsNil applies the IsNil predicate on the "alternative_urls" field.
func AlternativeUrlsIsNil() predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIsNull(FieldAlternativeUrls))
}

// AlternativeUrlsNotNil applies the NotNil predicate on the "alternative_urls" field.
func AlternativeUrlsNotNil() predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotNull(FieldAlternativeUrls))
}

// GetTokenPathEQ applies the EQ predicate on the "get_token_path" field.
func GetTokenPathEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldGetTokenPath, v))
}

// GetTokenPathNEQ applies the NEQ predicate on the "get_token_path" field.
func GetTokenPathNEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldGetTokenPath, v))
}

// GetTokenPathIn applies the In predicate on the "get_token_path" field.
func GetTokenPathIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldGetTokenPath, vs...))
}

// GetTokenPathNotIn applies the NotIn predicate on the "get_token_path" field.
func GetTokenPathNotIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldGetTokenPath, vs...))
}

// GetTokenPathGT applies the GT predicate on the "get_token_path" field.
func GetTokenPathGT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldGetTokenPath, v))
}

// GetTokenPathGTE applies the GTE predicate on the "get_token_path" field.
func GetTokenPathGTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldGetTokenPath, v))
}

// GetTokenPathLT applies the LT predicate on the "get_token_path" field.
func GetTokenPathLT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldGetTokenPath, v))
}

// GetTokenPathLTE applies the LTE predicate on the "get_token_path" field.
func GetTokenPathLTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldGetTokenPath, v))
}

// GetTokenPathContains applies the Contains predicate on the "get_token_path" field.
func GetTokenPathContains(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContains(FieldGetTokenPath, v))
}

// GetTokenPathHasPrefix applies the HasPrefix predicate on the "get_token_path" field.
func GetTokenPathHasPrefix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasPrefix(FieldGetTokenPath, v))
}

// GetTokenPathHasSuffix applies the HasSuffix predicate on the "get_token_path" field.
func GetTokenPathHasSuffix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasSuffix(FieldGetTokenPath, v))
}

// GetTokenPathIsNil applies the IsNil predicate on the "get_token_path" field.
func GetTokenPathIsNil() predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIsNull(FieldGetTokenPath))
}

// GetTokenPathNotNil applies the NotNil predicate on the "get_token_path" field.
func GetTokenPathNotNil() predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotNull(FieldGetTokenPath))
}

// GetTokenPathEqualFold applies the EqualFold predicate on the "get_token_path" field.
func GetTokenPathEqualFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEqualFold(FieldGetTokenPath, v))
}

// GetTokenPathContainsFold applies the ContainsFold predicate on the "get_token_path" field.
func GetTokenPathContainsFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContainsFold(FieldGetTokenPath, v))
}

// DownloadFileBasePathEQ applies the EQ predicate on the "download_file_base_path" field.
func DownloadFileBasePathEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathNEQ applies the NEQ predicate on the "download_file_base_path" field.
func DownloadFileBasePathNEQ(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathIn applies the In predicate on the "download_file_base_path" field.
func DownloadFileBasePathIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldDownloadFileBasePath, vs...))
}

// DownloadFileBasePathNotIn applies the NotIn predicate on the "download_file_base_path" field.
func DownloadFileBasePathNotIn(vs ...string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldDownloadFileBasePath, vs...))
}

// DownloadFileBasePathGT applies the GT predicate on the "download_file_base_path" field.
func DownloadFileBasePathGT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathGTE applies the GTE predicate on the "download_file_base_path" field.
func DownloadFileBasePathGTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathLT applies the LT predicate on the "download_file_base_path" field.
func DownloadFileBasePathLT(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathLTE applies the LTE predicate on the "download_file_base_path" field.
func DownloadFileBasePathLTE(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathContains applies the Contains predicate on the "download_file_base_path" field.
func DownloadFileBasePathContains(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContains(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathHasPrefix applies the HasPrefix predicate on the "download_file_base_path" field.
func DownloadFileBasePathHasPrefix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasPrefix(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathHasSuffix applies the HasSuffix predicate on the "download_file_base_path" field.
func DownloadFileBasePathHasSuffix(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldHasSuffix(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathEqualFold applies the EqualFold predicate on the "download_file_base_path" field.
func DownloadFileBasePathEqualFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEqualFold(FieldDownloadFileBasePath, v))
}

// DownloadFileBasePathContainsFold applies the ContainsFold predicate on the "download_file_base_path" field.
func DownloadFileBasePathContainsFold(v string) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldContainsFold(FieldDownloadFileBasePath, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v model.InternalID) predicate.Sentinel {
	vc := int64(v)
	return predicate.Sentinel(sql.FieldEQ(FieldCreatorID, vc))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v model.InternalID) predicate.Sentinel {
	vc := int64(v)
	return predicate.Sentinel(sql.FieldNEQ(FieldCreatorID, vc))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...model.InternalID) predicate.Sentinel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.Sentinel(sql.FieldIn(FieldCreatorID, v...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...model.InternalID) predicate.Sentinel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.Sentinel(sql.FieldNotIn(FieldCreatorID, v...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v model.InternalID) predicate.Sentinel {
	vc := int64(v)
	return predicate.Sentinel(sql.FieldGT(FieldCreatorID, vc))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v model.InternalID) predicate.Sentinel {
	vc := int64(v)
	return predicate.Sentinel(sql.FieldGTE(FieldCreatorID, vc))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v model.InternalID) predicate.Sentinel {
	vc := int64(v)
	return predicate.Sentinel(sql.FieldLT(FieldCreatorID, vc))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v model.InternalID) predicate.Sentinel {
	vc := int64(v)
	return predicate.Sentinel(sql.FieldLTE(FieldCreatorID, vc))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldCreatedAt, v))
}

// LibraryReportSequenceEQ applies the EQ predicate on the "library_report_sequence" field.
func LibraryReportSequenceEQ(v int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldEQ(FieldLibraryReportSequence, v))
}

// LibraryReportSequenceNEQ applies the NEQ predicate on the "library_report_sequence" field.
func LibraryReportSequenceNEQ(v int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNEQ(FieldLibraryReportSequence, v))
}

// LibraryReportSequenceIn applies the In predicate on the "library_report_sequence" field.
func LibraryReportSequenceIn(vs ...int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldIn(FieldLibraryReportSequence, vs...))
}

// LibraryReportSequenceNotIn applies the NotIn predicate on the "library_report_sequence" field.
func LibraryReportSequenceNotIn(vs ...int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldNotIn(FieldLibraryReportSequence, vs...))
}

// LibraryReportSequenceGT applies the GT predicate on the "library_report_sequence" field.
func LibraryReportSequenceGT(v int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGT(FieldLibraryReportSequence, v))
}

// LibraryReportSequenceGTE applies the GTE predicate on the "library_report_sequence" field.
func LibraryReportSequenceGTE(v int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldGTE(FieldLibraryReportSequence, v))
}

// LibraryReportSequenceLT applies the LT predicate on the "library_report_sequence" field.
func LibraryReportSequenceLT(v int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLT(FieldLibraryReportSequence, v))
}

// LibraryReportSequenceLTE applies the LTE predicate on the "library_report_sequence" field.
func LibraryReportSequenceLTE(v int64) predicate.Sentinel {
	return predicate.Sentinel(sql.FieldLTE(FieldLibraryReportSequence, v))
}

// HasSentinelSession applies the HasEdge predicate on the "sentinel_session" edge.
func HasSentinelSession() predicate.Sentinel {
	return predicate.Sentinel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SentinelSessionTable, SentinelSessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentinelSessionWith applies the HasEdge predicate on the "sentinel_session" edge with a given conditions (other predicates).
func HasSentinelSessionWith(preds ...predicate.SentinelSession) predicate.Sentinel {
	return predicate.Sentinel(func(s *sql.Selector) {
		step := newSentinelSessionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSentinelLibrary applies the HasEdge predicate on the "sentinel_library" edge.
func HasSentinelLibrary() predicate.Sentinel {
	return predicate.Sentinel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SentinelLibraryTable, SentinelLibraryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentinelLibraryWith applies the HasEdge predicate on the "sentinel_library" edge with a given conditions (other predicates).
func HasSentinelLibraryWith(preds ...predicate.SentinelLibrary) predicate.Sentinel {
	return predicate.Sentinel(func(s *sql.Selector) {
		step := newSentinelLibraryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sentinel) predicate.Sentinel {
	return predicate.Sentinel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sentinel) predicate.Sentinel {
	return predicate.Sentinel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sentinel) predicate.Sentinel {
	return predicate.Sentinel(sql.NotPredicates(p))
}
