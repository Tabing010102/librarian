// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinaryfile"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelAppBinaryFileQuery is the builder for querying SentinelAppBinaryFile entities.
type SentinelAppBinaryFileQuery struct {
	config
	ctx                   *QueryContext
	order                 []sentinelappbinaryfile.OrderOption
	inters                []Interceptor
	predicates            []predicate.SentinelAppBinaryFile
	withSentinelAppBinary *SentinelAppBinaryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SentinelAppBinaryFileQuery builder.
func (sabfq *SentinelAppBinaryFileQuery) Where(ps ...predicate.SentinelAppBinaryFile) *SentinelAppBinaryFileQuery {
	sabfq.predicates = append(sabfq.predicates, ps...)
	return sabfq
}

// Limit the number of records to be returned by this query.
func (sabfq *SentinelAppBinaryFileQuery) Limit(limit int) *SentinelAppBinaryFileQuery {
	sabfq.ctx.Limit = &limit
	return sabfq
}

// Offset to start from.
func (sabfq *SentinelAppBinaryFileQuery) Offset(offset int) *SentinelAppBinaryFileQuery {
	sabfq.ctx.Offset = &offset
	return sabfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sabfq *SentinelAppBinaryFileQuery) Unique(unique bool) *SentinelAppBinaryFileQuery {
	sabfq.ctx.Unique = &unique
	return sabfq
}

// Order specifies how the records should be ordered.
func (sabfq *SentinelAppBinaryFileQuery) Order(o ...sentinelappbinaryfile.OrderOption) *SentinelAppBinaryFileQuery {
	sabfq.order = append(sabfq.order, o...)
	return sabfq
}

// QuerySentinelAppBinary chains the current query on the "sentinel_app_binary" edge.
func (sabfq *SentinelAppBinaryFileQuery) QuerySentinelAppBinary() *SentinelAppBinaryQuery {
	query := (&SentinelAppBinaryClient{config: sabfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sabfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sabfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sentinelappbinaryfile.Table, sentinelappbinaryfile.FieldID, selector),
			sqlgraph.To(sentinelappbinary.Table, sentinelappbinary.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sentinelappbinaryfile.SentinelAppBinaryTable, sentinelappbinaryfile.SentinelAppBinaryColumn),
		)
		fromU = sqlgraph.SetNeighbors(sabfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SentinelAppBinaryFile entity from the query.
// Returns a *NotFoundError when no SentinelAppBinaryFile was found.
func (sabfq *SentinelAppBinaryFileQuery) First(ctx context.Context) (*SentinelAppBinaryFile, error) {
	nodes, err := sabfq.Limit(1).All(setContextOp(ctx, sabfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sentinelappbinaryfile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sabfq *SentinelAppBinaryFileQuery) FirstX(ctx context.Context) *SentinelAppBinaryFile {
	node, err := sabfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SentinelAppBinaryFile ID from the query.
// Returns a *NotFoundError when no SentinelAppBinaryFile ID was found.
func (sabfq *SentinelAppBinaryFileQuery) FirstID(ctx context.Context) (id model.InternalID, err error) {
	var ids []model.InternalID
	if ids, err = sabfq.Limit(1).IDs(setContextOp(ctx, sabfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sentinelappbinaryfile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sabfq *SentinelAppBinaryFileQuery) FirstIDX(ctx context.Context) model.InternalID {
	id, err := sabfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SentinelAppBinaryFile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SentinelAppBinaryFile entity is found.
// Returns a *NotFoundError when no SentinelAppBinaryFile entities are found.
func (sabfq *SentinelAppBinaryFileQuery) Only(ctx context.Context) (*SentinelAppBinaryFile, error) {
	nodes, err := sabfq.Limit(2).All(setContextOp(ctx, sabfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sentinelappbinaryfile.Label}
	default:
		return nil, &NotSingularError{sentinelappbinaryfile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sabfq *SentinelAppBinaryFileQuery) OnlyX(ctx context.Context) *SentinelAppBinaryFile {
	node, err := sabfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SentinelAppBinaryFile ID in the query.
// Returns a *NotSingularError when more than one SentinelAppBinaryFile ID is found.
// Returns a *NotFoundError when no entities are found.
func (sabfq *SentinelAppBinaryFileQuery) OnlyID(ctx context.Context) (id model.InternalID, err error) {
	var ids []model.InternalID
	if ids, err = sabfq.Limit(2).IDs(setContextOp(ctx, sabfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sentinelappbinaryfile.Label}
	default:
		err = &NotSingularError{sentinelappbinaryfile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sabfq *SentinelAppBinaryFileQuery) OnlyIDX(ctx context.Context) model.InternalID {
	id, err := sabfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SentinelAppBinaryFiles.
func (sabfq *SentinelAppBinaryFileQuery) All(ctx context.Context) ([]*SentinelAppBinaryFile, error) {
	ctx = setContextOp(ctx, sabfq.ctx, ent.OpQueryAll)
	if err := sabfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SentinelAppBinaryFile, *SentinelAppBinaryFileQuery]()
	return withInterceptors[[]*SentinelAppBinaryFile](ctx, sabfq, qr, sabfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sabfq *SentinelAppBinaryFileQuery) AllX(ctx context.Context) []*SentinelAppBinaryFile {
	nodes, err := sabfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SentinelAppBinaryFile IDs.
func (sabfq *SentinelAppBinaryFileQuery) IDs(ctx context.Context) (ids []model.InternalID, err error) {
	if sabfq.ctx.Unique == nil && sabfq.path != nil {
		sabfq.Unique(true)
	}
	ctx = setContextOp(ctx, sabfq.ctx, ent.OpQueryIDs)
	if err = sabfq.Select(sentinelappbinaryfile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sabfq *SentinelAppBinaryFileQuery) IDsX(ctx context.Context) []model.InternalID {
	ids, err := sabfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sabfq *SentinelAppBinaryFileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sabfq.ctx, ent.OpQueryCount)
	if err := sabfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sabfq, querierCount[*SentinelAppBinaryFileQuery](), sabfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sabfq *SentinelAppBinaryFileQuery) CountX(ctx context.Context) int {
	count, err := sabfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sabfq *SentinelAppBinaryFileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sabfq.ctx, ent.OpQueryExist)
	switch _, err := sabfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sabfq *SentinelAppBinaryFileQuery) ExistX(ctx context.Context) bool {
	exist, err := sabfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SentinelAppBinaryFileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sabfq *SentinelAppBinaryFileQuery) Clone() *SentinelAppBinaryFileQuery {
	if sabfq == nil {
		return nil
	}
	return &SentinelAppBinaryFileQuery{
		config:                sabfq.config,
		ctx:                   sabfq.ctx.Clone(),
		order:                 append([]sentinelappbinaryfile.OrderOption{}, sabfq.order...),
		inters:                append([]Interceptor{}, sabfq.inters...),
		predicates:            append([]predicate.SentinelAppBinaryFile{}, sabfq.predicates...),
		withSentinelAppBinary: sabfq.withSentinelAppBinary.Clone(),
		// clone intermediate query.
		sql:  sabfq.sql.Clone(),
		path: sabfq.path,
	}
}

// WithSentinelAppBinary tells the query-builder to eager-load the nodes that are connected to
// the "sentinel_app_binary" edge. The optional arguments are used to configure the query builder of the edge.
func (sabfq *SentinelAppBinaryFileQuery) WithSentinelAppBinary(opts ...func(*SentinelAppBinaryQuery)) *SentinelAppBinaryFileQuery {
	query := (&SentinelAppBinaryClient{config: sabfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sabfq.withSentinelAppBinary = query
	return sabfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SentinelAppBinaryID model.InternalID `json:"sentinel_app_binary_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SentinelAppBinaryFile.Query().
//		GroupBy(sentinelappbinaryfile.FieldSentinelAppBinaryID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sabfq *SentinelAppBinaryFileQuery) GroupBy(field string, fields ...string) *SentinelAppBinaryFileGroupBy {
	sabfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SentinelAppBinaryFileGroupBy{build: sabfq}
	grbuild.flds = &sabfq.ctx.Fields
	grbuild.label = sentinelappbinaryfile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SentinelAppBinaryID model.InternalID `json:"sentinel_app_binary_id,omitempty"`
//	}
//
//	client.SentinelAppBinaryFile.Query().
//		Select(sentinelappbinaryfile.FieldSentinelAppBinaryID).
//		Scan(ctx, &v)
func (sabfq *SentinelAppBinaryFileQuery) Select(fields ...string) *SentinelAppBinaryFileSelect {
	sabfq.ctx.Fields = append(sabfq.ctx.Fields, fields...)
	sbuild := &SentinelAppBinaryFileSelect{SentinelAppBinaryFileQuery: sabfq}
	sbuild.label = sentinelappbinaryfile.Label
	sbuild.flds, sbuild.scan = &sabfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SentinelAppBinaryFileSelect configured with the given aggregations.
func (sabfq *SentinelAppBinaryFileQuery) Aggregate(fns ...AggregateFunc) *SentinelAppBinaryFileSelect {
	return sabfq.Select().Aggregate(fns...)
}

func (sabfq *SentinelAppBinaryFileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sabfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sabfq); err != nil {
				return err
			}
		}
	}
	for _, f := range sabfq.ctx.Fields {
		if !sentinelappbinaryfile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sabfq.path != nil {
		prev, err := sabfq.path(ctx)
		if err != nil {
			return err
		}
		sabfq.sql = prev
	}
	return nil
}

func (sabfq *SentinelAppBinaryFileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SentinelAppBinaryFile, error) {
	var (
		nodes       = []*SentinelAppBinaryFile{}
		_spec       = sabfq.querySpec()
		loadedTypes = [1]bool{
			sabfq.withSentinelAppBinary != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SentinelAppBinaryFile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SentinelAppBinaryFile{config: sabfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sabfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sabfq.withSentinelAppBinary; query != nil {
		if err := sabfq.loadSentinelAppBinary(ctx, query, nodes, nil,
			func(n *SentinelAppBinaryFile, e *SentinelAppBinary) { n.Edges.SentinelAppBinary = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sabfq *SentinelAppBinaryFileQuery) loadSentinelAppBinary(ctx context.Context, query *SentinelAppBinaryQuery, nodes []*SentinelAppBinaryFile, init func(*SentinelAppBinaryFile), assign func(*SentinelAppBinaryFile, *SentinelAppBinary)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*SentinelAppBinaryFile)
	for i := range nodes {
		fk := nodes[i].SentinelAppBinaryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sentinelappbinary.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sentinel_app_binary_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sabfq *SentinelAppBinaryFileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sabfq.querySpec()
	_spec.Node.Columns = sabfq.ctx.Fields
	if len(sabfq.ctx.Fields) > 0 {
		_spec.Unique = sabfq.ctx.Unique != nil && *sabfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sabfq.driver, _spec)
}

func (sabfq *SentinelAppBinaryFileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sentinelappbinaryfile.Table, sentinelappbinaryfile.Columns, sqlgraph.NewFieldSpec(sentinelappbinaryfile.FieldID, field.TypeInt64))
	_spec.From = sabfq.sql
	if unique := sabfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sabfq.path != nil {
		_spec.Unique = true
	}
	if fields := sabfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentinelappbinaryfile.FieldID)
		for i := range fields {
			if fields[i] != sentinelappbinaryfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sabfq.withSentinelAppBinary != nil {
			_spec.Node.AddColumnOnce(sentinelappbinaryfile.FieldSentinelAppBinaryID)
		}
	}
	if ps := sabfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sabfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sabfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sabfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sabfq *SentinelAppBinaryFileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sabfq.driver.Dialect())
	t1 := builder.Table(sentinelappbinaryfile.Table)
	columns := sabfq.ctx.Fields
	if len(columns) == 0 {
		columns = sentinelappbinaryfile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sabfq.sql != nil {
		selector = sabfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sabfq.ctx.Unique != nil && *sabfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sabfq.predicates {
		p(selector)
	}
	for _, p := range sabfq.order {
		p(selector)
	}
	if offset := sabfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sabfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SentinelAppBinaryFileGroupBy is the group-by builder for SentinelAppBinaryFile entities.
type SentinelAppBinaryFileGroupBy struct {
	selector
	build *SentinelAppBinaryFileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sabfgb *SentinelAppBinaryFileGroupBy) Aggregate(fns ...AggregateFunc) *SentinelAppBinaryFileGroupBy {
	sabfgb.fns = append(sabfgb.fns, fns...)
	return sabfgb
}

// Scan applies the selector query and scans the result into the given value.
func (sabfgb *SentinelAppBinaryFileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sabfgb.build.ctx, ent.OpQueryGroupBy)
	if err := sabfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SentinelAppBinaryFileQuery, *SentinelAppBinaryFileGroupBy](ctx, sabfgb.build, sabfgb, sabfgb.build.inters, v)
}

func (sabfgb *SentinelAppBinaryFileGroupBy) sqlScan(ctx context.Context, root *SentinelAppBinaryFileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sabfgb.fns))
	for _, fn := range sabfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sabfgb.flds)+len(sabfgb.fns))
		for _, f := range *sabfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sabfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sabfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SentinelAppBinaryFileSelect is the builder for selecting fields of SentinelAppBinaryFile entities.
type SentinelAppBinaryFileSelect struct {
	*SentinelAppBinaryFileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sabfs *SentinelAppBinaryFileSelect) Aggregate(fns ...AggregateFunc) *SentinelAppBinaryFileSelect {
	sabfs.fns = append(sabfs.fns, fns...)
	return sabfs
}

// Scan applies the selector query and scans the result into the given value.
func (sabfs *SentinelAppBinaryFileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sabfs.ctx, ent.OpQuerySelect)
	if err := sabfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SentinelAppBinaryFileQuery, *SentinelAppBinaryFileSelect](ctx, sabfs.SentinelAppBinaryFileQuery, sabfs, sabfs.inters, v)
}

func (sabfs *SentinelAppBinaryFileSelect) sqlScan(ctx context.Context, root *SentinelAppBinaryFileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sabfs.fns))
	for _, fn := range sabfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sabfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sabfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
