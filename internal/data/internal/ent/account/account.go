// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldPlatformAccountID holds the string denoting the platform_account_id field in the database.
	FieldPlatformAccountID = "platform_account_id"
	// FieldBoundUserID holds the string denoting the bound_user_id field in the database.
	FieldBoundUserID = "bound_user_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProfileURL holds the string denoting the profile_url field in the database.
	FieldProfileURL = "profile_url"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBoundUser holds the string denoting the bound_user edge name in mutations.
	EdgeBoundUser = "bound_user"
	// Table holds the table name of the account in the database.
	Table = "accounts"
	// BoundUserTable is the table that holds the bound_user relation/edge.
	BoundUserTable = "accounts"
	// BoundUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BoundUserInverseTable = "users"
	// BoundUserColumn is the table column denoting the bound_user relation/edge.
	BoundUserColumn = "bound_user_id"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldPlatform,
	FieldPlatformAccountID,
	FieldBoundUserID,
	FieldName,
	FieldProfileURL,
	FieldAvatarURL,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Account queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByPlatformAccountID orders the results by the platform_account_id field.
func ByPlatformAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatformAccountID, opts...).ToFunc()
}

// ByBoundUserID orders the results by the bound_user_id field.
func ByBoundUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBoundUserID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProfileURL orders the results by the profile_url field.
func ByProfileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileURL, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBoundUserField orders the results by bound_user field.
func ByBoundUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoundUserStep(), sql.OrderByField(field, opts...))
	}
}
func newBoundUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoundUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BoundUserTable, BoundUserColumn),
	)
}
