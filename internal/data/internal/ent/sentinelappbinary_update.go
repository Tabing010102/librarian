// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinary"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelAppBinaryUpdate is the builder for updating SentinelAppBinary entities.
type SentinelAppBinaryUpdate struct {
	config
	hooks    []Hook
	mutation *SentinelAppBinaryMutation
}

// Where appends a list predicates to the SentinelAppBinaryUpdate builder.
func (sabu *SentinelAppBinaryUpdate) Where(ps ...predicate.SentinelAppBinary) *SentinelAppBinaryUpdate {
	sabu.mutation.Where(ps...)
	return sabu
}

// SetSentinelID sets the "sentinel_id" field.
func (sabu *SentinelAppBinaryUpdate) SetSentinelID(mi model.InternalID) *SentinelAppBinaryUpdate {
	sabu.mutation.ResetSentinelID()
	sabu.mutation.SetSentinelID(mi)
	return sabu
}

// SetNillableSentinelID sets the "sentinel_id" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableSentinelID(mi *model.InternalID) *SentinelAppBinaryUpdate {
	if mi != nil {
		sabu.SetSentinelID(*mi)
	}
	return sabu
}

// AddSentinelID adds mi to the "sentinel_id" field.
func (sabu *SentinelAppBinaryUpdate) AddSentinelID(mi model.InternalID) *SentinelAppBinaryUpdate {
	sabu.mutation.AddSentinelID(mi)
	return sabu
}

// SetSentinelLibraryReportedID sets the "sentinel_library_reported_id" field.
func (sabu *SentinelAppBinaryUpdate) SetSentinelLibraryReportedID(i int64) *SentinelAppBinaryUpdate {
	sabu.mutation.ResetSentinelLibraryReportedID()
	sabu.mutation.SetSentinelLibraryReportedID(i)
	return sabu
}

// SetNillableSentinelLibraryReportedID sets the "sentinel_library_reported_id" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableSentinelLibraryReportedID(i *int64) *SentinelAppBinaryUpdate {
	if i != nil {
		sabu.SetSentinelLibraryReportedID(*i)
	}
	return sabu
}

// AddSentinelLibraryReportedID adds i to the "sentinel_library_reported_id" field.
func (sabu *SentinelAppBinaryUpdate) AddSentinelLibraryReportedID(i int64) *SentinelAppBinaryUpdate {
	sabu.mutation.AddSentinelLibraryReportedID(i)
	return sabu
}

// SetGeneratedID sets the "generated_id" field.
func (sabu *SentinelAppBinaryUpdate) SetGeneratedID(s string) *SentinelAppBinaryUpdate {
	sabu.mutation.SetGeneratedID(s)
	return sabu
}

// SetNillableGeneratedID sets the "generated_id" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableGeneratedID(s *string) *SentinelAppBinaryUpdate {
	if s != nil {
		sabu.SetGeneratedID(*s)
	}
	return sabu
}

// SetSizeBytes sets the "size_bytes" field.
func (sabu *SentinelAppBinaryUpdate) SetSizeBytes(i int64) *SentinelAppBinaryUpdate {
	sabu.mutation.ResetSizeBytes()
	sabu.mutation.SetSizeBytes(i)
	return sabu
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableSizeBytes(i *int64) *SentinelAppBinaryUpdate {
	if i != nil {
		sabu.SetSizeBytes(*i)
	}
	return sabu
}

// AddSizeBytes adds i to the "size_bytes" field.
func (sabu *SentinelAppBinaryUpdate) AddSizeBytes(i int64) *SentinelAppBinaryUpdate {
	sabu.mutation.AddSizeBytes(i)
	return sabu
}

// SetNeedToken sets the "need_token" field.
func (sabu *SentinelAppBinaryUpdate) SetNeedToken(b bool) *SentinelAppBinaryUpdate {
	sabu.mutation.SetNeedToken(b)
	return sabu
}

// SetNillableNeedToken sets the "need_token" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableNeedToken(b *bool) *SentinelAppBinaryUpdate {
	if b != nil {
		sabu.SetNeedToken(*b)
	}
	return sabu
}

// SetName sets the "name" field.
func (sabu *SentinelAppBinaryUpdate) SetName(s string) *SentinelAppBinaryUpdate {
	sabu.mutation.SetName(s)
	return sabu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableName(s *string) *SentinelAppBinaryUpdate {
	if s != nil {
		sabu.SetName(*s)
	}
	return sabu
}

// ClearName clears the value of the "name" field.
func (sabu *SentinelAppBinaryUpdate) ClearName() *SentinelAppBinaryUpdate {
	sabu.mutation.ClearName()
	return sabu
}

// SetVersion sets the "version" field.
func (sabu *SentinelAppBinaryUpdate) SetVersion(s string) *SentinelAppBinaryUpdate {
	sabu.mutation.SetVersion(s)
	return sabu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableVersion(s *string) *SentinelAppBinaryUpdate {
	if s != nil {
		sabu.SetVersion(*s)
	}
	return sabu
}

// ClearVersion clears the value of the "version" field.
func (sabu *SentinelAppBinaryUpdate) ClearVersion() *SentinelAppBinaryUpdate {
	sabu.mutation.ClearVersion()
	return sabu
}

// SetDeveloper sets the "developer" field.
func (sabu *SentinelAppBinaryUpdate) SetDeveloper(s string) *SentinelAppBinaryUpdate {
	sabu.mutation.SetDeveloper(s)
	return sabu
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableDeveloper(s *string) *SentinelAppBinaryUpdate {
	if s != nil {
		sabu.SetDeveloper(*s)
	}
	return sabu
}

// ClearDeveloper clears the value of the "developer" field.
func (sabu *SentinelAppBinaryUpdate) ClearDeveloper() *SentinelAppBinaryUpdate {
	sabu.mutation.ClearDeveloper()
	return sabu
}

// SetPublisher sets the "publisher" field.
func (sabu *SentinelAppBinaryUpdate) SetPublisher(s string) *SentinelAppBinaryUpdate {
	sabu.mutation.SetPublisher(s)
	return sabu
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillablePublisher(s *string) *SentinelAppBinaryUpdate {
	if s != nil {
		sabu.SetPublisher(*s)
	}
	return sabu
}

// ClearPublisher clears the value of the "publisher" field.
func (sabu *SentinelAppBinaryUpdate) ClearPublisher() *SentinelAppBinaryUpdate {
	sabu.mutation.ClearPublisher()
	return sabu
}

// SetUpdatedAt sets the "updated_at" field.
func (sabu *SentinelAppBinaryUpdate) SetUpdatedAt(t time.Time) *SentinelAppBinaryUpdate {
	sabu.mutation.SetUpdatedAt(t)
	return sabu
}

// SetCreatedAt sets the "created_at" field.
func (sabu *SentinelAppBinaryUpdate) SetCreatedAt(t time.Time) *SentinelAppBinaryUpdate {
	sabu.mutation.SetCreatedAt(t)
	return sabu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableCreatedAt(t *time.Time) *SentinelAppBinaryUpdate {
	if t != nil {
		sabu.SetCreatedAt(*t)
	}
	return sabu
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (sabu *SentinelAppBinaryUpdate) SetAppBinaryReportSequence(i int64) *SentinelAppBinaryUpdate {
	sabu.mutation.ResetAppBinaryReportSequence()
	sabu.mutation.SetAppBinaryReportSequence(i)
	return sabu
}

// SetNillableAppBinaryReportSequence sets the "app_binary_report_sequence" field if the given value is not nil.
func (sabu *SentinelAppBinaryUpdate) SetNillableAppBinaryReportSequence(i *int64) *SentinelAppBinaryUpdate {
	if i != nil {
		sabu.SetAppBinaryReportSequence(*i)
	}
	return sabu
}

// AddAppBinaryReportSequence adds i to the "app_binary_report_sequence" field.
func (sabu *SentinelAppBinaryUpdate) AddAppBinaryReportSequence(i int64) *SentinelAppBinaryUpdate {
	sabu.mutation.AddAppBinaryReportSequence(i)
	return sabu
}

// Mutation returns the SentinelAppBinaryMutation object of the builder.
func (sabu *SentinelAppBinaryUpdate) Mutation() *SentinelAppBinaryMutation {
	return sabu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sabu *SentinelAppBinaryUpdate) Save(ctx context.Context) (int, error) {
	sabu.defaults()
	return withHooks(ctx, sabu.sqlSave, sabu.mutation, sabu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sabu *SentinelAppBinaryUpdate) SaveX(ctx context.Context) int {
	affected, err := sabu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sabu *SentinelAppBinaryUpdate) Exec(ctx context.Context) error {
	_, err := sabu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabu *SentinelAppBinaryUpdate) ExecX(ctx context.Context) {
	if err := sabu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sabu *SentinelAppBinaryUpdate) defaults() {
	if _, ok := sabu.mutation.UpdatedAt(); !ok {
		v := sentinelappbinary.UpdateDefaultUpdatedAt()
		sabu.mutation.SetUpdatedAt(v)
	}
}

func (sabu *SentinelAppBinaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sentinelappbinary.Table, sentinelappbinary.Columns, sqlgraph.NewFieldSpec(sentinelappbinary.FieldID, field.TypeInt64))
	if ps := sabu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sabu.mutation.SentinelID(); ok {
		_spec.SetField(sentinelappbinary.FieldSentinelID, field.TypeInt64, value)
	}
	if value, ok := sabu.mutation.AddedSentinelID(); ok {
		_spec.AddField(sentinelappbinary.FieldSentinelID, field.TypeInt64, value)
	}
	if value, ok := sabu.mutation.SentinelLibraryReportedID(); ok {
		_spec.SetField(sentinelappbinary.FieldSentinelLibraryReportedID, field.TypeInt64, value)
	}
	if value, ok := sabu.mutation.AddedSentinelLibraryReportedID(); ok {
		_spec.AddField(sentinelappbinary.FieldSentinelLibraryReportedID, field.TypeInt64, value)
	}
	if value, ok := sabu.mutation.GeneratedID(); ok {
		_spec.SetField(sentinelappbinary.FieldGeneratedID, field.TypeString, value)
	}
	if value, ok := sabu.mutation.SizeBytes(); ok {
		_spec.SetField(sentinelappbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := sabu.mutation.AddedSizeBytes(); ok {
		_spec.AddField(sentinelappbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := sabu.mutation.NeedToken(); ok {
		_spec.SetField(sentinelappbinary.FieldNeedToken, field.TypeBool, value)
	}
	if value, ok := sabu.mutation.Name(); ok {
		_spec.SetField(sentinelappbinary.FieldName, field.TypeString, value)
	}
	if sabu.mutation.NameCleared() {
		_spec.ClearField(sentinelappbinary.FieldName, field.TypeString)
	}
	if value, ok := sabu.mutation.Version(); ok {
		_spec.SetField(sentinelappbinary.FieldVersion, field.TypeString, value)
	}
	if sabu.mutation.VersionCleared() {
		_spec.ClearField(sentinelappbinary.FieldVersion, field.TypeString)
	}
	if value, ok := sabu.mutation.Developer(); ok {
		_spec.SetField(sentinelappbinary.FieldDeveloper, field.TypeString, value)
	}
	if sabu.mutation.DeveloperCleared() {
		_spec.ClearField(sentinelappbinary.FieldDeveloper, field.TypeString)
	}
	if value, ok := sabu.mutation.Publisher(); ok {
		_spec.SetField(sentinelappbinary.FieldPublisher, field.TypeString, value)
	}
	if sabu.mutation.PublisherCleared() {
		_spec.ClearField(sentinelappbinary.FieldPublisher, field.TypeString)
	}
	if value, ok := sabu.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelappbinary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sabu.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelappbinary.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sabu.mutation.AppBinaryReportSequence(); ok {
		_spec.SetField(sentinelappbinary.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if value, ok := sabu.mutation.AddedAppBinaryReportSequence(); ok {
		_spec.AddField(sentinelappbinary.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sabu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinelappbinary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sabu.mutation.done = true
	return n, nil
}

// SentinelAppBinaryUpdateOne is the builder for updating a single SentinelAppBinary entity.
type SentinelAppBinaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SentinelAppBinaryMutation
}

// SetSentinelID sets the "sentinel_id" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetSentinelID(mi model.InternalID) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.ResetSentinelID()
	sabuo.mutation.SetSentinelID(mi)
	return sabuo
}

// SetNillableSentinelID sets the "sentinel_id" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableSentinelID(mi *model.InternalID) *SentinelAppBinaryUpdateOne {
	if mi != nil {
		sabuo.SetSentinelID(*mi)
	}
	return sabuo
}

// AddSentinelID adds mi to the "sentinel_id" field.
func (sabuo *SentinelAppBinaryUpdateOne) AddSentinelID(mi model.InternalID) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.AddSentinelID(mi)
	return sabuo
}

// SetSentinelLibraryReportedID sets the "sentinel_library_reported_id" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetSentinelLibraryReportedID(i int64) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.ResetSentinelLibraryReportedID()
	sabuo.mutation.SetSentinelLibraryReportedID(i)
	return sabuo
}

// SetNillableSentinelLibraryReportedID sets the "sentinel_library_reported_id" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableSentinelLibraryReportedID(i *int64) *SentinelAppBinaryUpdateOne {
	if i != nil {
		sabuo.SetSentinelLibraryReportedID(*i)
	}
	return sabuo
}

// AddSentinelLibraryReportedID adds i to the "sentinel_library_reported_id" field.
func (sabuo *SentinelAppBinaryUpdateOne) AddSentinelLibraryReportedID(i int64) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.AddSentinelLibraryReportedID(i)
	return sabuo
}

// SetGeneratedID sets the "generated_id" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetGeneratedID(s string) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.SetGeneratedID(s)
	return sabuo
}

// SetNillableGeneratedID sets the "generated_id" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableGeneratedID(s *string) *SentinelAppBinaryUpdateOne {
	if s != nil {
		sabuo.SetGeneratedID(*s)
	}
	return sabuo
}

// SetSizeBytes sets the "size_bytes" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetSizeBytes(i int64) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.ResetSizeBytes()
	sabuo.mutation.SetSizeBytes(i)
	return sabuo
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableSizeBytes(i *int64) *SentinelAppBinaryUpdateOne {
	if i != nil {
		sabuo.SetSizeBytes(*i)
	}
	return sabuo
}

// AddSizeBytes adds i to the "size_bytes" field.
func (sabuo *SentinelAppBinaryUpdateOne) AddSizeBytes(i int64) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.AddSizeBytes(i)
	return sabuo
}

// SetNeedToken sets the "need_token" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetNeedToken(b bool) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.SetNeedToken(b)
	return sabuo
}

// SetNillableNeedToken sets the "need_token" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableNeedToken(b *bool) *SentinelAppBinaryUpdateOne {
	if b != nil {
		sabuo.SetNeedToken(*b)
	}
	return sabuo
}

// SetName sets the "name" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetName(s string) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.SetName(s)
	return sabuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableName(s *string) *SentinelAppBinaryUpdateOne {
	if s != nil {
		sabuo.SetName(*s)
	}
	return sabuo
}

// ClearName clears the value of the "name" field.
func (sabuo *SentinelAppBinaryUpdateOne) ClearName() *SentinelAppBinaryUpdateOne {
	sabuo.mutation.ClearName()
	return sabuo
}

// SetVersion sets the "version" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetVersion(s string) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.SetVersion(s)
	return sabuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableVersion(s *string) *SentinelAppBinaryUpdateOne {
	if s != nil {
		sabuo.SetVersion(*s)
	}
	return sabuo
}

// ClearVersion clears the value of the "version" field.
func (sabuo *SentinelAppBinaryUpdateOne) ClearVersion() *SentinelAppBinaryUpdateOne {
	sabuo.mutation.ClearVersion()
	return sabuo
}

// SetDeveloper sets the "developer" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetDeveloper(s string) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.SetDeveloper(s)
	return sabuo
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableDeveloper(s *string) *SentinelAppBinaryUpdateOne {
	if s != nil {
		sabuo.SetDeveloper(*s)
	}
	return sabuo
}

// ClearDeveloper clears the value of the "developer" field.
func (sabuo *SentinelAppBinaryUpdateOne) ClearDeveloper() *SentinelAppBinaryUpdateOne {
	sabuo.mutation.ClearDeveloper()
	return sabuo
}

// SetPublisher sets the "publisher" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetPublisher(s string) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.SetPublisher(s)
	return sabuo
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillablePublisher(s *string) *SentinelAppBinaryUpdateOne {
	if s != nil {
		sabuo.SetPublisher(*s)
	}
	return sabuo
}

// ClearPublisher clears the value of the "publisher" field.
func (sabuo *SentinelAppBinaryUpdateOne) ClearPublisher() *SentinelAppBinaryUpdateOne {
	sabuo.mutation.ClearPublisher()
	return sabuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetUpdatedAt(t time.Time) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.SetUpdatedAt(t)
	return sabuo
}

// SetCreatedAt sets the "created_at" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetCreatedAt(t time.Time) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.SetCreatedAt(t)
	return sabuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableCreatedAt(t *time.Time) *SentinelAppBinaryUpdateOne {
	if t != nil {
		sabuo.SetCreatedAt(*t)
	}
	return sabuo
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (sabuo *SentinelAppBinaryUpdateOne) SetAppBinaryReportSequence(i int64) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.ResetAppBinaryReportSequence()
	sabuo.mutation.SetAppBinaryReportSequence(i)
	return sabuo
}

// SetNillableAppBinaryReportSequence sets the "app_binary_report_sequence" field if the given value is not nil.
func (sabuo *SentinelAppBinaryUpdateOne) SetNillableAppBinaryReportSequence(i *int64) *SentinelAppBinaryUpdateOne {
	if i != nil {
		sabuo.SetAppBinaryReportSequence(*i)
	}
	return sabuo
}

// AddAppBinaryReportSequence adds i to the "app_binary_report_sequence" field.
func (sabuo *SentinelAppBinaryUpdateOne) AddAppBinaryReportSequence(i int64) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.AddAppBinaryReportSequence(i)
	return sabuo
}

// Mutation returns the SentinelAppBinaryMutation object of the builder.
func (sabuo *SentinelAppBinaryUpdateOne) Mutation() *SentinelAppBinaryMutation {
	return sabuo.mutation
}

// Where appends a list predicates to the SentinelAppBinaryUpdate builder.
func (sabuo *SentinelAppBinaryUpdateOne) Where(ps ...predicate.SentinelAppBinary) *SentinelAppBinaryUpdateOne {
	sabuo.mutation.Where(ps...)
	return sabuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sabuo *SentinelAppBinaryUpdateOne) Select(field string, fields ...string) *SentinelAppBinaryUpdateOne {
	sabuo.fields = append([]string{field}, fields...)
	return sabuo
}

// Save executes the query and returns the updated SentinelAppBinary entity.
func (sabuo *SentinelAppBinaryUpdateOne) Save(ctx context.Context) (*SentinelAppBinary, error) {
	sabuo.defaults()
	return withHooks(ctx, sabuo.sqlSave, sabuo.mutation, sabuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sabuo *SentinelAppBinaryUpdateOne) SaveX(ctx context.Context) *SentinelAppBinary {
	node, err := sabuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sabuo *SentinelAppBinaryUpdateOne) Exec(ctx context.Context) error {
	_, err := sabuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabuo *SentinelAppBinaryUpdateOne) ExecX(ctx context.Context) {
	if err := sabuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sabuo *SentinelAppBinaryUpdateOne) defaults() {
	if _, ok := sabuo.mutation.UpdatedAt(); !ok {
		v := sentinelappbinary.UpdateDefaultUpdatedAt()
		sabuo.mutation.SetUpdatedAt(v)
	}
}

func (sabuo *SentinelAppBinaryUpdateOne) sqlSave(ctx context.Context) (_node *SentinelAppBinary, err error) {
	_spec := sqlgraph.NewUpdateSpec(sentinelappbinary.Table, sentinelappbinary.Columns, sqlgraph.NewFieldSpec(sentinelappbinary.FieldID, field.TypeInt64))
	id, ok := sabuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SentinelAppBinary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sabuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentinelappbinary.FieldID)
		for _, f := range fields {
			if !sentinelappbinary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sentinelappbinary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sabuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sabuo.mutation.SentinelID(); ok {
		_spec.SetField(sentinelappbinary.FieldSentinelID, field.TypeInt64, value)
	}
	if value, ok := sabuo.mutation.AddedSentinelID(); ok {
		_spec.AddField(sentinelappbinary.FieldSentinelID, field.TypeInt64, value)
	}
	if value, ok := sabuo.mutation.SentinelLibraryReportedID(); ok {
		_spec.SetField(sentinelappbinary.FieldSentinelLibraryReportedID, field.TypeInt64, value)
	}
	if value, ok := sabuo.mutation.AddedSentinelLibraryReportedID(); ok {
		_spec.AddField(sentinelappbinary.FieldSentinelLibraryReportedID, field.TypeInt64, value)
	}
	if value, ok := sabuo.mutation.GeneratedID(); ok {
		_spec.SetField(sentinelappbinary.FieldGeneratedID, field.TypeString, value)
	}
	if value, ok := sabuo.mutation.SizeBytes(); ok {
		_spec.SetField(sentinelappbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := sabuo.mutation.AddedSizeBytes(); ok {
		_spec.AddField(sentinelappbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := sabuo.mutation.NeedToken(); ok {
		_spec.SetField(sentinelappbinary.FieldNeedToken, field.TypeBool, value)
	}
	if value, ok := sabuo.mutation.Name(); ok {
		_spec.SetField(sentinelappbinary.FieldName, field.TypeString, value)
	}
	if sabuo.mutation.NameCleared() {
		_spec.ClearField(sentinelappbinary.FieldName, field.TypeString)
	}
	if value, ok := sabuo.mutation.Version(); ok {
		_spec.SetField(sentinelappbinary.FieldVersion, field.TypeString, value)
	}
	if sabuo.mutation.VersionCleared() {
		_spec.ClearField(sentinelappbinary.FieldVersion, field.TypeString)
	}
	if value, ok := sabuo.mutation.Developer(); ok {
		_spec.SetField(sentinelappbinary.FieldDeveloper, field.TypeString, value)
	}
	if sabuo.mutation.DeveloperCleared() {
		_spec.ClearField(sentinelappbinary.FieldDeveloper, field.TypeString)
	}
	if value, ok := sabuo.mutation.Publisher(); ok {
		_spec.SetField(sentinelappbinary.FieldPublisher, field.TypeString, value)
	}
	if sabuo.mutation.PublisherCleared() {
		_spec.ClearField(sentinelappbinary.FieldPublisher, field.TypeString)
	}
	if value, ok := sabuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelappbinary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sabuo.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelappbinary.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sabuo.mutation.AppBinaryReportSequence(); ok {
		_spec.SetField(sentinelappbinary.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if value, ok := sabuo.mutation.AddedAppBinaryReportSequence(); ok {
		_spec.AddField(sentinelappbinary.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	_node = &SentinelAppBinary{config: sabuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sabuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinelappbinary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sabuo.mutation.done = true
	return _node, nil
}
