// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinel"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinellibrary"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelsession"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelUpdate is the builder for updating Sentinel entities.
type SentinelUpdate struct {
	config
	hooks    []Hook
	mutation *SentinelMutation
}

// Where appends a list predicates to the SentinelUpdate builder.
func (su *SentinelUpdate) Where(ps ...predicate.Sentinel) *SentinelUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SentinelUpdate) SetName(s string) *SentinelUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SentinelUpdate) SetNillableName(s *string) *SentinelUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SentinelUpdate) SetDescription(s string) *SentinelUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SentinelUpdate) SetNillableDescription(s *string) *SentinelUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetURL sets the "url" field.
func (su *SentinelUpdate) SetURL(s string) *SentinelUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *SentinelUpdate) SetNillableURL(s *string) *SentinelUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (su *SentinelUpdate) SetAlternativeUrls(s []string) *SentinelUpdate {
	su.mutation.SetAlternativeUrls(s)
	return su
}

// AppendAlternativeUrls appends s to the "alternative_urls" field.
func (su *SentinelUpdate) AppendAlternativeUrls(s []string) *SentinelUpdate {
	su.mutation.AppendAlternativeUrls(s)
	return su
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (su *SentinelUpdate) ClearAlternativeUrls() *SentinelUpdate {
	su.mutation.ClearAlternativeUrls()
	return su
}

// SetGetTokenPath sets the "get_token_path" field.
func (su *SentinelUpdate) SetGetTokenPath(s string) *SentinelUpdate {
	su.mutation.SetGetTokenPath(s)
	return su
}

// SetNillableGetTokenPath sets the "get_token_path" field if the given value is not nil.
func (su *SentinelUpdate) SetNillableGetTokenPath(s *string) *SentinelUpdate {
	if s != nil {
		su.SetGetTokenPath(*s)
	}
	return su
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (su *SentinelUpdate) ClearGetTokenPath() *SentinelUpdate {
	su.mutation.ClearGetTokenPath()
	return su
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (su *SentinelUpdate) SetDownloadFileBasePath(s string) *SentinelUpdate {
	su.mutation.SetDownloadFileBasePath(s)
	return su
}

// SetNillableDownloadFileBasePath sets the "download_file_base_path" field if the given value is not nil.
func (su *SentinelUpdate) SetNillableDownloadFileBasePath(s *string) *SentinelUpdate {
	if s != nil {
		su.SetDownloadFileBasePath(*s)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SentinelUpdate) SetUpdatedAt(t time.Time) *SentinelUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SentinelUpdate) SetCreatedAt(t time.Time) *SentinelUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SentinelUpdate) SetNillableCreatedAt(t *time.Time) *SentinelUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (su *SentinelUpdate) SetLibraryReportSequence(i int64) *SentinelUpdate {
	su.mutation.ResetLibraryReportSequence()
	su.mutation.SetLibraryReportSequence(i)
	return su
}

// SetNillableLibraryReportSequence sets the "library_report_sequence" field if the given value is not nil.
func (su *SentinelUpdate) SetNillableLibraryReportSequence(i *int64) *SentinelUpdate {
	if i != nil {
		su.SetLibraryReportSequence(*i)
	}
	return su
}

// AddLibraryReportSequence adds i to the "library_report_sequence" field.
func (su *SentinelUpdate) AddLibraryReportSequence(i int64) *SentinelUpdate {
	su.mutation.AddLibraryReportSequence(i)
	return su
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (su *SentinelUpdate) SetAppBinaryReportSequence(i int64) *SentinelUpdate {
	su.mutation.ResetAppBinaryReportSequence()
	su.mutation.SetAppBinaryReportSequence(i)
	return su
}

// SetNillableAppBinaryReportSequence sets the "app_binary_report_sequence" field if the given value is not nil.
func (su *SentinelUpdate) SetNillableAppBinaryReportSequence(i *int64) *SentinelUpdate {
	if i != nil {
		su.SetAppBinaryReportSequence(*i)
	}
	return su
}

// AddAppBinaryReportSequence adds i to the "app_binary_report_sequence" field.
func (su *SentinelUpdate) AddAppBinaryReportSequence(i int64) *SentinelUpdate {
	su.mutation.AddAppBinaryReportSequence(i)
	return su
}

// AddSentinelSessionIDs adds the "sentinel_session" edge to the SentinelSession entity by IDs.
func (su *SentinelUpdate) AddSentinelSessionIDs(ids ...model.InternalID) *SentinelUpdate {
	su.mutation.AddSentinelSessionIDs(ids...)
	return su
}

// AddSentinelSession adds the "sentinel_session" edges to the SentinelSession entity.
func (su *SentinelUpdate) AddSentinelSession(s ...*SentinelSession) *SentinelUpdate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSentinelSessionIDs(ids...)
}

// AddSentinelLibraryIDs adds the "sentinel_library" edge to the SentinelLibrary entity by IDs.
func (su *SentinelUpdate) AddSentinelLibraryIDs(ids ...model.InternalID) *SentinelUpdate {
	su.mutation.AddSentinelLibraryIDs(ids...)
	return su
}

// AddSentinelLibrary adds the "sentinel_library" edges to the SentinelLibrary entity.
func (su *SentinelUpdate) AddSentinelLibrary(s ...*SentinelLibrary) *SentinelUpdate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSentinelLibraryIDs(ids...)
}

// Mutation returns the SentinelMutation object of the builder.
func (su *SentinelUpdate) Mutation() *SentinelMutation {
	return su.mutation
}

// ClearSentinelSession clears all "sentinel_session" edges to the SentinelSession entity.
func (su *SentinelUpdate) ClearSentinelSession() *SentinelUpdate {
	su.mutation.ClearSentinelSession()
	return su
}

// RemoveSentinelSessionIDs removes the "sentinel_session" edge to SentinelSession entities by IDs.
func (su *SentinelUpdate) RemoveSentinelSessionIDs(ids ...model.InternalID) *SentinelUpdate {
	su.mutation.RemoveSentinelSessionIDs(ids...)
	return su
}

// RemoveSentinelSession removes "sentinel_session" edges to SentinelSession entities.
func (su *SentinelUpdate) RemoveSentinelSession(s ...*SentinelSession) *SentinelUpdate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSentinelSessionIDs(ids...)
}

// ClearSentinelLibrary clears all "sentinel_library" edges to the SentinelLibrary entity.
func (su *SentinelUpdate) ClearSentinelLibrary() *SentinelUpdate {
	su.mutation.ClearSentinelLibrary()
	return su
}

// RemoveSentinelLibraryIDs removes the "sentinel_library" edge to SentinelLibrary entities by IDs.
func (su *SentinelUpdate) RemoveSentinelLibraryIDs(ids ...model.InternalID) *SentinelUpdate {
	su.mutation.RemoveSentinelLibraryIDs(ids...)
	return su
}

// RemoveSentinelLibrary removes "sentinel_library" edges to SentinelLibrary entities.
func (su *SentinelUpdate) RemoveSentinelLibrary(s ...*SentinelLibrary) *SentinelUpdate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSentinelLibraryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SentinelUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SentinelUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SentinelUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SentinelUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SentinelUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := sentinel.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *SentinelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sentinel.Table, sentinel.Columns, sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(sentinel.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(sentinel.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(sentinel.FieldURL, field.TypeString, value)
	}
	if value, ok := su.mutation.AlternativeUrls(); ok {
		_spec.SetField(sentinel.FieldAlternativeUrls, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedAlternativeUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sentinel.FieldAlternativeUrls, value)
		})
	}
	if su.mutation.AlternativeUrlsCleared() {
		_spec.ClearField(sentinel.FieldAlternativeUrls, field.TypeJSON)
	}
	if value, ok := su.mutation.GetTokenPath(); ok {
		_spec.SetField(sentinel.FieldGetTokenPath, field.TypeString, value)
	}
	if su.mutation.GetTokenPathCleared() {
		_spec.ClearField(sentinel.FieldGetTokenPath, field.TypeString)
	}
	if value, ok := su.mutation.DownloadFileBasePath(); ok {
		_spec.SetField(sentinel.FieldDownloadFileBasePath, field.TypeString, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(sentinel.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.LibraryReportSequence(); ok {
		_spec.SetField(sentinel.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedLibraryReportSequence(); ok {
		_spec.AddField(sentinel.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AppBinaryReportSequence(); ok {
		_spec.SetField(sentinel.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedAppBinaryReportSequence(); ok {
		_spec.AddField(sentinel.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if su.mutation.SentinelSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelSessionTable,
			Columns: []string{sentinel.SentinelSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSentinelSessionIDs(); len(nodes) > 0 && !su.mutation.SentinelSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelSessionTable,
			Columns: []string{sentinel.SentinelSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SentinelSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelSessionTable,
			Columns: []string{sentinel.SentinelSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SentinelLibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelLibraryTable,
			Columns: []string{sentinel.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSentinelLibraryIDs(); len(nodes) > 0 && !su.mutation.SentinelLibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelLibraryTable,
			Columns: []string{sentinel.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SentinelLibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelLibraryTable,
			Columns: []string{sentinel.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SentinelUpdateOne is the builder for updating a single Sentinel entity.
type SentinelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SentinelMutation
}

// SetName sets the "name" field.
func (suo *SentinelUpdateOne) SetName(s string) *SentinelUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SentinelUpdateOne) SetNillableName(s *string) *SentinelUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SentinelUpdateOne) SetDescription(s string) *SentinelUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SentinelUpdateOne) SetNillableDescription(s *string) *SentinelUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetURL sets the "url" field.
func (suo *SentinelUpdateOne) SetURL(s string) *SentinelUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *SentinelUpdateOne) SetNillableURL(s *string) *SentinelUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (suo *SentinelUpdateOne) SetAlternativeUrls(s []string) *SentinelUpdateOne {
	suo.mutation.SetAlternativeUrls(s)
	return suo
}

// AppendAlternativeUrls appends s to the "alternative_urls" field.
func (suo *SentinelUpdateOne) AppendAlternativeUrls(s []string) *SentinelUpdateOne {
	suo.mutation.AppendAlternativeUrls(s)
	return suo
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (suo *SentinelUpdateOne) ClearAlternativeUrls() *SentinelUpdateOne {
	suo.mutation.ClearAlternativeUrls()
	return suo
}

// SetGetTokenPath sets the "get_token_path" field.
func (suo *SentinelUpdateOne) SetGetTokenPath(s string) *SentinelUpdateOne {
	suo.mutation.SetGetTokenPath(s)
	return suo
}

// SetNillableGetTokenPath sets the "get_token_path" field if the given value is not nil.
func (suo *SentinelUpdateOne) SetNillableGetTokenPath(s *string) *SentinelUpdateOne {
	if s != nil {
		suo.SetGetTokenPath(*s)
	}
	return suo
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (suo *SentinelUpdateOne) ClearGetTokenPath() *SentinelUpdateOne {
	suo.mutation.ClearGetTokenPath()
	return suo
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (suo *SentinelUpdateOne) SetDownloadFileBasePath(s string) *SentinelUpdateOne {
	suo.mutation.SetDownloadFileBasePath(s)
	return suo
}

// SetNillableDownloadFileBasePath sets the "download_file_base_path" field if the given value is not nil.
func (suo *SentinelUpdateOne) SetNillableDownloadFileBasePath(s *string) *SentinelUpdateOne {
	if s != nil {
		suo.SetDownloadFileBasePath(*s)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SentinelUpdateOne) SetUpdatedAt(t time.Time) *SentinelUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SentinelUpdateOne) SetCreatedAt(t time.Time) *SentinelUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SentinelUpdateOne) SetNillableCreatedAt(t *time.Time) *SentinelUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (suo *SentinelUpdateOne) SetLibraryReportSequence(i int64) *SentinelUpdateOne {
	suo.mutation.ResetLibraryReportSequence()
	suo.mutation.SetLibraryReportSequence(i)
	return suo
}

// SetNillableLibraryReportSequence sets the "library_report_sequence" field if the given value is not nil.
func (suo *SentinelUpdateOne) SetNillableLibraryReportSequence(i *int64) *SentinelUpdateOne {
	if i != nil {
		suo.SetLibraryReportSequence(*i)
	}
	return suo
}

// AddLibraryReportSequence adds i to the "library_report_sequence" field.
func (suo *SentinelUpdateOne) AddLibraryReportSequence(i int64) *SentinelUpdateOne {
	suo.mutation.AddLibraryReportSequence(i)
	return suo
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (suo *SentinelUpdateOne) SetAppBinaryReportSequence(i int64) *SentinelUpdateOne {
	suo.mutation.ResetAppBinaryReportSequence()
	suo.mutation.SetAppBinaryReportSequence(i)
	return suo
}

// SetNillableAppBinaryReportSequence sets the "app_binary_report_sequence" field if the given value is not nil.
func (suo *SentinelUpdateOne) SetNillableAppBinaryReportSequence(i *int64) *SentinelUpdateOne {
	if i != nil {
		suo.SetAppBinaryReportSequence(*i)
	}
	return suo
}

// AddAppBinaryReportSequence adds i to the "app_binary_report_sequence" field.
func (suo *SentinelUpdateOne) AddAppBinaryReportSequence(i int64) *SentinelUpdateOne {
	suo.mutation.AddAppBinaryReportSequence(i)
	return suo
}

// AddSentinelSessionIDs adds the "sentinel_session" edge to the SentinelSession entity by IDs.
func (suo *SentinelUpdateOne) AddSentinelSessionIDs(ids ...model.InternalID) *SentinelUpdateOne {
	suo.mutation.AddSentinelSessionIDs(ids...)
	return suo
}

// AddSentinelSession adds the "sentinel_session" edges to the SentinelSession entity.
func (suo *SentinelUpdateOne) AddSentinelSession(s ...*SentinelSession) *SentinelUpdateOne {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSentinelSessionIDs(ids...)
}

// AddSentinelLibraryIDs adds the "sentinel_library" edge to the SentinelLibrary entity by IDs.
func (suo *SentinelUpdateOne) AddSentinelLibraryIDs(ids ...model.InternalID) *SentinelUpdateOne {
	suo.mutation.AddSentinelLibraryIDs(ids...)
	return suo
}

// AddSentinelLibrary adds the "sentinel_library" edges to the SentinelLibrary entity.
func (suo *SentinelUpdateOne) AddSentinelLibrary(s ...*SentinelLibrary) *SentinelUpdateOne {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSentinelLibraryIDs(ids...)
}

// Mutation returns the SentinelMutation object of the builder.
func (suo *SentinelUpdateOne) Mutation() *SentinelMutation {
	return suo.mutation
}

// ClearSentinelSession clears all "sentinel_session" edges to the SentinelSession entity.
func (suo *SentinelUpdateOne) ClearSentinelSession() *SentinelUpdateOne {
	suo.mutation.ClearSentinelSession()
	return suo
}

// RemoveSentinelSessionIDs removes the "sentinel_session" edge to SentinelSession entities by IDs.
func (suo *SentinelUpdateOne) RemoveSentinelSessionIDs(ids ...model.InternalID) *SentinelUpdateOne {
	suo.mutation.RemoveSentinelSessionIDs(ids...)
	return suo
}

// RemoveSentinelSession removes "sentinel_session" edges to SentinelSession entities.
func (suo *SentinelUpdateOne) RemoveSentinelSession(s ...*SentinelSession) *SentinelUpdateOne {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSentinelSessionIDs(ids...)
}

// ClearSentinelLibrary clears all "sentinel_library" edges to the SentinelLibrary entity.
func (suo *SentinelUpdateOne) ClearSentinelLibrary() *SentinelUpdateOne {
	suo.mutation.ClearSentinelLibrary()
	return suo
}

// RemoveSentinelLibraryIDs removes the "sentinel_library" edge to SentinelLibrary entities by IDs.
func (suo *SentinelUpdateOne) RemoveSentinelLibraryIDs(ids ...model.InternalID) *SentinelUpdateOne {
	suo.mutation.RemoveSentinelLibraryIDs(ids...)
	return suo
}

// RemoveSentinelLibrary removes "sentinel_library" edges to SentinelLibrary entities.
func (suo *SentinelUpdateOne) RemoveSentinelLibrary(s ...*SentinelLibrary) *SentinelUpdateOne {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSentinelLibraryIDs(ids...)
}

// Where appends a list predicates to the SentinelUpdate builder.
func (suo *SentinelUpdateOne) Where(ps ...predicate.Sentinel) *SentinelUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SentinelUpdateOne) Select(field string, fields ...string) *SentinelUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sentinel entity.
func (suo *SentinelUpdateOne) Save(ctx context.Context) (*Sentinel, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SentinelUpdateOne) SaveX(ctx context.Context) *Sentinel {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SentinelUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SentinelUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SentinelUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := sentinel.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *SentinelUpdateOne) sqlSave(ctx context.Context) (_node *Sentinel, err error) {
	_spec := sqlgraph.NewUpdateSpec(sentinel.Table, sentinel.Columns, sqlgraph.NewFieldSpec(sentinel.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sentinel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentinel.FieldID)
		for _, f := range fields {
			if !sentinel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sentinel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(sentinel.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(sentinel.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(sentinel.FieldURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.AlternativeUrls(); ok {
		_spec.SetField(sentinel.FieldAlternativeUrls, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedAlternativeUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sentinel.FieldAlternativeUrls, value)
		})
	}
	if suo.mutation.AlternativeUrlsCleared() {
		_spec.ClearField(sentinel.FieldAlternativeUrls, field.TypeJSON)
	}
	if value, ok := suo.mutation.GetTokenPath(); ok {
		_spec.SetField(sentinel.FieldGetTokenPath, field.TypeString, value)
	}
	if suo.mutation.GetTokenPathCleared() {
		_spec.ClearField(sentinel.FieldGetTokenPath, field.TypeString)
	}
	if value, ok := suo.mutation.DownloadFileBasePath(); ok {
		_spec.SetField(sentinel.FieldDownloadFileBasePath, field.TypeString, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(sentinel.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.LibraryReportSequence(); ok {
		_spec.SetField(sentinel.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedLibraryReportSequence(); ok {
		_spec.AddField(sentinel.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AppBinaryReportSequence(); ok {
		_spec.SetField(sentinel.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedAppBinaryReportSequence(); ok {
		_spec.AddField(sentinel.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if suo.mutation.SentinelSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelSessionTable,
			Columns: []string{sentinel.SentinelSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSentinelSessionIDs(); len(nodes) > 0 && !suo.mutation.SentinelSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelSessionTable,
			Columns: []string{sentinel.SentinelSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SentinelSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelSessionTable,
			Columns: []string{sentinel.SentinelSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelsession.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SentinelLibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelLibraryTable,
			Columns: []string{sentinel.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSentinelLibraryIDs(); len(nodes) > 0 && !suo.mutation.SentinelLibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelLibraryTable,
			Columns: []string{sentinel.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SentinelLibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sentinel.SentinelLibraryTable,
			Columns: []string{sentinel.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sentinel{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
