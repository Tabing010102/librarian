// Code generated by ent, DO NOT EDIT.

package sentinelsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// ID filters vertices based on their ID field.
func ID(id model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id model.InternalID) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLTE(FieldID, id))
}

// SentinelID applies equality check predicate on the "sentinel_id" field. It's identical to SentinelIDEQ.
func SentinelID(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldEQ(FieldSentinelID, vc))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldRefreshToken, v))
}

// ExpireAt applies equality check predicate on the "expire_at" field. It's identical to ExpireAtEQ.
func ExpireAt(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldExpireAt, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldEQ(FieldCreatorID, vc))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastRefreshedAt applies equality check predicate on the "last_refreshed_at" field. It's identical to LastRefreshedAtEQ.
func LastRefreshedAt(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldLastRefreshedAt, v))
}

// RefreshCount applies equality check predicate on the "refresh_count" field. It's identical to RefreshCountEQ.
func RefreshCount(v int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldRefreshCount, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldCreatedAt, v))
}

// SentinelIDEQ applies the EQ predicate on the "sentinel_id" field.
func SentinelIDEQ(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldEQ(FieldSentinelID, vc))
}

// SentinelIDNEQ applies the NEQ predicate on the "sentinel_id" field.
func SentinelIDNEQ(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldNEQ(FieldSentinelID, vc))
}

// SentinelIDIn applies the In predicate on the "sentinel_id" field.
func SentinelIDIn(vs ...model.InternalID) predicate.SentinelSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.SentinelSession(sql.FieldIn(FieldSentinelID, v...))
}

// SentinelIDNotIn applies the NotIn predicate on the "sentinel_id" field.
func SentinelIDNotIn(vs ...model.InternalID) predicate.SentinelSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.SentinelSession(sql.FieldNotIn(FieldSentinelID, v...))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldContainsFold(FieldRefreshToken, v))
}

// ExpireAtEQ applies the EQ predicate on the "expire_at" field.
func ExpireAtEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldExpireAt, v))
}

// ExpireAtNEQ applies the NEQ predicate on the "expire_at" field.
func ExpireAtNEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldExpireAt, v))
}

// ExpireAtIn applies the In predicate on the "expire_at" field.
func ExpireAtIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldExpireAt, vs...))
}

// ExpireAtNotIn applies the NotIn predicate on the "expire_at" field.
func ExpireAtNotIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldExpireAt, vs...))
}

// ExpireAtGT applies the GT predicate on the "expire_at" field.
func ExpireAtGT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGT(FieldExpireAt, v))
}

// ExpireAtGTE applies the GTE predicate on the "expire_at" field.
func ExpireAtGTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGTE(FieldExpireAt, v))
}

// ExpireAtLT applies the LT predicate on the "expire_at" field.
func ExpireAtLT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLT(FieldExpireAt, v))
}

// ExpireAtLTE applies the LTE predicate on the "expire_at" field.
func ExpireAtLTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLTE(FieldExpireAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldEQ(FieldCreatorID, vc))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldNEQ(FieldCreatorID, vc))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...model.InternalID) predicate.SentinelSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.SentinelSession(sql.FieldIn(FieldCreatorID, v...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...model.InternalID) predicate.SentinelSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.SentinelSession(sql.FieldNotIn(FieldCreatorID, v...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldGT(FieldCreatorID, vc))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldGTE(FieldCreatorID, vc))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldLT(FieldCreatorID, vc))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v model.InternalID) predicate.SentinelSession {
	vc := int64(v)
	return predicate.SentinelSession(sql.FieldLTE(FieldCreatorID, vc))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotNull(FieldLastUsedAt))
}

// LastRefreshedAtEQ applies the EQ predicate on the "last_refreshed_at" field.
func LastRefreshedAtEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldLastRefreshedAt, v))
}

// LastRefreshedAtNEQ applies the NEQ predicate on the "last_refreshed_at" field.
func LastRefreshedAtNEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldLastRefreshedAt, v))
}

// LastRefreshedAtIn applies the In predicate on the "last_refreshed_at" field.
func LastRefreshedAtIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldLastRefreshedAt, vs...))
}

// LastRefreshedAtNotIn applies the NotIn predicate on the "last_refreshed_at" field.
func LastRefreshedAtNotIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldLastRefreshedAt, vs...))
}

// LastRefreshedAtGT applies the GT predicate on the "last_refreshed_at" field.
func LastRefreshedAtGT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGT(FieldLastRefreshedAt, v))
}

// LastRefreshedAtGTE applies the GTE predicate on the "last_refreshed_at" field.
func LastRefreshedAtGTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGTE(FieldLastRefreshedAt, v))
}

// LastRefreshedAtLT applies the LT predicate on the "last_refreshed_at" field.
func LastRefreshedAtLT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLT(FieldLastRefreshedAt, v))
}

// LastRefreshedAtLTE applies the LTE predicate on the "last_refreshed_at" field.
func LastRefreshedAtLTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLTE(FieldLastRefreshedAt, v))
}

// LastRefreshedAtIsNil applies the IsNil predicate on the "last_refreshed_at" field.
func LastRefreshedAtIsNil() predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIsNull(FieldLastRefreshedAt))
}

// LastRefreshedAtNotNil applies the NotNil predicate on the "last_refreshed_at" field.
func LastRefreshedAtNotNil() predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotNull(FieldLastRefreshedAt))
}

// RefreshCountEQ applies the EQ predicate on the "refresh_count" field.
func RefreshCountEQ(v int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldRefreshCount, v))
}

// RefreshCountNEQ applies the NEQ predicate on the "refresh_count" field.
func RefreshCountNEQ(v int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldRefreshCount, v))
}

// RefreshCountIn applies the In predicate on the "refresh_count" field.
func RefreshCountIn(vs ...int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldRefreshCount, vs...))
}

// RefreshCountNotIn applies the NotIn predicate on the "refresh_count" field.
func RefreshCountNotIn(vs ...int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldRefreshCount, vs...))
}

// RefreshCountGT applies the GT predicate on the "refresh_count" field.
func RefreshCountGT(v int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGT(FieldRefreshCount, v))
}

// RefreshCountGTE applies the GTE predicate on the "refresh_count" field.
func RefreshCountGTE(v int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGTE(FieldRefreshCount, v))
}

// RefreshCountLT applies the LT predicate on the "refresh_count" field.
func RefreshCountLT(v int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLT(FieldRefreshCount, v))
}

// RefreshCountLTE applies the LTE predicate on the "refresh_count" field.
func RefreshCountLTE(v int64) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLTE(FieldRefreshCount, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SentinelSession {
	return predicate.SentinelSession(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSentinel applies the HasEdge predicate on the "sentinel" edge.
func HasSentinel() predicate.SentinelSession {
	return predicate.SentinelSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SentinelTable, SentinelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentinelWith applies the HasEdge predicate on the "sentinel" edge with a given conditions (other predicates).
func HasSentinelWith(preds ...predicate.Sentinel) predicate.SentinelSession {
	return predicate.SentinelSession(func(s *sql.Selector) {
		step := newSentinelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SentinelSession) predicate.SentinelSession {
	return predicate.SentinelSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SentinelSession) predicate.SentinelSession {
	return predicate.SentinelSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SentinelSession) predicate.SentinelSession {
	return predicate.SentinelSession(sql.NotPredicates(p))
}
