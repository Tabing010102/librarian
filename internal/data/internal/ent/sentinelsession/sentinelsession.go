// Code generated by ent, DO NOT EDIT.

package sentinelsession

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sentinelsession type in the database.
	Label = "sentinel_session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSentinelID holds the string denoting the sentinel_id field in the database.
	FieldSentinelID = "sentinel_id"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldExpireAt holds the string denoting the expire_at field in the database.
	FieldExpireAt = "expire_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldLastUsedAt holds the string denoting the last_used_at field in the database.
	FieldLastUsedAt = "last_used_at"
	// FieldLastRefreshedAt holds the string denoting the last_refreshed_at field in the database.
	FieldLastRefreshedAt = "last_refreshed_at"
	// FieldRefreshCount holds the string denoting the refresh_count field in the database.
	FieldRefreshCount = "refresh_count"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSentinel holds the string denoting the sentinel edge name in mutations.
	EdgeSentinel = "sentinel"
	// Table holds the table name of the sentinelsession in the database.
	Table = "sentinel_sessions"
	// SentinelTable is the table that holds the sentinel relation/edge.
	SentinelTable = "sentinel_sessions"
	// SentinelInverseTable is the table name for the Sentinel entity.
	// It exists in this package in order to avoid circular dependency with the "sentinel" package.
	SentinelInverseTable = "sentinels"
	// SentinelColumn is the table column denoting the sentinel relation/edge.
	SentinelColumn = "sentinel_id"
)

// Columns holds all SQL columns for sentinelsession fields.
var Columns = []string{
	FieldID,
	FieldSentinelID,
	FieldRefreshToken,
	FieldExpireAt,
	FieldStatus,
	FieldCreatorID,
	FieldLastUsedAt,
	FieldLastRefreshedAt,
	FieldRefreshCount,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRefreshCount holds the default value on creation for the "refresh_count" field.
	DefaultRefreshCount int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActive  Status = "active"
	StatusSuspend Status = "suspend"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusSuspend:
		return nil
	default:
		return fmt.Errorf("sentinelsession: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the SentinelSession queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySentinelID orders the results by the sentinel_id field.
func BySentinelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentinelID, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByExpireAt orders the results by the expire_at field.
func ByExpireAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpireAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByLastUsedAt orders the results by the last_used_at field.
func ByLastUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsedAt, opts...).ToFunc()
}

// ByLastRefreshedAt orders the results by the last_refreshed_at field.
func ByLastRefreshedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRefreshedAt, opts...).ToFunc()
}

// ByRefreshCount orders the results by the refresh_count field.
func ByRefreshCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshCount, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySentinelField orders the results by sentinel field.
func BySentinelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentinelStep(), sql.OrderByField(field, opts...))
	}
}
func newSentinelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentinelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SentinelTable, SentinelColumn),
	)
}
