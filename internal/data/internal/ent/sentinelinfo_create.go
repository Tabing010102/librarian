// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinellibrary"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelInfoCreate is the builder for creating a SentinelInfo entity.
type SentinelInfoCreate struct {
	config
	mutation *SentinelInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetURL sets the "url" field.
func (sic *SentinelInfoCreate) SetURL(s string) *SentinelInfoCreate {
	sic.mutation.SetURL(s)
	return sic
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (sic *SentinelInfoCreate) SetAlternativeUrls(s []string) *SentinelInfoCreate {
	sic.mutation.SetAlternativeUrls(s)
	return sic
}

// SetGetTokenPath sets the "get_token_path" field.
func (sic *SentinelInfoCreate) SetGetTokenPath(s string) *SentinelInfoCreate {
	sic.mutation.SetGetTokenPath(s)
	return sic
}

// SetNillableGetTokenPath sets the "get_token_path" field if the given value is not nil.
func (sic *SentinelInfoCreate) SetNillableGetTokenPath(s *string) *SentinelInfoCreate {
	if s != nil {
		sic.SetGetTokenPath(*s)
	}
	return sic
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (sic *SentinelInfoCreate) SetDownloadFileBasePath(s string) *SentinelInfoCreate {
	sic.mutation.SetDownloadFileBasePath(s)
	return sic
}

// SetUpdatedAt sets the "updated_at" field.
func (sic *SentinelInfoCreate) SetUpdatedAt(t time.Time) *SentinelInfoCreate {
	sic.mutation.SetUpdatedAt(t)
	return sic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sic *SentinelInfoCreate) SetNillableUpdatedAt(t *time.Time) *SentinelInfoCreate {
	if t != nil {
		sic.SetUpdatedAt(*t)
	}
	return sic
}

// SetCreatedAt sets the "created_at" field.
func (sic *SentinelInfoCreate) SetCreatedAt(t time.Time) *SentinelInfoCreate {
	sic.mutation.SetCreatedAt(t)
	return sic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sic *SentinelInfoCreate) SetNillableCreatedAt(t *time.Time) *SentinelInfoCreate {
	if t != nil {
		sic.SetCreatedAt(*t)
	}
	return sic
}

// SetID sets the "id" field.
func (sic *SentinelInfoCreate) SetID(mi model.InternalID) *SentinelInfoCreate {
	sic.mutation.SetID(mi)
	return sic
}

// AddSentinelLibraryIDs adds the "sentinel_library" edge to the SentinelLibrary entity by IDs.
func (sic *SentinelInfoCreate) AddSentinelLibraryIDs(ids ...model.InternalID) *SentinelInfoCreate {
	sic.mutation.AddSentinelLibraryIDs(ids...)
	return sic
}

// AddSentinelLibrary adds the "sentinel_library" edges to the SentinelLibrary entity.
func (sic *SentinelInfoCreate) AddSentinelLibrary(s ...*SentinelLibrary) *SentinelInfoCreate {
	ids := make([]model.InternalID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sic.AddSentinelLibraryIDs(ids...)
}

// Mutation returns the SentinelInfoMutation object of the builder.
func (sic *SentinelInfoCreate) Mutation() *SentinelInfoMutation {
	return sic.mutation
}

// Save creates the SentinelInfo in the database.
func (sic *SentinelInfoCreate) Save(ctx context.Context) (*SentinelInfo, error) {
	sic.defaults()
	return withHooks(ctx, sic.sqlSave, sic.mutation, sic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sic *SentinelInfoCreate) SaveX(ctx context.Context) *SentinelInfo {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sic *SentinelInfoCreate) Exec(ctx context.Context) error {
	_, err := sic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sic *SentinelInfoCreate) ExecX(ctx context.Context) {
	if err := sic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sic *SentinelInfoCreate) defaults() {
	if _, ok := sic.mutation.UpdatedAt(); !ok {
		v := sentinelinfo.DefaultUpdatedAt()
		sic.mutation.SetUpdatedAt(v)
	}
	if _, ok := sic.mutation.CreatedAt(); !ok {
		v := sentinelinfo.DefaultCreatedAt()
		sic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *SentinelInfoCreate) check() error {
	if _, ok := sic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "SentinelInfo.url"`)}
	}
	if _, ok := sic.mutation.DownloadFileBasePath(); !ok {
		return &ValidationError{Name: "download_file_base_path", err: errors.New(`ent: missing required field "SentinelInfo.download_file_base_path"`)}
	}
	if _, ok := sic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SentinelInfo.updated_at"`)}
	}
	if _, ok := sic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SentinelInfo.created_at"`)}
	}
	return nil
}

func (sic *SentinelInfoCreate) sqlSave(ctx context.Context) (*SentinelInfo, error) {
	if err := sic.check(); err != nil {
		return nil, err
	}
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	sic.mutation.id = &_node.ID
	sic.mutation.done = true
	return _node, nil
}

func (sic *SentinelInfoCreate) createSpec() (*SentinelInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &SentinelInfo{config: sic.config}
		_spec = sqlgraph.NewCreateSpec(sentinelinfo.Table, sqlgraph.NewFieldSpec(sentinelinfo.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = sic.conflict
	if id, ok := sic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sic.mutation.URL(); ok {
		_spec.SetField(sentinelinfo.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sic.mutation.AlternativeUrls(); ok {
		_spec.SetField(sentinelinfo.FieldAlternativeUrls, field.TypeJSON, value)
		_node.AlternativeUrls = value
	}
	if value, ok := sic.mutation.GetTokenPath(); ok {
		_spec.SetField(sentinelinfo.FieldGetTokenPath, field.TypeString, value)
		_node.GetTokenPath = value
	}
	if value, ok := sic.mutation.DownloadFileBasePath(); ok {
		_spec.SetField(sentinelinfo.FieldDownloadFileBasePath, field.TypeString, value)
		_node.DownloadFileBasePath = value
	}
	if value, ok := sic.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sic.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sic.mutation.SentinelLibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sentinelinfo.SentinelLibraryTable,
			Columns: []string{sentinelinfo.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SentinelInfo.Create().
//		SetURL(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelInfoUpsert) {
//			SetURL(v+v).
//		}).
//		Exec(ctx)
func (sic *SentinelInfoCreate) OnConflict(opts ...sql.ConflictOption) *SentinelInfoUpsertOne {
	sic.conflict = opts
	return &SentinelInfoUpsertOne{
		create: sic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SentinelInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sic *SentinelInfoCreate) OnConflictColumns(columns ...string) *SentinelInfoUpsertOne {
	sic.conflict = append(sic.conflict, sql.ConflictColumns(columns...))
	return &SentinelInfoUpsertOne{
		create: sic,
	}
}

type (
	// SentinelInfoUpsertOne is the builder for "upsert"-ing
	//  one SentinelInfo node.
	SentinelInfoUpsertOne struct {
		create *SentinelInfoCreate
	}

	// SentinelInfoUpsert is the "OnConflict" setter.
	SentinelInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetURL sets the "url" field.
func (u *SentinelInfoUpsert) SetURL(v string) *SentinelInfoUpsert {
	u.Set(sentinelinfo.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SentinelInfoUpsert) UpdateURL() *SentinelInfoUpsert {
	u.SetExcluded(sentinelinfo.FieldURL)
	return u
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (u *SentinelInfoUpsert) SetAlternativeUrls(v []string) *SentinelInfoUpsert {
	u.Set(sentinelinfo.FieldAlternativeUrls, v)
	return u
}

// UpdateAlternativeUrls sets the "alternative_urls" field to the value that was provided on create.
func (u *SentinelInfoUpsert) UpdateAlternativeUrls() *SentinelInfoUpsert {
	u.SetExcluded(sentinelinfo.FieldAlternativeUrls)
	return u
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (u *SentinelInfoUpsert) ClearAlternativeUrls() *SentinelInfoUpsert {
	u.SetNull(sentinelinfo.FieldAlternativeUrls)
	return u
}

// SetGetTokenPath sets the "get_token_path" field.
func (u *SentinelInfoUpsert) SetGetTokenPath(v string) *SentinelInfoUpsert {
	u.Set(sentinelinfo.FieldGetTokenPath, v)
	return u
}

// UpdateGetTokenPath sets the "get_token_path" field to the value that was provided on create.
func (u *SentinelInfoUpsert) UpdateGetTokenPath() *SentinelInfoUpsert {
	u.SetExcluded(sentinelinfo.FieldGetTokenPath)
	return u
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (u *SentinelInfoUpsert) ClearGetTokenPath() *SentinelInfoUpsert {
	u.SetNull(sentinelinfo.FieldGetTokenPath)
	return u
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (u *SentinelInfoUpsert) SetDownloadFileBasePath(v string) *SentinelInfoUpsert {
	u.Set(sentinelinfo.FieldDownloadFileBasePath, v)
	return u
}

// UpdateDownloadFileBasePath sets the "download_file_base_path" field to the value that was provided on create.
func (u *SentinelInfoUpsert) UpdateDownloadFileBasePath() *SentinelInfoUpsert {
	u.SetExcluded(sentinelinfo.FieldDownloadFileBasePath)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelInfoUpsert) SetUpdatedAt(v time.Time) *SentinelInfoUpsert {
	u.Set(sentinelinfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelInfoUpsert) UpdateUpdatedAt() *SentinelInfoUpsert {
	u.SetExcluded(sentinelinfo.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelInfoUpsert) SetCreatedAt(v time.Time) *SentinelInfoUpsert {
	u.Set(sentinelinfo.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelInfoUpsert) UpdateCreatedAt() *SentinelInfoUpsert {
	u.SetExcluded(sentinelinfo.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SentinelInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sentinelinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SentinelInfoUpsertOne) UpdateNewValues() *SentinelInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sentinelinfo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SentinelInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SentinelInfoUpsertOne) Ignore() *SentinelInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelInfoUpsertOne) DoNothing() *SentinelInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelInfoCreate.OnConflict
// documentation for more info.
func (u *SentinelInfoUpsertOne) Update(set func(*SentinelInfoUpsert)) *SentinelInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetURL sets the "url" field.
func (u *SentinelInfoUpsertOne) SetURL(v string) *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SentinelInfoUpsertOne) UpdateURL() *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateURL()
	})
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (u *SentinelInfoUpsertOne) SetAlternativeUrls(v []string) *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetAlternativeUrls(v)
	})
}

// UpdateAlternativeUrls sets the "alternative_urls" field to the value that was provided on create.
func (u *SentinelInfoUpsertOne) UpdateAlternativeUrls() *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateAlternativeUrls()
	})
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (u *SentinelInfoUpsertOne) ClearAlternativeUrls() *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.ClearAlternativeUrls()
	})
}

// SetGetTokenPath sets the "get_token_path" field.
func (u *SentinelInfoUpsertOne) SetGetTokenPath(v string) *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetGetTokenPath(v)
	})
}

// UpdateGetTokenPath sets the "get_token_path" field to the value that was provided on create.
func (u *SentinelInfoUpsertOne) UpdateGetTokenPath() *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateGetTokenPath()
	})
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (u *SentinelInfoUpsertOne) ClearGetTokenPath() *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.ClearGetTokenPath()
	})
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (u *SentinelInfoUpsertOne) SetDownloadFileBasePath(v string) *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetDownloadFileBasePath(v)
	})
}

// UpdateDownloadFileBasePath sets the "download_file_base_path" field to the value that was provided on create.
func (u *SentinelInfoUpsertOne) UpdateDownloadFileBasePath() *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateDownloadFileBasePath()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelInfoUpsertOne) SetUpdatedAt(v time.Time) *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelInfoUpsertOne) UpdateUpdatedAt() *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelInfoUpsertOne) SetCreatedAt(v time.Time) *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelInfoUpsertOne) UpdateCreatedAt() *SentinelInfoUpsertOne {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SentinelInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SentinelInfoUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SentinelInfoUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SentinelInfoCreateBulk is the builder for creating many SentinelInfo entities in bulk.
type SentinelInfoCreateBulk struct {
	config
	err      error
	builders []*SentinelInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the SentinelInfo entities in the database.
func (sicb *SentinelInfoCreateBulk) Save(ctx context.Context) ([]*SentinelInfo, error) {
	if sicb.err != nil {
		return nil, sicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*SentinelInfo, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SentinelInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *SentinelInfoCreateBulk) SaveX(ctx context.Context) []*SentinelInfo {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sicb *SentinelInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := sicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sicb *SentinelInfoCreateBulk) ExecX(ctx context.Context) {
	if err := sicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SentinelInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SentinelInfoUpsert) {
//			SetURL(v+v).
//		}).
//		Exec(ctx)
func (sicb *SentinelInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *SentinelInfoUpsertBulk {
	sicb.conflict = opts
	return &SentinelInfoUpsertBulk{
		create: sicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SentinelInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sicb *SentinelInfoCreateBulk) OnConflictColumns(columns ...string) *SentinelInfoUpsertBulk {
	sicb.conflict = append(sicb.conflict, sql.ConflictColumns(columns...))
	return &SentinelInfoUpsertBulk{
		create: sicb,
	}
}

// SentinelInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of SentinelInfo nodes.
type SentinelInfoUpsertBulk struct {
	create *SentinelInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SentinelInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sentinelinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SentinelInfoUpsertBulk) UpdateNewValues() *SentinelInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sentinelinfo.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SentinelInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SentinelInfoUpsertBulk) Ignore() *SentinelInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SentinelInfoUpsertBulk) DoNothing() *SentinelInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SentinelInfoCreateBulk.OnConflict
// documentation for more info.
func (u *SentinelInfoUpsertBulk) Update(set func(*SentinelInfoUpsert)) *SentinelInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SentinelInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetURL sets the "url" field.
func (u *SentinelInfoUpsertBulk) SetURL(v string) *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SentinelInfoUpsertBulk) UpdateURL() *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateURL()
	})
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (u *SentinelInfoUpsertBulk) SetAlternativeUrls(v []string) *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetAlternativeUrls(v)
	})
}

// UpdateAlternativeUrls sets the "alternative_urls" field to the value that was provided on create.
func (u *SentinelInfoUpsertBulk) UpdateAlternativeUrls() *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateAlternativeUrls()
	})
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (u *SentinelInfoUpsertBulk) ClearAlternativeUrls() *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.ClearAlternativeUrls()
	})
}

// SetGetTokenPath sets the "get_token_path" field.
func (u *SentinelInfoUpsertBulk) SetGetTokenPath(v string) *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetGetTokenPath(v)
	})
}

// UpdateGetTokenPath sets the "get_token_path" field to the value that was provided on create.
func (u *SentinelInfoUpsertBulk) UpdateGetTokenPath() *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateGetTokenPath()
	})
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (u *SentinelInfoUpsertBulk) ClearGetTokenPath() *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.ClearGetTokenPath()
	})
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (u *SentinelInfoUpsertBulk) SetDownloadFileBasePath(v string) *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetDownloadFileBasePath(v)
	})
}

// UpdateDownloadFileBasePath sets the "download_file_base_path" field to the value that was provided on create.
func (u *SentinelInfoUpsertBulk) UpdateDownloadFileBasePath() *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateDownloadFileBasePath()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SentinelInfoUpsertBulk) SetUpdatedAt(v time.Time) *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SentinelInfoUpsertBulk) UpdateUpdatedAt() *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SentinelInfoUpsertBulk) SetCreatedAt(v time.Time) *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SentinelInfoUpsertBulk) UpdateCreatedAt() *SentinelInfoUpsertBulk {
	return u.Update(func(s *SentinelInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SentinelInfoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SentinelInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SentinelInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SentinelInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
