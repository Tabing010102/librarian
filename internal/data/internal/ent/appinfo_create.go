// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/appinfo"
	"github.com/tuihub/librarian/internal/model"
)

// AppInfoCreate is the builder for creating a AppInfo entity.
type AppInfoCreate struct {
	config
	mutation *AppInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSource sets the "source" field.
func (aic *AppInfoCreate) SetSource(s string) *AppInfoCreate {
	aic.mutation.SetSource(s)
	return aic
}

// SetSourceAppID sets the "source_app_id" field.
func (aic *AppInfoCreate) SetSourceAppID(s string) *AppInfoCreate {
	aic.mutation.SetSourceAppID(s)
	return aic
}

// SetSourceURL sets the "source_url" field.
func (aic *AppInfoCreate) SetSourceURL(s string) *AppInfoCreate {
	aic.mutation.SetSourceURL(s)
	return aic
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableSourceURL(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetSourceURL(*s)
	}
	return aic
}

// SetName sets the "name" field.
func (aic *AppInfoCreate) SetName(s string) *AppInfoCreate {
	aic.mutation.SetName(s)
	return aic
}

// SetType sets the "type" field.
func (aic *AppInfoCreate) SetType(a appinfo.Type) *AppInfoCreate {
	aic.mutation.SetType(a)
	return aic
}

// SetShortDescription sets the "short_description" field.
func (aic *AppInfoCreate) SetShortDescription(s string) *AppInfoCreate {
	aic.mutation.SetShortDescription(s)
	return aic
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableShortDescription(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetShortDescription(*s)
	}
	return aic
}

// SetDescription sets the "description" field.
func (aic *AppInfoCreate) SetDescription(s string) *AppInfoCreate {
	aic.mutation.SetDescription(s)
	return aic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableDescription(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetDescription(*s)
	}
	return aic
}

// SetIconImageURL sets the "icon_image_url" field.
func (aic *AppInfoCreate) SetIconImageURL(s string) *AppInfoCreate {
	aic.mutation.SetIconImageURL(s)
	return aic
}

// SetNillableIconImageURL sets the "icon_image_url" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableIconImageURL(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetIconImageURL(*s)
	}
	return aic
}

// SetIconImageID sets the "icon_image_id" field.
func (aic *AppInfoCreate) SetIconImageID(mi model.InternalID) *AppInfoCreate {
	aic.mutation.SetIconImageID(mi)
	return aic
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (aic *AppInfoCreate) SetBackgroundImageURL(s string) *AppInfoCreate {
	aic.mutation.SetBackgroundImageURL(s)
	return aic
}

// SetNillableBackgroundImageURL sets the "background_image_url" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableBackgroundImageURL(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetBackgroundImageURL(*s)
	}
	return aic
}

// SetBackgroundImageID sets the "background_image_id" field.
func (aic *AppInfoCreate) SetBackgroundImageID(mi model.InternalID) *AppInfoCreate {
	aic.mutation.SetBackgroundImageID(mi)
	return aic
}

// SetCoverImageURL sets the "cover_image_url" field.
func (aic *AppInfoCreate) SetCoverImageURL(s string) *AppInfoCreate {
	aic.mutation.SetCoverImageURL(s)
	return aic
}

// SetNillableCoverImageURL sets the "cover_image_url" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableCoverImageURL(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetCoverImageURL(*s)
	}
	return aic
}

// SetCoverImageID sets the "cover_image_id" field.
func (aic *AppInfoCreate) SetCoverImageID(mi model.InternalID) *AppInfoCreate {
	aic.mutation.SetCoverImageID(mi)
	return aic
}

// SetReleaseDate sets the "release_date" field.
func (aic *AppInfoCreate) SetReleaseDate(s string) *AppInfoCreate {
	aic.mutation.SetReleaseDate(s)
	return aic
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableReleaseDate(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetReleaseDate(*s)
	}
	return aic
}

// SetDeveloper sets the "developer" field.
func (aic *AppInfoCreate) SetDeveloper(s string) *AppInfoCreate {
	aic.mutation.SetDeveloper(s)
	return aic
}

// SetNillableDeveloper sets the "developer" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableDeveloper(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetDeveloper(*s)
	}
	return aic
}

// SetPublisher sets the "publisher" field.
func (aic *AppInfoCreate) SetPublisher(s string) *AppInfoCreate {
	aic.mutation.SetPublisher(s)
	return aic
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillablePublisher(s *string) *AppInfoCreate {
	if s != nil {
		aic.SetPublisher(*s)
	}
	return aic
}

// SetTags sets the "tags" field.
func (aic *AppInfoCreate) SetTags(s []string) *AppInfoCreate {
	aic.mutation.SetTags(s)
	return aic
}

// SetAlternativeNames sets the "alternative_names" field.
func (aic *AppInfoCreate) SetAlternativeNames(s []string) *AppInfoCreate {
	aic.mutation.SetAlternativeNames(s)
	return aic
}

// SetRawData sets the "raw_data" field.
func (aic *AppInfoCreate) SetRawData(s string) *AppInfoCreate {
	aic.mutation.SetRawData(s)
	return aic
}

// SetUpdatedAt sets the "updated_at" field.
func (aic *AppInfoCreate) SetUpdatedAt(t time.Time) *AppInfoCreate {
	aic.mutation.SetUpdatedAt(t)
	return aic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableUpdatedAt(t *time.Time) *AppInfoCreate {
	if t != nil {
		aic.SetUpdatedAt(*t)
	}
	return aic
}

// SetCreatedAt sets the "created_at" field.
func (aic *AppInfoCreate) SetCreatedAt(t time.Time) *AppInfoCreate {
	aic.mutation.SetCreatedAt(t)
	return aic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aic *AppInfoCreate) SetNillableCreatedAt(t *time.Time) *AppInfoCreate {
	if t != nil {
		aic.SetCreatedAt(*t)
	}
	return aic
}

// SetID sets the "id" field.
func (aic *AppInfoCreate) SetID(mi model.InternalID) *AppInfoCreate {
	aic.mutation.SetID(mi)
	return aic
}

// Mutation returns the AppInfoMutation object of the builder.
func (aic *AppInfoCreate) Mutation() *AppInfoMutation {
	return aic.mutation
}

// Save creates the AppInfo in the database.
func (aic *AppInfoCreate) Save(ctx context.Context) (*AppInfo, error) {
	aic.defaults()
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AppInfoCreate) SaveX(ctx context.Context) *AppInfo {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AppInfoCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AppInfoCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aic *AppInfoCreate) defaults() {
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		v := appinfo.DefaultUpdatedAt()
		aic.mutation.SetUpdatedAt(v)
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		v := appinfo.DefaultCreatedAt()
		aic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *AppInfoCreate) check() error {
	if _, ok := aic.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "AppInfo.source"`)}
	}
	if _, ok := aic.mutation.SourceAppID(); !ok {
		return &ValidationError{Name: "source_app_id", err: errors.New(`ent: missing required field "AppInfo.source_app_id"`)}
	}
	if _, ok := aic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AppInfo.name"`)}
	}
	if _, ok := aic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "AppInfo.type"`)}
	}
	if v, ok := aic.mutation.GetType(); ok {
		if err := appinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AppInfo.type": %w`, err)}
		}
	}
	if _, ok := aic.mutation.IconImageID(); !ok {
		return &ValidationError{Name: "icon_image_id", err: errors.New(`ent: missing required field "AppInfo.icon_image_id"`)}
	}
	if _, ok := aic.mutation.BackgroundImageID(); !ok {
		return &ValidationError{Name: "background_image_id", err: errors.New(`ent: missing required field "AppInfo.background_image_id"`)}
	}
	if _, ok := aic.mutation.CoverImageID(); !ok {
		return &ValidationError{Name: "cover_image_id", err: errors.New(`ent: missing required field "AppInfo.cover_image_id"`)}
	}
	if _, ok := aic.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "AppInfo.tags"`)}
	}
	if _, ok := aic.mutation.AlternativeNames(); !ok {
		return &ValidationError{Name: "alternative_names", err: errors.New(`ent: missing required field "AppInfo.alternative_names"`)}
	}
	if _, ok := aic.mutation.RawData(); !ok {
		return &ValidationError{Name: "raw_data", err: errors.New(`ent: missing required field "AppInfo.raw_data"`)}
	}
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppInfo.updated_at"`)}
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppInfo.created_at"`)}
	}
	return nil
}

func (aic *AppInfoCreate) sqlSave(ctx context.Context) (*AppInfo, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *AppInfoCreate) createSpec() (*AppInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &AppInfo{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(appinfo.Table, sqlgraph.NewFieldSpec(appinfo.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = aic.conflict
	if id, ok := aic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aic.mutation.Source(); ok {
		_spec.SetField(appinfo.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := aic.mutation.SourceAppID(); ok {
		_spec.SetField(appinfo.FieldSourceAppID, field.TypeString, value)
		_node.SourceAppID = value
	}
	if value, ok := aic.mutation.SourceURL(); ok {
		_spec.SetField(appinfo.FieldSourceURL, field.TypeString, value)
		_node.SourceURL = value
	}
	if value, ok := aic.mutation.Name(); ok {
		_spec.SetField(appinfo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := aic.mutation.GetType(); ok {
		_spec.SetField(appinfo.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := aic.mutation.ShortDescription(); ok {
		_spec.SetField(appinfo.FieldShortDescription, field.TypeString, value)
		_node.ShortDescription = value
	}
	if value, ok := aic.mutation.Description(); ok {
		_spec.SetField(appinfo.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := aic.mutation.IconImageURL(); ok {
		_spec.SetField(appinfo.FieldIconImageURL, field.TypeString, value)
		_node.IconImageURL = value
	}
	if value, ok := aic.mutation.IconImageID(); ok {
		_spec.SetField(appinfo.FieldIconImageID, field.TypeInt64, value)
		_node.IconImageID = value
	}
	if value, ok := aic.mutation.BackgroundImageURL(); ok {
		_spec.SetField(appinfo.FieldBackgroundImageURL, field.TypeString, value)
		_node.BackgroundImageURL = value
	}
	if value, ok := aic.mutation.BackgroundImageID(); ok {
		_spec.SetField(appinfo.FieldBackgroundImageID, field.TypeInt64, value)
		_node.BackgroundImageID = value
	}
	if value, ok := aic.mutation.CoverImageURL(); ok {
		_spec.SetField(appinfo.FieldCoverImageURL, field.TypeString, value)
		_node.CoverImageURL = value
	}
	if value, ok := aic.mutation.CoverImageID(); ok {
		_spec.SetField(appinfo.FieldCoverImageID, field.TypeInt64, value)
		_node.CoverImageID = value
	}
	if value, ok := aic.mutation.ReleaseDate(); ok {
		_spec.SetField(appinfo.FieldReleaseDate, field.TypeString, value)
		_node.ReleaseDate = value
	}
	if value, ok := aic.mutation.Developer(); ok {
		_spec.SetField(appinfo.FieldDeveloper, field.TypeString, value)
		_node.Developer = value
	}
	if value, ok := aic.mutation.Publisher(); ok {
		_spec.SetField(appinfo.FieldPublisher, field.TypeString, value)
		_node.Publisher = value
	}
	if value, ok := aic.mutation.Tags(); ok {
		_spec.SetField(appinfo.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := aic.mutation.AlternativeNames(); ok {
		_spec.SetField(appinfo.FieldAlternativeNames, field.TypeJSON, value)
		_node.AlternativeNames = value
	}
	if value, ok := aic.mutation.RawData(); ok {
		_spec.SetField(appinfo.FieldRawData, field.TypeString, value)
		_node.RawData = value
	}
	if value, ok := aic.mutation.UpdatedAt(); ok {
		_spec.SetField(appinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aic.mutation.CreatedAt(); ok {
		_spec.SetField(appinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppInfo.Create().
//		SetSource(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppInfoUpsert) {
//			SetSource(v+v).
//		}).
//		Exec(ctx)
func (aic *AppInfoCreate) OnConflict(opts ...sql.ConflictOption) *AppInfoUpsertOne {
	aic.conflict = opts
	return &AppInfoUpsertOne{
		create: aic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aic *AppInfoCreate) OnConflictColumns(columns ...string) *AppInfoUpsertOne {
	aic.conflict = append(aic.conflict, sql.ConflictColumns(columns...))
	return &AppInfoUpsertOne{
		create: aic,
	}
}

type (
	// AppInfoUpsertOne is the builder for "upsert"-ing
	//  one AppInfo node.
	AppInfoUpsertOne struct {
		create *AppInfoCreate
	}

	// AppInfoUpsert is the "OnConflict" setter.
	AppInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetSource sets the "source" field.
func (u *AppInfoUpsert) SetSource(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateSource() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldSource)
	return u
}

// SetSourceAppID sets the "source_app_id" field.
func (u *AppInfoUpsert) SetSourceAppID(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldSourceAppID, v)
	return u
}

// UpdateSourceAppID sets the "source_app_id" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateSourceAppID() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldSourceAppID)
	return u
}

// SetSourceURL sets the "source_url" field.
func (u *AppInfoUpsert) SetSourceURL(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldSourceURL, v)
	return u
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateSourceURL() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldSourceURL)
	return u
}

// ClearSourceURL clears the value of the "source_url" field.
func (u *AppInfoUpsert) ClearSourceURL() *AppInfoUpsert {
	u.SetNull(appinfo.FieldSourceURL)
	return u
}

// SetName sets the "name" field.
func (u *AppInfoUpsert) SetName(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateName() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *AppInfoUpsert) SetType(v appinfo.Type) *AppInfoUpsert {
	u.Set(appinfo.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateType() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldType)
	return u
}

// SetShortDescription sets the "short_description" field.
func (u *AppInfoUpsert) SetShortDescription(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldShortDescription, v)
	return u
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateShortDescription() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldShortDescription)
	return u
}

// ClearShortDescription clears the value of the "short_description" field.
func (u *AppInfoUpsert) ClearShortDescription() *AppInfoUpsert {
	u.SetNull(appinfo.FieldShortDescription)
	return u
}

// SetDescription sets the "description" field.
func (u *AppInfoUpsert) SetDescription(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateDescription() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AppInfoUpsert) ClearDescription() *AppInfoUpsert {
	u.SetNull(appinfo.FieldDescription)
	return u
}

// SetIconImageURL sets the "icon_image_url" field.
func (u *AppInfoUpsert) SetIconImageURL(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldIconImageURL, v)
	return u
}

// UpdateIconImageURL sets the "icon_image_url" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateIconImageURL() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldIconImageURL)
	return u
}

// ClearIconImageURL clears the value of the "icon_image_url" field.
func (u *AppInfoUpsert) ClearIconImageURL() *AppInfoUpsert {
	u.SetNull(appinfo.FieldIconImageURL)
	return u
}

// SetIconImageID sets the "icon_image_id" field.
func (u *AppInfoUpsert) SetIconImageID(v model.InternalID) *AppInfoUpsert {
	u.Set(appinfo.FieldIconImageID, v)
	return u
}

// UpdateIconImageID sets the "icon_image_id" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateIconImageID() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldIconImageID)
	return u
}

// AddIconImageID adds v to the "icon_image_id" field.
func (u *AppInfoUpsert) AddIconImageID(v model.InternalID) *AppInfoUpsert {
	u.Add(appinfo.FieldIconImageID, v)
	return u
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (u *AppInfoUpsert) SetBackgroundImageURL(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldBackgroundImageURL, v)
	return u
}

// UpdateBackgroundImageURL sets the "background_image_url" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateBackgroundImageURL() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldBackgroundImageURL)
	return u
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (u *AppInfoUpsert) ClearBackgroundImageURL() *AppInfoUpsert {
	u.SetNull(appinfo.FieldBackgroundImageURL)
	return u
}

// SetBackgroundImageID sets the "background_image_id" field.
func (u *AppInfoUpsert) SetBackgroundImageID(v model.InternalID) *AppInfoUpsert {
	u.Set(appinfo.FieldBackgroundImageID, v)
	return u
}

// UpdateBackgroundImageID sets the "background_image_id" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateBackgroundImageID() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldBackgroundImageID)
	return u
}

// AddBackgroundImageID adds v to the "background_image_id" field.
func (u *AppInfoUpsert) AddBackgroundImageID(v model.InternalID) *AppInfoUpsert {
	u.Add(appinfo.FieldBackgroundImageID, v)
	return u
}

// SetCoverImageURL sets the "cover_image_url" field.
func (u *AppInfoUpsert) SetCoverImageURL(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldCoverImageURL, v)
	return u
}

// UpdateCoverImageURL sets the "cover_image_url" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateCoverImageURL() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldCoverImageURL)
	return u
}

// ClearCoverImageURL clears the value of the "cover_image_url" field.
func (u *AppInfoUpsert) ClearCoverImageURL() *AppInfoUpsert {
	u.SetNull(appinfo.FieldCoverImageURL)
	return u
}

// SetCoverImageID sets the "cover_image_id" field.
func (u *AppInfoUpsert) SetCoverImageID(v model.InternalID) *AppInfoUpsert {
	u.Set(appinfo.FieldCoverImageID, v)
	return u
}

// UpdateCoverImageID sets the "cover_image_id" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateCoverImageID() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldCoverImageID)
	return u
}

// AddCoverImageID adds v to the "cover_image_id" field.
func (u *AppInfoUpsert) AddCoverImageID(v model.InternalID) *AppInfoUpsert {
	u.Add(appinfo.FieldCoverImageID, v)
	return u
}

// SetReleaseDate sets the "release_date" field.
func (u *AppInfoUpsert) SetReleaseDate(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldReleaseDate, v)
	return u
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateReleaseDate() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldReleaseDate)
	return u
}

// ClearReleaseDate clears the value of the "release_date" field.
func (u *AppInfoUpsert) ClearReleaseDate() *AppInfoUpsert {
	u.SetNull(appinfo.FieldReleaseDate)
	return u
}

// SetDeveloper sets the "developer" field.
func (u *AppInfoUpsert) SetDeveloper(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldDeveloper, v)
	return u
}

// UpdateDeveloper sets the "developer" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateDeveloper() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldDeveloper)
	return u
}

// ClearDeveloper clears the value of the "developer" field.
func (u *AppInfoUpsert) ClearDeveloper() *AppInfoUpsert {
	u.SetNull(appinfo.FieldDeveloper)
	return u
}

// SetPublisher sets the "publisher" field.
func (u *AppInfoUpsert) SetPublisher(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldPublisher, v)
	return u
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdatePublisher() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldPublisher)
	return u
}

// ClearPublisher clears the value of the "publisher" field.
func (u *AppInfoUpsert) ClearPublisher() *AppInfoUpsert {
	u.SetNull(appinfo.FieldPublisher)
	return u
}

// SetTags sets the "tags" field.
func (u *AppInfoUpsert) SetTags(v []string) *AppInfoUpsert {
	u.Set(appinfo.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateTags() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldTags)
	return u
}

// SetAlternativeNames sets the "alternative_names" field.
func (u *AppInfoUpsert) SetAlternativeNames(v []string) *AppInfoUpsert {
	u.Set(appinfo.FieldAlternativeNames, v)
	return u
}

// UpdateAlternativeNames sets the "alternative_names" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateAlternativeNames() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldAlternativeNames)
	return u
}

// SetRawData sets the "raw_data" field.
func (u *AppInfoUpsert) SetRawData(v string) *AppInfoUpsert {
	u.Set(appinfo.FieldRawData, v)
	return u
}

// UpdateRawData sets the "raw_data" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateRawData() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldRawData)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppInfoUpsert) SetUpdatedAt(v time.Time) *AppInfoUpsert {
	u.Set(appinfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateUpdatedAt() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppInfoUpsert) SetCreatedAt(v time.Time) *AppInfoUpsert {
	u.Set(appinfo.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppInfoUpsert) UpdateCreatedAt() *AppInfoUpsert {
	u.SetExcluded(appinfo.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppInfoUpsertOne) UpdateNewValues() *AppInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appinfo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppInfoUpsertOne) Ignore() *AppInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppInfoUpsertOne) DoNothing() *AppInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppInfoCreate.OnConflict
// documentation for more info.
func (u *AppInfoUpsertOne) Update(set func(*AppInfoUpsert)) *AppInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetSource sets the "source" field.
func (u *AppInfoUpsertOne) SetSource(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateSource() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateSource()
	})
}

// SetSourceAppID sets the "source_app_id" field.
func (u *AppInfoUpsertOne) SetSourceAppID(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetSourceAppID(v)
	})
}

// UpdateSourceAppID sets the "source_app_id" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateSourceAppID() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateSourceAppID()
	})
}

// SetSourceURL sets the "source_url" field.
func (u *AppInfoUpsertOne) SetSourceURL(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetSourceURL(v)
	})
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateSourceURL() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateSourceURL()
	})
}

// ClearSourceURL clears the value of the "source_url" field.
func (u *AppInfoUpsertOne) ClearSourceURL() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearSourceURL()
	})
}

// SetName sets the "name" field.
func (u *AppInfoUpsertOne) SetName(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateName() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *AppInfoUpsertOne) SetType(v appinfo.Type) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateType() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateType()
	})
}

// SetShortDescription sets the "short_description" field.
func (u *AppInfoUpsertOne) SetShortDescription(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetShortDescription(v)
	})
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateShortDescription() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateShortDescription()
	})
}

// ClearShortDescription clears the value of the "short_description" field.
func (u *AppInfoUpsertOne) ClearShortDescription() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearShortDescription()
	})
}

// SetDescription sets the "description" field.
func (u *AppInfoUpsertOne) SetDescription(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateDescription() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AppInfoUpsertOne) ClearDescription() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearDescription()
	})
}

// SetIconImageURL sets the "icon_image_url" field.
func (u *AppInfoUpsertOne) SetIconImageURL(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetIconImageURL(v)
	})
}

// UpdateIconImageURL sets the "icon_image_url" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateIconImageURL() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateIconImageURL()
	})
}

// ClearIconImageURL clears the value of the "icon_image_url" field.
func (u *AppInfoUpsertOne) ClearIconImageURL() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearIconImageURL()
	})
}

// SetIconImageID sets the "icon_image_id" field.
func (u *AppInfoUpsertOne) SetIconImageID(v model.InternalID) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetIconImageID(v)
	})
}

// AddIconImageID adds v to the "icon_image_id" field.
func (u *AppInfoUpsertOne) AddIconImageID(v model.InternalID) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.AddIconImageID(v)
	})
}

// UpdateIconImageID sets the "icon_image_id" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateIconImageID() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateIconImageID()
	})
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (u *AppInfoUpsertOne) SetBackgroundImageURL(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetBackgroundImageURL(v)
	})
}

// UpdateBackgroundImageURL sets the "background_image_url" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateBackgroundImageURL() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateBackgroundImageURL()
	})
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (u *AppInfoUpsertOne) ClearBackgroundImageURL() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearBackgroundImageURL()
	})
}

// SetBackgroundImageID sets the "background_image_id" field.
func (u *AppInfoUpsertOne) SetBackgroundImageID(v model.InternalID) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetBackgroundImageID(v)
	})
}

// AddBackgroundImageID adds v to the "background_image_id" field.
func (u *AppInfoUpsertOne) AddBackgroundImageID(v model.InternalID) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.AddBackgroundImageID(v)
	})
}

// UpdateBackgroundImageID sets the "background_image_id" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateBackgroundImageID() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateBackgroundImageID()
	})
}

// SetCoverImageURL sets the "cover_image_url" field.
func (u *AppInfoUpsertOne) SetCoverImageURL(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetCoverImageURL(v)
	})
}

// UpdateCoverImageURL sets the "cover_image_url" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateCoverImageURL() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateCoverImageURL()
	})
}

// ClearCoverImageURL clears the value of the "cover_image_url" field.
func (u *AppInfoUpsertOne) ClearCoverImageURL() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearCoverImageURL()
	})
}

// SetCoverImageID sets the "cover_image_id" field.
func (u *AppInfoUpsertOne) SetCoverImageID(v model.InternalID) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetCoverImageID(v)
	})
}

// AddCoverImageID adds v to the "cover_image_id" field.
func (u *AppInfoUpsertOne) AddCoverImageID(v model.InternalID) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.AddCoverImageID(v)
	})
}

// UpdateCoverImageID sets the "cover_image_id" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateCoverImageID() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateCoverImageID()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *AppInfoUpsertOne) SetReleaseDate(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateReleaseDate() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateReleaseDate()
	})
}

// ClearReleaseDate clears the value of the "release_date" field.
func (u *AppInfoUpsertOne) ClearReleaseDate() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearReleaseDate()
	})
}

// SetDeveloper sets the "developer" field.
func (u *AppInfoUpsertOne) SetDeveloper(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetDeveloper(v)
	})
}

// UpdateDeveloper sets the "developer" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateDeveloper() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateDeveloper()
	})
}

// ClearDeveloper clears the value of the "developer" field.
func (u *AppInfoUpsertOne) ClearDeveloper() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearDeveloper()
	})
}

// SetPublisher sets the "publisher" field.
func (u *AppInfoUpsertOne) SetPublisher(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetPublisher(v)
	})
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdatePublisher() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdatePublisher()
	})
}

// ClearPublisher clears the value of the "publisher" field.
func (u *AppInfoUpsertOne) ClearPublisher() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearPublisher()
	})
}

// SetTags sets the "tags" field.
func (u *AppInfoUpsertOne) SetTags(v []string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateTags() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateTags()
	})
}

// SetAlternativeNames sets the "alternative_names" field.
func (u *AppInfoUpsertOne) SetAlternativeNames(v []string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetAlternativeNames(v)
	})
}

// UpdateAlternativeNames sets the "alternative_names" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateAlternativeNames() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateAlternativeNames()
	})
}

// SetRawData sets the "raw_data" field.
func (u *AppInfoUpsertOne) SetRawData(v string) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetRawData(v)
	})
}

// UpdateRawData sets the "raw_data" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateRawData() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateRawData()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppInfoUpsertOne) SetUpdatedAt(v time.Time) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateUpdatedAt() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppInfoUpsertOne) SetCreatedAt(v time.Time) *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppInfoUpsertOne) UpdateCreatedAt() *AppInfoUpsertOne {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppInfoUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppInfoUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppInfoCreateBulk is the builder for creating many AppInfo entities in bulk.
type AppInfoCreateBulk struct {
	config
	err      error
	builders []*AppInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the AppInfo entities in the database.
func (aicb *AppInfoCreateBulk) Save(ctx context.Context) ([]*AppInfo, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AppInfo, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AppInfoCreateBulk) SaveX(ctx context.Context) []*AppInfo {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AppInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AppInfoCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppInfoUpsert) {
//			SetSource(v+v).
//		}).
//		Exec(ctx)
func (aicb *AppInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppInfoUpsertBulk {
	aicb.conflict = opts
	return &AppInfoUpsertBulk{
		create: aicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aicb *AppInfoCreateBulk) OnConflictColumns(columns ...string) *AppInfoUpsertBulk {
	aicb.conflict = append(aicb.conflict, sql.ConflictColumns(columns...))
	return &AppInfoUpsertBulk{
		create: aicb,
	}
}

// AppInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of AppInfo nodes.
type AppInfoUpsertBulk struct {
	create *AppInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppInfoUpsertBulk) UpdateNewValues() *AppInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appinfo.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppInfoUpsertBulk) Ignore() *AppInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppInfoUpsertBulk) DoNothing() *AppInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppInfoCreateBulk.OnConflict
// documentation for more info.
func (u *AppInfoUpsertBulk) Update(set func(*AppInfoUpsert)) *AppInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetSource sets the "source" field.
func (u *AppInfoUpsertBulk) SetSource(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateSource() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateSource()
	})
}

// SetSourceAppID sets the "source_app_id" field.
func (u *AppInfoUpsertBulk) SetSourceAppID(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetSourceAppID(v)
	})
}

// UpdateSourceAppID sets the "source_app_id" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateSourceAppID() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateSourceAppID()
	})
}

// SetSourceURL sets the "source_url" field.
func (u *AppInfoUpsertBulk) SetSourceURL(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetSourceURL(v)
	})
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateSourceURL() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateSourceURL()
	})
}

// ClearSourceURL clears the value of the "source_url" field.
func (u *AppInfoUpsertBulk) ClearSourceURL() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearSourceURL()
	})
}

// SetName sets the "name" field.
func (u *AppInfoUpsertBulk) SetName(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateName() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *AppInfoUpsertBulk) SetType(v appinfo.Type) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateType() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateType()
	})
}

// SetShortDescription sets the "short_description" field.
func (u *AppInfoUpsertBulk) SetShortDescription(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetShortDescription(v)
	})
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateShortDescription() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateShortDescription()
	})
}

// ClearShortDescription clears the value of the "short_description" field.
func (u *AppInfoUpsertBulk) ClearShortDescription() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearShortDescription()
	})
}

// SetDescription sets the "description" field.
func (u *AppInfoUpsertBulk) SetDescription(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateDescription() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AppInfoUpsertBulk) ClearDescription() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearDescription()
	})
}

// SetIconImageURL sets the "icon_image_url" field.
func (u *AppInfoUpsertBulk) SetIconImageURL(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetIconImageURL(v)
	})
}

// UpdateIconImageURL sets the "icon_image_url" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateIconImageURL() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateIconImageURL()
	})
}

// ClearIconImageURL clears the value of the "icon_image_url" field.
func (u *AppInfoUpsertBulk) ClearIconImageURL() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearIconImageURL()
	})
}

// SetIconImageID sets the "icon_image_id" field.
func (u *AppInfoUpsertBulk) SetIconImageID(v model.InternalID) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetIconImageID(v)
	})
}

// AddIconImageID adds v to the "icon_image_id" field.
func (u *AppInfoUpsertBulk) AddIconImageID(v model.InternalID) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.AddIconImageID(v)
	})
}

// UpdateIconImageID sets the "icon_image_id" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateIconImageID() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateIconImageID()
	})
}

// SetBackgroundImageURL sets the "background_image_url" field.
func (u *AppInfoUpsertBulk) SetBackgroundImageURL(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetBackgroundImageURL(v)
	})
}

// UpdateBackgroundImageURL sets the "background_image_url" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateBackgroundImageURL() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateBackgroundImageURL()
	})
}

// ClearBackgroundImageURL clears the value of the "background_image_url" field.
func (u *AppInfoUpsertBulk) ClearBackgroundImageURL() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearBackgroundImageURL()
	})
}

// SetBackgroundImageID sets the "background_image_id" field.
func (u *AppInfoUpsertBulk) SetBackgroundImageID(v model.InternalID) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetBackgroundImageID(v)
	})
}

// AddBackgroundImageID adds v to the "background_image_id" field.
func (u *AppInfoUpsertBulk) AddBackgroundImageID(v model.InternalID) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.AddBackgroundImageID(v)
	})
}

// UpdateBackgroundImageID sets the "background_image_id" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateBackgroundImageID() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateBackgroundImageID()
	})
}

// SetCoverImageURL sets the "cover_image_url" field.
func (u *AppInfoUpsertBulk) SetCoverImageURL(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetCoverImageURL(v)
	})
}

// UpdateCoverImageURL sets the "cover_image_url" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateCoverImageURL() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateCoverImageURL()
	})
}

// ClearCoverImageURL clears the value of the "cover_image_url" field.
func (u *AppInfoUpsertBulk) ClearCoverImageURL() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearCoverImageURL()
	})
}

// SetCoverImageID sets the "cover_image_id" field.
func (u *AppInfoUpsertBulk) SetCoverImageID(v model.InternalID) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetCoverImageID(v)
	})
}

// AddCoverImageID adds v to the "cover_image_id" field.
func (u *AppInfoUpsertBulk) AddCoverImageID(v model.InternalID) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.AddCoverImageID(v)
	})
}

// UpdateCoverImageID sets the "cover_image_id" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateCoverImageID() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateCoverImageID()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *AppInfoUpsertBulk) SetReleaseDate(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateReleaseDate() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateReleaseDate()
	})
}

// ClearReleaseDate clears the value of the "release_date" field.
func (u *AppInfoUpsertBulk) ClearReleaseDate() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearReleaseDate()
	})
}

// SetDeveloper sets the "developer" field.
func (u *AppInfoUpsertBulk) SetDeveloper(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetDeveloper(v)
	})
}

// UpdateDeveloper sets the "developer" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateDeveloper() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateDeveloper()
	})
}

// ClearDeveloper clears the value of the "developer" field.
func (u *AppInfoUpsertBulk) ClearDeveloper() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearDeveloper()
	})
}

// SetPublisher sets the "publisher" field.
func (u *AppInfoUpsertBulk) SetPublisher(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetPublisher(v)
	})
}

// UpdatePublisher sets the "publisher" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdatePublisher() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdatePublisher()
	})
}

// ClearPublisher clears the value of the "publisher" field.
func (u *AppInfoUpsertBulk) ClearPublisher() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.ClearPublisher()
	})
}

// SetTags sets the "tags" field.
func (u *AppInfoUpsertBulk) SetTags(v []string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateTags() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateTags()
	})
}

// SetAlternativeNames sets the "alternative_names" field.
func (u *AppInfoUpsertBulk) SetAlternativeNames(v []string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetAlternativeNames(v)
	})
}

// UpdateAlternativeNames sets the "alternative_names" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateAlternativeNames() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateAlternativeNames()
	})
}

// SetRawData sets the "raw_data" field.
func (u *AppInfoUpsertBulk) SetRawData(v string) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetRawData(v)
	})
}

// UpdateRawData sets the "raw_data" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateRawData() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateRawData()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppInfoUpsertBulk) SetUpdatedAt(v time.Time) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateUpdatedAt() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppInfoUpsertBulk) SetCreatedAt(v time.Time) *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppInfoUpsertBulk) UpdateCreatedAt() *AppInfoUpsertBulk {
	return u.Update(func(s *AppInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppInfoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
