// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinellibrary"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelLibraryQuery is the builder for querying SentinelLibrary entities.
type SentinelLibraryQuery struct {
	config
	ctx              *QueryContext
	order            []sentinellibrary.OrderOption
	inters           []Interceptor
	predicates       []predicate.SentinelLibrary
	withSentinelInfo *SentinelInfoQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SentinelLibraryQuery builder.
func (slq *SentinelLibraryQuery) Where(ps ...predicate.SentinelLibrary) *SentinelLibraryQuery {
	slq.predicates = append(slq.predicates, ps...)
	return slq
}

// Limit the number of records to be returned by this query.
func (slq *SentinelLibraryQuery) Limit(limit int) *SentinelLibraryQuery {
	slq.ctx.Limit = &limit
	return slq
}

// Offset to start from.
func (slq *SentinelLibraryQuery) Offset(offset int) *SentinelLibraryQuery {
	slq.ctx.Offset = &offset
	return slq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (slq *SentinelLibraryQuery) Unique(unique bool) *SentinelLibraryQuery {
	slq.ctx.Unique = &unique
	return slq
}

// Order specifies how the records should be ordered.
func (slq *SentinelLibraryQuery) Order(o ...sentinellibrary.OrderOption) *SentinelLibraryQuery {
	slq.order = append(slq.order, o...)
	return slq
}

// QuerySentinelInfo chains the current query on the "sentinel_info" edge.
func (slq *SentinelLibraryQuery) QuerySentinelInfo() *SentinelInfoQuery {
	query := (&SentinelInfoClient{config: slq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := slq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := slq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sentinellibrary.Table, sentinellibrary.FieldID, selector),
			sqlgraph.To(sentinelinfo.Table, sentinelinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sentinellibrary.SentinelInfoTable, sentinellibrary.SentinelInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(slq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SentinelLibrary entity from the query.
// Returns a *NotFoundError when no SentinelLibrary was found.
func (slq *SentinelLibraryQuery) First(ctx context.Context) (*SentinelLibrary, error) {
	nodes, err := slq.Limit(1).All(setContextOp(ctx, slq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sentinellibrary.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (slq *SentinelLibraryQuery) FirstX(ctx context.Context) *SentinelLibrary {
	node, err := slq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SentinelLibrary ID from the query.
// Returns a *NotFoundError when no SentinelLibrary ID was found.
func (slq *SentinelLibraryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = slq.Limit(1).IDs(setContextOp(ctx, slq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sentinellibrary.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (slq *SentinelLibraryQuery) FirstIDX(ctx context.Context) int {
	id, err := slq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SentinelLibrary entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SentinelLibrary entity is found.
// Returns a *NotFoundError when no SentinelLibrary entities are found.
func (slq *SentinelLibraryQuery) Only(ctx context.Context) (*SentinelLibrary, error) {
	nodes, err := slq.Limit(2).All(setContextOp(ctx, slq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sentinellibrary.Label}
	default:
		return nil, &NotSingularError{sentinellibrary.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (slq *SentinelLibraryQuery) OnlyX(ctx context.Context) *SentinelLibrary {
	node, err := slq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SentinelLibrary ID in the query.
// Returns a *NotSingularError when more than one SentinelLibrary ID is found.
// Returns a *NotFoundError when no entities are found.
func (slq *SentinelLibraryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = slq.Limit(2).IDs(setContextOp(ctx, slq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sentinellibrary.Label}
	default:
		err = &NotSingularError{sentinellibrary.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (slq *SentinelLibraryQuery) OnlyIDX(ctx context.Context) int {
	id, err := slq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SentinelLibraries.
func (slq *SentinelLibraryQuery) All(ctx context.Context) ([]*SentinelLibrary, error) {
	ctx = setContextOp(ctx, slq.ctx, ent.OpQueryAll)
	if err := slq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SentinelLibrary, *SentinelLibraryQuery]()
	return withInterceptors[[]*SentinelLibrary](ctx, slq, qr, slq.inters)
}

// AllX is like All, but panics if an error occurs.
func (slq *SentinelLibraryQuery) AllX(ctx context.Context) []*SentinelLibrary {
	nodes, err := slq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SentinelLibrary IDs.
func (slq *SentinelLibraryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if slq.ctx.Unique == nil && slq.path != nil {
		slq.Unique(true)
	}
	ctx = setContextOp(ctx, slq.ctx, ent.OpQueryIDs)
	if err = slq.Select(sentinellibrary.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (slq *SentinelLibraryQuery) IDsX(ctx context.Context) []int {
	ids, err := slq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (slq *SentinelLibraryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, slq.ctx, ent.OpQueryCount)
	if err := slq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, slq, querierCount[*SentinelLibraryQuery](), slq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (slq *SentinelLibraryQuery) CountX(ctx context.Context) int {
	count, err := slq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (slq *SentinelLibraryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, slq.ctx, ent.OpQueryExist)
	switch _, err := slq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (slq *SentinelLibraryQuery) ExistX(ctx context.Context) bool {
	exist, err := slq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SentinelLibraryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (slq *SentinelLibraryQuery) Clone() *SentinelLibraryQuery {
	if slq == nil {
		return nil
	}
	return &SentinelLibraryQuery{
		config:           slq.config,
		ctx:              slq.ctx.Clone(),
		order:            append([]sentinellibrary.OrderOption{}, slq.order...),
		inters:           append([]Interceptor{}, slq.inters...),
		predicates:       append([]predicate.SentinelLibrary{}, slq.predicates...),
		withSentinelInfo: slq.withSentinelInfo.Clone(),
		// clone intermediate query.
		sql:  slq.sql.Clone(),
		path: slq.path,
	}
}

// WithSentinelInfo tells the query-builder to eager-load the nodes that are connected to
// the "sentinel_info" edge. The optional arguments are used to configure the query builder of the edge.
func (slq *SentinelLibraryQuery) WithSentinelInfo(opts ...func(*SentinelInfoQuery)) *SentinelLibraryQuery {
	query := (&SentinelInfoClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	slq.withSentinelInfo = query
	return slq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		SentinelInfoID model.InternalID `json:"sentinel_info_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SentinelLibrary.Query().
//		GroupBy(sentinellibrary.FieldSentinelInfoID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (slq *SentinelLibraryQuery) GroupBy(field string, fields ...string) *SentinelLibraryGroupBy {
	slq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SentinelLibraryGroupBy{build: slq}
	grbuild.flds = &slq.ctx.Fields
	grbuild.label = sentinellibrary.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		SentinelInfoID model.InternalID `json:"sentinel_info_id,omitempty"`
//	}
//
//	client.SentinelLibrary.Query().
//		Select(sentinellibrary.FieldSentinelInfoID).
//		Scan(ctx, &v)
func (slq *SentinelLibraryQuery) Select(fields ...string) *SentinelLibrarySelect {
	slq.ctx.Fields = append(slq.ctx.Fields, fields...)
	sbuild := &SentinelLibrarySelect{SentinelLibraryQuery: slq}
	sbuild.label = sentinellibrary.Label
	sbuild.flds, sbuild.scan = &slq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SentinelLibrarySelect configured with the given aggregations.
func (slq *SentinelLibraryQuery) Aggregate(fns ...AggregateFunc) *SentinelLibrarySelect {
	return slq.Select().Aggregate(fns...)
}

func (slq *SentinelLibraryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range slq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, slq); err != nil {
				return err
			}
		}
	}
	for _, f := range slq.ctx.Fields {
		if !sentinellibrary.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if slq.path != nil {
		prev, err := slq.path(ctx)
		if err != nil {
			return err
		}
		slq.sql = prev
	}
	return nil
}

func (slq *SentinelLibraryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SentinelLibrary, error) {
	var (
		nodes       = []*SentinelLibrary{}
		_spec       = slq.querySpec()
		loadedTypes = [1]bool{
			slq.withSentinelInfo != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SentinelLibrary).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SentinelLibrary{config: slq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, slq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := slq.withSentinelInfo; query != nil {
		if err := slq.loadSentinelInfo(ctx, query, nodes, nil,
			func(n *SentinelLibrary, e *SentinelInfo) { n.Edges.SentinelInfo = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (slq *SentinelLibraryQuery) loadSentinelInfo(ctx context.Context, query *SentinelInfoQuery, nodes []*SentinelLibrary, init func(*SentinelLibrary), assign func(*SentinelLibrary, *SentinelInfo)) error {
	ids := make([]model.InternalID, 0, len(nodes))
	nodeids := make(map[model.InternalID][]*SentinelLibrary)
	for i := range nodes {
		fk := nodes[i].SentinelInfoID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sentinelinfo.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sentinel_info_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (slq *SentinelLibraryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := slq.querySpec()
	_spec.Node.Columns = slq.ctx.Fields
	if len(slq.ctx.Fields) > 0 {
		_spec.Unique = slq.ctx.Unique != nil && *slq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, slq.driver, _spec)
}

func (slq *SentinelLibraryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sentinellibrary.Table, sentinellibrary.Columns, sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt))
	_spec.From = slq.sql
	if unique := slq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if slq.path != nil {
		_spec.Unique = true
	}
	if fields := slq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentinellibrary.FieldID)
		for i := range fields {
			if fields[i] != sentinellibrary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if slq.withSentinelInfo != nil {
			_spec.Node.AddColumnOnce(sentinellibrary.FieldSentinelInfoID)
		}
	}
	if ps := slq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := slq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := slq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := slq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (slq *SentinelLibraryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(slq.driver.Dialect())
	t1 := builder.Table(sentinellibrary.Table)
	columns := slq.ctx.Fields
	if len(columns) == 0 {
		columns = sentinellibrary.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if slq.sql != nil {
		selector = slq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if slq.ctx.Unique != nil && *slq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range slq.predicates {
		p(selector)
	}
	for _, p := range slq.order {
		p(selector)
	}
	if offset := slq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := slq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SentinelLibraryGroupBy is the group-by builder for SentinelLibrary entities.
type SentinelLibraryGroupBy struct {
	selector
	build *SentinelLibraryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (slgb *SentinelLibraryGroupBy) Aggregate(fns ...AggregateFunc) *SentinelLibraryGroupBy {
	slgb.fns = append(slgb.fns, fns...)
	return slgb
}

// Scan applies the selector query and scans the result into the given value.
func (slgb *SentinelLibraryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, slgb.build.ctx, ent.OpQueryGroupBy)
	if err := slgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SentinelLibraryQuery, *SentinelLibraryGroupBy](ctx, slgb.build, slgb, slgb.build.inters, v)
}

func (slgb *SentinelLibraryGroupBy) sqlScan(ctx context.Context, root *SentinelLibraryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(slgb.fns))
	for _, fn := range slgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*slgb.flds)+len(slgb.fns))
		for _, f := range *slgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*slgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := slgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SentinelLibrarySelect is the builder for selecting fields of SentinelLibrary entities.
type SentinelLibrarySelect struct {
	*SentinelLibraryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sls *SentinelLibrarySelect) Aggregate(fns ...AggregateFunc) *SentinelLibrarySelect {
	sls.fns = append(sls.fns, fns...)
	return sls
}

// Scan applies the selector query and scans the result into the given value.
func (sls *SentinelLibrarySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sls.ctx, ent.OpQuerySelect)
	if err := sls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SentinelLibraryQuery, *SentinelLibrarySelect](ctx, sls.SentinelLibraryQuery, sls, sls.inters, v)
}

func (sls *SentinelLibrarySelect) sqlScan(ctx context.Context, root *SentinelLibraryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sls.fns))
	for _, fn := range sls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
