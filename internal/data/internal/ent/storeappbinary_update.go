// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeappbinary"
)

// StoreAppBinaryUpdate is the builder for updating StoreAppBinary entities.
type StoreAppBinaryUpdate struct {
	config
	hooks    []Hook
	mutation *StoreAppBinaryMutation
}

// Where appends a list predicates to the StoreAppBinaryUpdate builder.
func (sabu *StoreAppBinaryUpdate) Where(ps ...predicate.StoreAppBinary) *StoreAppBinaryUpdate {
	sabu.mutation.Where(ps...)
	return sabu
}

// SetName sets the "name" field.
func (sabu *StoreAppBinaryUpdate) SetName(s string) *StoreAppBinaryUpdate {
	sabu.mutation.SetName(s)
	return sabu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sabu *StoreAppBinaryUpdate) SetNillableName(s *string) *StoreAppBinaryUpdate {
	if s != nil {
		sabu.SetName(*s)
	}
	return sabu
}

// ClearName clears the value of the "name" field.
func (sabu *StoreAppBinaryUpdate) ClearName() *StoreAppBinaryUpdate {
	sabu.mutation.ClearName()
	return sabu
}

// SetSizeBytes sets the "size_bytes" field.
func (sabu *StoreAppBinaryUpdate) SetSizeBytes(i int64) *StoreAppBinaryUpdate {
	sabu.mutation.ResetSizeBytes()
	sabu.mutation.SetSizeBytes(i)
	return sabu
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (sabu *StoreAppBinaryUpdate) SetNillableSizeBytes(i *int64) *StoreAppBinaryUpdate {
	if i != nil {
		sabu.SetSizeBytes(*i)
	}
	return sabu
}

// AddSizeBytes adds i to the "size_bytes" field.
func (sabu *StoreAppBinaryUpdate) AddSizeBytes(i int64) *StoreAppBinaryUpdate {
	sabu.mutation.AddSizeBytes(i)
	return sabu
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (sabu *StoreAppBinaryUpdate) ClearSizeBytes() *StoreAppBinaryUpdate {
	sabu.mutation.ClearSizeBytes()
	return sabu
}

// SetPublicURL sets the "public_url" field.
func (sabu *StoreAppBinaryUpdate) SetPublicURL(s string) *StoreAppBinaryUpdate {
	sabu.mutation.SetPublicURL(s)
	return sabu
}

// SetNillablePublicURL sets the "public_url" field if the given value is not nil.
func (sabu *StoreAppBinaryUpdate) SetNillablePublicURL(s *string) *StoreAppBinaryUpdate {
	if s != nil {
		sabu.SetPublicURL(*s)
	}
	return sabu
}

// ClearPublicURL clears the value of the "public_url" field.
func (sabu *StoreAppBinaryUpdate) ClearPublicURL() *StoreAppBinaryUpdate {
	sabu.mutation.ClearPublicURL()
	return sabu
}

// SetSha256 sets the "sha256" field.
func (sabu *StoreAppBinaryUpdate) SetSha256(b []byte) *StoreAppBinaryUpdate {
	sabu.mutation.SetSha256(b)
	return sabu
}

// ClearSha256 clears the value of the "sha256" field.
func (sabu *StoreAppBinaryUpdate) ClearSha256() *StoreAppBinaryUpdate {
	sabu.mutation.ClearSha256()
	return sabu
}

// SetUpdatedAt sets the "updated_at" field.
func (sabu *StoreAppBinaryUpdate) SetUpdatedAt(t time.Time) *StoreAppBinaryUpdate {
	sabu.mutation.SetUpdatedAt(t)
	return sabu
}

// SetCreatedAt sets the "created_at" field.
func (sabu *StoreAppBinaryUpdate) SetCreatedAt(t time.Time) *StoreAppBinaryUpdate {
	sabu.mutation.SetCreatedAt(t)
	return sabu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sabu *StoreAppBinaryUpdate) SetNillableCreatedAt(t *time.Time) *StoreAppBinaryUpdate {
	if t != nil {
		sabu.SetCreatedAt(*t)
	}
	return sabu
}

// Mutation returns the StoreAppBinaryMutation object of the builder.
func (sabu *StoreAppBinaryUpdate) Mutation() *StoreAppBinaryMutation {
	return sabu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sabu *StoreAppBinaryUpdate) Save(ctx context.Context) (int, error) {
	sabu.defaults()
	return withHooks(ctx, sabu.sqlSave, sabu.mutation, sabu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sabu *StoreAppBinaryUpdate) SaveX(ctx context.Context) int {
	affected, err := sabu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sabu *StoreAppBinaryUpdate) Exec(ctx context.Context) error {
	_, err := sabu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabu *StoreAppBinaryUpdate) ExecX(ctx context.Context) {
	if err := sabu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sabu *StoreAppBinaryUpdate) defaults() {
	if _, ok := sabu.mutation.UpdatedAt(); !ok {
		v := storeappbinary.UpdateDefaultUpdatedAt()
		sabu.mutation.SetUpdatedAt(v)
	}
}

func (sabu *StoreAppBinaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(storeappbinary.Table, storeappbinary.Columns, sqlgraph.NewFieldSpec(storeappbinary.FieldID, field.TypeInt64))
	if ps := sabu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sabu.mutation.Name(); ok {
		_spec.SetField(storeappbinary.FieldName, field.TypeString, value)
	}
	if sabu.mutation.NameCleared() {
		_spec.ClearField(storeappbinary.FieldName, field.TypeString)
	}
	if value, ok := sabu.mutation.SizeBytes(); ok {
		_spec.SetField(storeappbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := sabu.mutation.AddedSizeBytes(); ok {
		_spec.AddField(storeappbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if sabu.mutation.SizeBytesCleared() {
		_spec.ClearField(storeappbinary.FieldSizeBytes, field.TypeInt64)
	}
	if value, ok := sabu.mutation.PublicURL(); ok {
		_spec.SetField(storeappbinary.FieldPublicURL, field.TypeString, value)
	}
	if sabu.mutation.PublicURLCleared() {
		_spec.ClearField(storeappbinary.FieldPublicURL, field.TypeString)
	}
	if value, ok := sabu.mutation.Sha256(); ok {
		_spec.SetField(storeappbinary.FieldSha256, field.TypeBytes, value)
	}
	if sabu.mutation.Sha256Cleared() {
		_spec.ClearField(storeappbinary.FieldSha256, field.TypeBytes)
	}
	if value, ok := sabu.mutation.UpdatedAt(); ok {
		_spec.SetField(storeappbinary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sabu.mutation.CreatedAt(); ok {
		_spec.SetField(storeappbinary.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sabu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storeappbinary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sabu.mutation.done = true
	return n, nil
}

// StoreAppBinaryUpdateOne is the builder for updating a single StoreAppBinary entity.
type StoreAppBinaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoreAppBinaryMutation
}

// SetName sets the "name" field.
func (sabuo *StoreAppBinaryUpdateOne) SetName(s string) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetName(s)
	return sabuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sabuo *StoreAppBinaryUpdateOne) SetNillableName(s *string) *StoreAppBinaryUpdateOne {
	if s != nil {
		sabuo.SetName(*s)
	}
	return sabuo
}

// ClearName clears the value of the "name" field.
func (sabuo *StoreAppBinaryUpdateOne) ClearName() *StoreAppBinaryUpdateOne {
	sabuo.mutation.ClearName()
	return sabuo
}

// SetSizeBytes sets the "size_bytes" field.
func (sabuo *StoreAppBinaryUpdateOne) SetSizeBytes(i int64) *StoreAppBinaryUpdateOne {
	sabuo.mutation.ResetSizeBytes()
	sabuo.mutation.SetSizeBytes(i)
	return sabuo
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (sabuo *StoreAppBinaryUpdateOne) SetNillableSizeBytes(i *int64) *StoreAppBinaryUpdateOne {
	if i != nil {
		sabuo.SetSizeBytes(*i)
	}
	return sabuo
}

// AddSizeBytes adds i to the "size_bytes" field.
func (sabuo *StoreAppBinaryUpdateOne) AddSizeBytes(i int64) *StoreAppBinaryUpdateOne {
	sabuo.mutation.AddSizeBytes(i)
	return sabuo
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (sabuo *StoreAppBinaryUpdateOne) ClearSizeBytes() *StoreAppBinaryUpdateOne {
	sabuo.mutation.ClearSizeBytes()
	return sabuo
}

// SetPublicURL sets the "public_url" field.
func (sabuo *StoreAppBinaryUpdateOne) SetPublicURL(s string) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetPublicURL(s)
	return sabuo
}

// SetNillablePublicURL sets the "public_url" field if the given value is not nil.
func (sabuo *StoreAppBinaryUpdateOne) SetNillablePublicURL(s *string) *StoreAppBinaryUpdateOne {
	if s != nil {
		sabuo.SetPublicURL(*s)
	}
	return sabuo
}

// ClearPublicURL clears the value of the "public_url" field.
func (sabuo *StoreAppBinaryUpdateOne) ClearPublicURL() *StoreAppBinaryUpdateOne {
	sabuo.mutation.ClearPublicURL()
	return sabuo
}

// SetSha256 sets the "sha256" field.
func (sabuo *StoreAppBinaryUpdateOne) SetSha256(b []byte) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetSha256(b)
	return sabuo
}

// ClearSha256 clears the value of the "sha256" field.
func (sabuo *StoreAppBinaryUpdateOne) ClearSha256() *StoreAppBinaryUpdateOne {
	sabuo.mutation.ClearSha256()
	return sabuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sabuo *StoreAppBinaryUpdateOne) SetUpdatedAt(t time.Time) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetUpdatedAt(t)
	return sabuo
}

// SetCreatedAt sets the "created_at" field.
func (sabuo *StoreAppBinaryUpdateOne) SetCreatedAt(t time.Time) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetCreatedAt(t)
	return sabuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sabuo *StoreAppBinaryUpdateOne) SetNillableCreatedAt(t *time.Time) *StoreAppBinaryUpdateOne {
	if t != nil {
		sabuo.SetCreatedAt(*t)
	}
	return sabuo
}

// Mutation returns the StoreAppBinaryMutation object of the builder.
func (sabuo *StoreAppBinaryUpdateOne) Mutation() *StoreAppBinaryMutation {
	return sabuo.mutation
}

// Where appends a list predicates to the StoreAppBinaryUpdate builder.
func (sabuo *StoreAppBinaryUpdateOne) Where(ps ...predicate.StoreAppBinary) *StoreAppBinaryUpdateOne {
	sabuo.mutation.Where(ps...)
	return sabuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sabuo *StoreAppBinaryUpdateOne) Select(field string, fields ...string) *StoreAppBinaryUpdateOne {
	sabuo.fields = append([]string{field}, fields...)
	return sabuo
}

// Save executes the query and returns the updated StoreAppBinary entity.
func (sabuo *StoreAppBinaryUpdateOne) Save(ctx context.Context) (*StoreAppBinary, error) {
	sabuo.defaults()
	return withHooks(ctx, sabuo.sqlSave, sabuo.mutation, sabuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sabuo *StoreAppBinaryUpdateOne) SaveX(ctx context.Context) *StoreAppBinary {
	node, err := sabuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sabuo *StoreAppBinaryUpdateOne) Exec(ctx context.Context) error {
	_, err := sabuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabuo *StoreAppBinaryUpdateOne) ExecX(ctx context.Context) {
	if err := sabuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sabuo *StoreAppBinaryUpdateOne) defaults() {
	if _, ok := sabuo.mutation.UpdatedAt(); !ok {
		v := storeappbinary.UpdateDefaultUpdatedAt()
		sabuo.mutation.SetUpdatedAt(v)
	}
}

func (sabuo *StoreAppBinaryUpdateOne) sqlSave(ctx context.Context) (_node *StoreAppBinary, err error) {
	_spec := sqlgraph.NewUpdateSpec(storeappbinary.Table, storeappbinary.Columns, sqlgraph.NewFieldSpec(storeappbinary.FieldID, field.TypeInt64))
	id, ok := sabuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StoreAppBinary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sabuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storeappbinary.FieldID)
		for _, f := range fields {
			if !storeappbinary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storeappbinary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sabuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sabuo.mutation.Name(); ok {
		_spec.SetField(storeappbinary.FieldName, field.TypeString, value)
	}
	if sabuo.mutation.NameCleared() {
		_spec.ClearField(storeappbinary.FieldName, field.TypeString)
	}
	if value, ok := sabuo.mutation.SizeBytes(); ok {
		_spec.SetField(storeappbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := sabuo.mutation.AddedSizeBytes(); ok {
		_spec.AddField(storeappbinary.FieldSizeBytes, field.TypeInt64, value)
	}
	if sabuo.mutation.SizeBytesCleared() {
		_spec.ClearField(storeappbinary.FieldSizeBytes, field.TypeInt64)
	}
	if value, ok := sabuo.mutation.PublicURL(); ok {
		_spec.SetField(storeappbinary.FieldPublicURL, field.TypeString, value)
	}
	if sabuo.mutation.PublicURLCleared() {
		_spec.ClearField(storeappbinary.FieldPublicURL, field.TypeString)
	}
	if value, ok := sabuo.mutation.Sha256(); ok {
		_spec.SetField(storeappbinary.FieldSha256, field.TypeBytes, value)
	}
	if sabuo.mutation.Sha256Cleared() {
		_spec.ClearField(storeappbinary.FieldSha256, field.TypeBytes)
	}
	if value, ok := sabuo.mutation.UpdatedAt(); ok {
		_spec.SetField(storeappbinary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sabuo.mutation.CreatedAt(); ok {
		_spec.SetField(storeappbinary.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &StoreAppBinary{config: sabuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sabuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storeappbinary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sabuo.mutation.done = true
	return _node, nil
}
