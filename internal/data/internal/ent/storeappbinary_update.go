// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeapp"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeappbinary"
	"github.com/tuihub/librarian/internal/model"
)

// StoreAppBinaryUpdate is the builder for updating StoreAppBinary entities.
type StoreAppBinaryUpdate struct {
	config
	hooks    []Hook
	mutation *StoreAppBinaryMutation
}

// Where appends a list predicates to the StoreAppBinaryUpdate builder.
func (sabu *StoreAppBinaryUpdate) Where(ps ...predicate.StoreAppBinary) *StoreAppBinaryUpdate {
	sabu.mutation.Where(ps...)
	return sabu
}

// SetStoreAppID sets the "store_app_id" field.
func (sabu *StoreAppBinaryUpdate) SetStoreAppID(mi model.InternalID) *StoreAppBinaryUpdate {
	sabu.mutation.SetStoreAppID(mi)
	return sabu
}

// SetNillableStoreAppID sets the "store_app_id" field if the given value is not nil.
func (sabu *StoreAppBinaryUpdate) SetNillableStoreAppID(mi *model.InternalID) *StoreAppBinaryUpdate {
	if mi != nil {
		sabu.SetStoreAppID(*mi)
	}
	return sabu
}

// SetSentinelAppBinaryUnionID sets the "sentinel_app_binary_union_id" field.
func (sabu *StoreAppBinaryUpdate) SetSentinelAppBinaryUnionID(mi model.InternalID) *StoreAppBinaryUpdate {
	sabu.mutation.SetSentinelAppBinaryUnionID(mi)
	return sabu
}

// SetNillableSentinelAppBinaryUnionID sets the "sentinel_app_binary_union_id" field if the given value is not nil.
func (sabu *StoreAppBinaryUpdate) SetNillableSentinelAppBinaryUnionID(mi *model.InternalID) *StoreAppBinaryUpdate {
	if mi != nil {
		sabu.SetSentinelAppBinaryUnionID(*mi)
	}
	return sabu
}

// SetUpdatedAt sets the "updated_at" field.
func (sabu *StoreAppBinaryUpdate) SetUpdatedAt(t time.Time) *StoreAppBinaryUpdate {
	sabu.mutation.SetUpdatedAt(t)
	return sabu
}

// SetCreatedAt sets the "created_at" field.
func (sabu *StoreAppBinaryUpdate) SetCreatedAt(t time.Time) *StoreAppBinaryUpdate {
	sabu.mutation.SetCreatedAt(t)
	return sabu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sabu *StoreAppBinaryUpdate) SetNillableCreatedAt(t *time.Time) *StoreAppBinaryUpdate {
	if t != nil {
		sabu.SetCreatedAt(*t)
	}
	return sabu
}

// SetStoreApp sets the "store_app" edge to the StoreApp entity.
func (sabu *StoreAppBinaryUpdate) SetStoreApp(s *StoreApp) *StoreAppBinaryUpdate {
	return sabu.SetStoreAppID(s.ID)
}

// SetSentinelAppBinaryID sets the "sentinel_app_binary" edge to the SentinelAppBinary entity by ID.
func (sabu *StoreAppBinaryUpdate) SetSentinelAppBinaryID(id model.InternalID) *StoreAppBinaryUpdate {
	sabu.mutation.SetSentinelAppBinaryID(id)
	return sabu
}

// SetSentinelAppBinary sets the "sentinel_app_binary" edge to the SentinelAppBinary entity.
func (sabu *StoreAppBinaryUpdate) SetSentinelAppBinary(s *SentinelAppBinary) *StoreAppBinaryUpdate {
	return sabu.SetSentinelAppBinaryID(s.ID)
}

// Mutation returns the StoreAppBinaryMutation object of the builder.
func (sabu *StoreAppBinaryUpdate) Mutation() *StoreAppBinaryMutation {
	return sabu.mutation
}

// ClearStoreApp clears the "store_app" edge to the StoreApp entity.
func (sabu *StoreAppBinaryUpdate) ClearStoreApp() *StoreAppBinaryUpdate {
	sabu.mutation.ClearStoreApp()
	return sabu
}

// ClearSentinelAppBinary clears the "sentinel_app_binary" edge to the SentinelAppBinary entity.
func (sabu *StoreAppBinaryUpdate) ClearSentinelAppBinary() *StoreAppBinaryUpdate {
	sabu.mutation.ClearSentinelAppBinary()
	return sabu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sabu *StoreAppBinaryUpdate) Save(ctx context.Context) (int, error) {
	sabu.defaults()
	return withHooks(ctx, sabu.sqlSave, sabu.mutation, sabu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sabu *StoreAppBinaryUpdate) SaveX(ctx context.Context) int {
	affected, err := sabu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sabu *StoreAppBinaryUpdate) Exec(ctx context.Context) error {
	_, err := sabu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabu *StoreAppBinaryUpdate) ExecX(ctx context.Context) {
	if err := sabu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sabu *StoreAppBinaryUpdate) defaults() {
	if _, ok := sabu.mutation.UpdatedAt(); !ok {
		v := storeappbinary.UpdateDefaultUpdatedAt()
		sabu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sabu *StoreAppBinaryUpdate) check() error {
	if sabu.mutation.StoreAppCleared() && len(sabu.mutation.StoreAppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StoreAppBinary.store_app"`)
	}
	if sabu.mutation.SentinelAppBinaryCleared() && len(sabu.mutation.SentinelAppBinaryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StoreAppBinary.sentinel_app_binary"`)
	}
	return nil
}

func (sabu *StoreAppBinaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sabu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(storeappbinary.Table, storeappbinary.Columns, sqlgraph.NewFieldSpec(storeappbinary.FieldID, field.TypeInt))
	if ps := sabu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sabu.mutation.UpdatedAt(); ok {
		_spec.SetField(storeappbinary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sabu.mutation.CreatedAt(); ok {
		_spec.SetField(storeappbinary.FieldCreatedAt, field.TypeTime, value)
	}
	if sabu.mutation.StoreAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storeappbinary.StoreAppTable,
			Columns: []string{storeappbinary.StoreAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storeapp.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sabu.mutation.StoreAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storeappbinary.StoreAppTable,
			Columns: []string{storeappbinary.StoreAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storeapp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sabu.mutation.SentinelAppBinaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storeappbinary.SentinelAppBinaryTable,
			Columns: []string{storeappbinary.SentinelAppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelappbinary.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sabu.mutation.SentinelAppBinaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storeappbinary.SentinelAppBinaryTable,
			Columns: []string{storeappbinary.SentinelAppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelappbinary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sabu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storeappbinary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sabu.mutation.done = true
	return n, nil
}

// StoreAppBinaryUpdateOne is the builder for updating a single StoreAppBinary entity.
type StoreAppBinaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoreAppBinaryMutation
}

// SetStoreAppID sets the "store_app_id" field.
func (sabuo *StoreAppBinaryUpdateOne) SetStoreAppID(mi model.InternalID) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetStoreAppID(mi)
	return sabuo
}

// SetNillableStoreAppID sets the "store_app_id" field if the given value is not nil.
func (sabuo *StoreAppBinaryUpdateOne) SetNillableStoreAppID(mi *model.InternalID) *StoreAppBinaryUpdateOne {
	if mi != nil {
		sabuo.SetStoreAppID(*mi)
	}
	return sabuo
}

// SetSentinelAppBinaryUnionID sets the "sentinel_app_binary_union_id" field.
func (sabuo *StoreAppBinaryUpdateOne) SetSentinelAppBinaryUnionID(mi model.InternalID) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetSentinelAppBinaryUnionID(mi)
	return sabuo
}

// SetNillableSentinelAppBinaryUnionID sets the "sentinel_app_binary_union_id" field if the given value is not nil.
func (sabuo *StoreAppBinaryUpdateOne) SetNillableSentinelAppBinaryUnionID(mi *model.InternalID) *StoreAppBinaryUpdateOne {
	if mi != nil {
		sabuo.SetSentinelAppBinaryUnionID(*mi)
	}
	return sabuo
}

// SetUpdatedAt sets the "updated_at" field.
func (sabuo *StoreAppBinaryUpdateOne) SetUpdatedAt(t time.Time) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetUpdatedAt(t)
	return sabuo
}

// SetCreatedAt sets the "created_at" field.
func (sabuo *StoreAppBinaryUpdateOne) SetCreatedAt(t time.Time) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetCreatedAt(t)
	return sabuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sabuo *StoreAppBinaryUpdateOne) SetNillableCreatedAt(t *time.Time) *StoreAppBinaryUpdateOne {
	if t != nil {
		sabuo.SetCreatedAt(*t)
	}
	return sabuo
}

// SetStoreApp sets the "store_app" edge to the StoreApp entity.
func (sabuo *StoreAppBinaryUpdateOne) SetStoreApp(s *StoreApp) *StoreAppBinaryUpdateOne {
	return sabuo.SetStoreAppID(s.ID)
}

// SetSentinelAppBinaryID sets the "sentinel_app_binary" edge to the SentinelAppBinary entity by ID.
func (sabuo *StoreAppBinaryUpdateOne) SetSentinelAppBinaryID(id model.InternalID) *StoreAppBinaryUpdateOne {
	sabuo.mutation.SetSentinelAppBinaryID(id)
	return sabuo
}

// SetSentinelAppBinary sets the "sentinel_app_binary" edge to the SentinelAppBinary entity.
func (sabuo *StoreAppBinaryUpdateOne) SetSentinelAppBinary(s *SentinelAppBinary) *StoreAppBinaryUpdateOne {
	return sabuo.SetSentinelAppBinaryID(s.ID)
}

// Mutation returns the StoreAppBinaryMutation object of the builder.
func (sabuo *StoreAppBinaryUpdateOne) Mutation() *StoreAppBinaryMutation {
	return sabuo.mutation
}

// ClearStoreApp clears the "store_app" edge to the StoreApp entity.
func (sabuo *StoreAppBinaryUpdateOne) ClearStoreApp() *StoreAppBinaryUpdateOne {
	sabuo.mutation.ClearStoreApp()
	return sabuo
}

// ClearSentinelAppBinary clears the "sentinel_app_binary" edge to the SentinelAppBinary entity.
func (sabuo *StoreAppBinaryUpdateOne) ClearSentinelAppBinary() *StoreAppBinaryUpdateOne {
	sabuo.mutation.ClearSentinelAppBinary()
	return sabuo
}

// Where appends a list predicates to the StoreAppBinaryUpdate builder.
func (sabuo *StoreAppBinaryUpdateOne) Where(ps ...predicate.StoreAppBinary) *StoreAppBinaryUpdateOne {
	sabuo.mutation.Where(ps...)
	return sabuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sabuo *StoreAppBinaryUpdateOne) Select(field string, fields ...string) *StoreAppBinaryUpdateOne {
	sabuo.fields = append([]string{field}, fields...)
	return sabuo
}

// Save executes the query and returns the updated StoreAppBinary entity.
func (sabuo *StoreAppBinaryUpdateOne) Save(ctx context.Context) (*StoreAppBinary, error) {
	sabuo.defaults()
	return withHooks(ctx, sabuo.sqlSave, sabuo.mutation, sabuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sabuo *StoreAppBinaryUpdateOne) SaveX(ctx context.Context) *StoreAppBinary {
	node, err := sabuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sabuo *StoreAppBinaryUpdateOne) Exec(ctx context.Context) error {
	_, err := sabuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sabuo *StoreAppBinaryUpdateOne) ExecX(ctx context.Context) {
	if err := sabuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sabuo *StoreAppBinaryUpdateOne) defaults() {
	if _, ok := sabuo.mutation.UpdatedAt(); !ok {
		v := storeappbinary.UpdateDefaultUpdatedAt()
		sabuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sabuo *StoreAppBinaryUpdateOne) check() error {
	if sabuo.mutation.StoreAppCleared() && len(sabuo.mutation.StoreAppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StoreAppBinary.store_app"`)
	}
	if sabuo.mutation.SentinelAppBinaryCleared() && len(sabuo.mutation.SentinelAppBinaryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StoreAppBinary.sentinel_app_binary"`)
	}
	return nil
}

func (sabuo *StoreAppBinaryUpdateOne) sqlSave(ctx context.Context) (_node *StoreAppBinary, err error) {
	if err := sabuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storeappbinary.Table, storeappbinary.Columns, sqlgraph.NewFieldSpec(storeappbinary.FieldID, field.TypeInt))
	id, ok := sabuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StoreAppBinary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sabuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storeappbinary.FieldID)
		for _, f := range fields {
			if !storeappbinary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storeappbinary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sabuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sabuo.mutation.UpdatedAt(); ok {
		_spec.SetField(storeappbinary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sabuo.mutation.CreatedAt(); ok {
		_spec.SetField(storeappbinary.FieldCreatedAt, field.TypeTime, value)
	}
	if sabuo.mutation.StoreAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storeappbinary.StoreAppTable,
			Columns: []string{storeappbinary.StoreAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storeapp.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sabuo.mutation.StoreAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storeappbinary.StoreAppTable,
			Columns: []string{storeappbinary.StoreAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storeapp.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sabuo.mutation.SentinelAppBinaryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storeappbinary.SentinelAppBinaryTable,
			Columns: []string{storeappbinary.SentinelAppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelappbinary.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sabuo.mutation.SentinelAppBinaryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   storeappbinary.SentinelAppBinaryTable,
			Columns: []string{storeappbinary.SentinelAppBinaryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinelappbinary.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StoreAppBinary{config: sabuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sabuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storeappbinary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sabuo.mutation.done = true
	return _node, nil
}
