// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/app"
	"github.com/tuihub/librarian/internal/data/internal/ent/appruntime"
	"github.com/tuihub/librarian/internal/model"
)

// AppRunTimeCreate is the builder for creating a AppRunTime entity.
type AppRunTimeCreate struct {
	config
	mutation *AppRunTimeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (artc *AppRunTimeCreate) SetUserID(mi model.InternalID) *AppRunTimeCreate {
	artc.mutation.SetUserID(mi)
	return artc
}

// SetAppID sets the "app_id" field.
func (artc *AppRunTimeCreate) SetAppID(mi model.InternalID) *AppRunTimeCreate {
	artc.mutation.SetAppID(mi)
	return artc
}

// SetDeviceID sets the "device_id" field.
func (artc *AppRunTimeCreate) SetDeviceID(mi model.InternalID) *AppRunTimeCreate {
	artc.mutation.SetDeviceID(mi)
	return artc
}

// SetStartTime sets the "start_time" field.
func (artc *AppRunTimeCreate) SetStartTime(t time.Time) *AppRunTimeCreate {
	artc.mutation.SetStartTime(t)
	return artc
}

// SetDuration sets the "duration" field.
func (artc *AppRunTimeCreate) SetDuration(t time.Duration) *AppRunTimeCreate {
	artc.mutation.SetDuration(t)
	return artc
}

// SetUpdatedAt sets the "updated_at" field.
func (artc *AppRunTimeCreate) SetUpdatedAt(t time.Time) *AppRunTimeCreate {
	artc.mutation.SetUpdatedAt(t)
	return artc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (artc *AppRunTimeCreate) SetNillableUpdatedAt(t *time.Time) *AppRunTimeCreate {
	if t != nil {
		artc.SetUpdatedAt(*t)
	}
	return artc
}

// SetCreatedAt sets the "created_at" field.
func (artc *AppRunTimeCreate) SetCreatedAt(t time.Time) *AppRunTimeCreate {
	artc.mutation.SetCreatedAt(t)
	return artc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (artc *AppRunTimeCreate) SetNillableCreatedAt(t *time.Time) *AppRunTimeCreate {
	if t != nil {
		artc.SetCreatedAt(*t)
	}
	return artc
}

// SetID sets the "id" field.
func (artc *AppRunTimeCreate) SetID(mi model.InternalID) *AppRunTimeCreate {
	artc.mutation.SetID(mi)
	return artc
}

// SetApp sets the "app" edge to the App entity.
func (artc *AppRunTimeCreate) SetApp(a *App) *AppRunTimeCreate {
	return artc.SetAppID(a.ID)
}

// Mutation returns the AppRunTimeMutation object of the builder.
func (artc *AppRunTimeCreate) Mutation() *AppRunTimeMutation {
	return artc.mutation
}

// Save creates the AppRunTime in the database.
func (artc *AppRunTimeCreate) Save(ctx context.Context) (*AppRunTime, error) {
	artc.defaults()
	return withHooks(ctx, artc.sqlSave, artc.mutation, artc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (artc *AppRunTimeCreate) SaveX(ctx context.Context) *AppRunTime {
	v, err := artc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (artc *AppRunTimeCreate) Exec(ctx context.Context) error {
	_, err := artc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (artc *AppRunTimeCreate) ExecX(ctx context.Context) {
	if err := artc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (artc *AppRunTimeCreate) defaults() {
	if _, ok := artc.mutation.UpdatedAt(); !ok {
		v := appruntime.DefaultUpdatedAt()
		artc.mutation.SetUpdatedAt(v)
	}
	if _, ok := artc.mutation.CreatedAt(); !ok {
		v := appruntime.DefaultCreatedAt()
		artc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (artc *AppRunTimeCreate) check() error {
	if _, ok := artc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AppRunTime.user_id"`)}
	}
	if _, ok := artc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppRunTime.app_id"`)}
	}
	if _, ok := artc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "AppRunTime.device_id"`)}
	}
	if _, ok := artc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "AppRunTime.start_time"`)}
	}
	if _, ok := artc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "AppRunTime.duration"`)}
	}
	if _, ok := artc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppRunTime.updated_at"`)}
	}
	if _, ok := artc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppRunTime.created_at"`)}
	}
	if len(artc.mutation.AppIDs()) == 0 {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "AppRunTime.app"`)}
	}
	return nil
}

func (artc *AppRunTimeCreate) sqlSave(ctx context.Context) (*AppRunTime, error) {
	if err := artc.check(); err != nil {
		return nil, err
	}
	_node, _spec := artc.createSpec()
	if err := sqlgraph.CreateNode(ctx, artc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = model.InternalID(id)
	}
	artc.mutation.id = &_node.ID
	artc.mutation.done = true
	return _node, nil
}

func (artc *AppRunTimeCreate) createSpec() (*AppRunTime, *sqlgraph.CreateSpec) {
	var (
		_node = &AppRunTime{config: artc.config}
		_spec = sqlgraph.NewCreateSpec(appruntime.Table, sqlgraph.NewFieldSpec(appruntime.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = artc.conflict
	if id, ok := artc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := artc.mutation.UserID(); ok {
		_spec.SetField(appruntime.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := artc.mutation.DeviceID(); ok {
		_spec.SetField(appruntime.FieldDeviceID, field.TypeInt64, value)
		_node.DeviceID = value
	}
	if value, ok := artc.mutation.StartTime(); ok {
		_spec.SetField(appruntime.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := artc.mutation.Duration(); ok {
		_spec.SetField(appruntime.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := artc.mutation.UpdatedAt(); ok {
		_spec.SetField(appruntime.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := artc.mutation.CreatedAt(); ok {
		_spec.SetField(appruntime.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := artc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appruntime.AppTable,
			Columns: []string{appruntime.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppRunTime.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppRunTimeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (artc *AppRunTimeCreate) OnConflict(opts ...sql.ConflictOption) *AppRunTimeUpsertOne {
	artc.conflict = opts
	return &AppRunTimeUpsertOne{
		create: artc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppRunTime.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (artc *AppRunTimeCreate) OnConflictColumns(columns ...string) *AppRunTimeUpsertOne {
	artc.conflict = append(artc.conflict, sql.ConflictColumns(columns...))
	return &AppRunTimeUpsertOne{
		create: artc,
	}
}

type (
	// AppRunTimeUpsertOne is the builder for "upsert"-ing
	//  one AppRunTime node.
	AppRunTimeUpsertOne struct {
		create *AppRunTimeCreate
	}

	// AppRunTimeUpsert is the "OnConflict" setter.
	AppRunTimeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *AppRunTimeUpsert) SetUserID(v model.InternalID) *AppRunTimeUpsert {
	u.Set(appruntime.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppRunTimeUpsert) UpdateUserID() *AppRunTimeUpsert {
	u.SetExcluded(appruntime.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *AppRunTimeUpsert) AddUserID(v model.InternalID) *AppRunTimeUpsert {
	u.Add(appruntime.FieldUserID, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppRunTimeUpsert) SetAppID(v model.InternalID) *AppRunTimeUpsert {
	u.Set(appruntime.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRunTimeUpsert) UpdateAppID() *AppRunTimeUpsert {
	u.SetExcluded(appruntime.FieldAppID)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *AppRunTimeUpsert) SetDeviceID(v model.InternalID) *AppRunTimeUpsert {
	u.Set(appruntime.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AppRunTimeUpsert) UpdateDeviceID() *AppRunTimeUpsert {
	u.SetExcluded(appruntime.FieldDeviceID)
	return u
}

// AddDeviceID adds v to the "device_id" field.
func (u *AppRunTimeUpsert) AddDeviceID(v model.InternalID) *AppRunTimeUpsert {
	u.Add(appruntime.FieldDeviceID, v)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *AppRunTimeUpsert) SetStartTime(v time.Time) *AppRunTimeUpsert {
	u.Set(appruntime.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppRunTimeUpsert) UpdateStartTime() *AppRunTimeUpsert {
	u.SetExcluded(appruntime.FieldStartTime)
	return u
}

// SetDuration sets the "duration" field.
func (u *AppRunTimeUpsert) SetDuration(v time.Duration) *AppRunTimeUpsert {
	u.Set(appruntime.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AppRunTimeUpsert) UpdateDuration() *AppRunTimeUpsert {
	u.SetExcluded(appruntime.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *AppRunTimeUpsert) AddDuration(v time.Duration) *AppRunTimeUpsert {
	u.Add(appruntime.FieldDuration, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRunTimeUpsert) SetUpdatedAt(v time.Time) *AppRunTimeUpsert {
	u.Set(appruntime.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRunTimeUpsert) UpdateUpdatedAt() *AppRunTimeUpsert {
	u.SetExcluded(appruntime.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppRunTimeUpsert) SetCreatedAt(v time.Time) *AppRunTimeUpsert {
	u.Set(appruntime.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppRunTimeUpsert) UpdateCreatedAt() *AppRunTimeUpsert {
	u.SetExcluded(appruntime.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppRunTime.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appruntime.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppRunTimeUpsertOne) UpdateNewValues() *AppRunTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appruntime.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppRunTime.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppRunTimeUpsertOne) Ignore() *AppRunTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppRunTimeUpsertOne) DoNothing() *AppRunTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppRunTimeCreate.OnConflict
// documentation for more info.
func (u *AppRunTimeUpsertOne) Update(set func(*AppRunTimeUpsert)) *AppRunTimeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppRunTimeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppRunTimeUpsertOne) SetUserID(v model.InternalID) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AppRunTimeUpsertOne) AddUserID(v model.InternalID) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppRunTimeUpsertOne) UpdateUserID() *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateUserID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppRunTimeUpsertOne) SetAppID(v model.InternalID) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRunTimeUpsertOne) UpdateAppID() *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateAppID()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *AppRunTimeUpsertOne) SetDeviceID(v model.InternalID) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetDeviceID(v)
	})
}

// AddDeviceID adds v to the "device_id" field.
func (u *AppRunTimeUpsertOne) AddDeviceID(v model.InternalID) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.AddDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AppRunTimeUpsertOne) UpdateDeviceID() *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateDeviceID()
	})
}

// SetStartTime sets the "start_time" field.
func (u *AppRunTimeUpsertOne) SetStartTime(v time.Time) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppRunTimeUpsertOne) UpdateStartTime() *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateStartTime()
	})
}

// SetDuration sets the "duration" field.
func (u *AppRunTimeUpsertOne) SetDuration(v time.Duration) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *AppRunTimeUpsertOne) AddDuration(v time.Duration) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AppRunTimeUpsertOne) UpdateDuration() *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateDuration()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRunTimeUpsertOne) SetUpdatedAt(v time.Time) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRunTimeUpsertOne) UpdateUpdatedAt() *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppRunTimeUpsertOne) SetCreatedAt(v time.Time) *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppRunTimeUpsertOne) UpdateCreatedAt() *AppRunTimeUpsertOne {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppRunTimeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppRunTimeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppRunTimeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppRunTimeUpsertOne) ID(ctx context.Context) (id model.InternalID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppRunTimeUpsertOne) IDX(ctx context.Context) model.InternalID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppRunTimeCreateBulk is the builder for creating many AppRunTime entities in bulk.
type AppRunTimeCreateBulk struct {
	config
	err      error
	builders []*AppRunTimeCreate
	conflict []sql.ConflictOption
}

// Save creates the AppRunTime entities in the database.
func (artcb *AppRunTimeCreateBulk) Save(ctx context.Context) ([]*AppRunTime, error) {
	if artcb.err != nil {
		return nil, artcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(artcb.builders))
	nodes := make([]*AppRunTime, len(artcb.builders))
	mutators := make([]Mutator, len(artcb.builders))
	for i := range artcb.builders {
		func(i int, root context.Context) {
			builder := artcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppRunTimeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, artcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = artcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, artcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = model.InternalID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, artcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (artcb *AppRunTimeCreateBulk) SaveX(ctx context.Context) []*AppRunTime {
	v, err := artcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (artcb *AppRunTimeCreateBulk) Exec(ctx context.Context) error {
	_, err := artcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (artcb *AppRunTimeCreateBulk) ExecX(ctx context.Context) {
	if err := artcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppRunTime.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppRunTimeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (artcb *AppRunTimeCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppRunTimeUpsertBulk {
	artcb.conflict = opts
	return &AppRunTimeUpsertBulk{
		create: artcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppRunTime.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (artcb *AppRunTimeCreateBulk) OnConflictColumns(columns ...string) *AppRunTimeUpsertBulk {
	artcb.conflict = append(artcb.conflict, sql.ConflictColumns(columns...))
	return &AppRunTimeUpsertBulk{
		create: artcb,
	}
}

// AppRunTimeUpsertBulk is the builder for "upsert"-ing
// a bulk of AppRunTime nodes.
type AppRunTimeUpsertBulk struct {
	create *AppRunTimeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppRunTime.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appruntime.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppRunTimeUpsertBulk) UpdateNewValues() *AppRunTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appruntime.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppRunTime.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppRunTimeUpsertBulk) Ignore() *AppRunTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppRunTimeUpsertBulk) DoNothing() *AppRunTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppRunTimeCreateBulk.OnConflict
// documentation for more info.
func (u *AppRunTimeUpsertBulk) Update(set func(*AppRunTimeUpsert)) *AppRunTimeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppRunTimeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppRunTimeUpsertBulk) SetUserID(v model.InternalID) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AppRunTimeUpsertBulk) AddUserID(v model.InternalID) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppRunTimeUpsertBulk) UpdateUserID() *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateUserID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppRunTimeUpsertBulk) SetAppID(v model.InternalID) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRunTimeUpsertBulk) UpdateAppID() *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateAppID()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *AppRunTimeUpsertBulk) SetDeviceID(v model.InternalID) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetDeviceID(v)
	})
}

// AddDeviceID adds v to the "device_id" field.
func (u *AppRunTimeUpsertBulk) AddDeviceID(v model.InternalID) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.AddDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *AppRunTimeUpsertBulk) UpdateDeviceID() *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateDeviceID()
	})
}

// SetStartTime sets the "start_time" field.
func (u *AppRunTimeUpsertBulk) SetStartTime(v time.Time) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppRunTimeUpsertBulk) UpdateStartTime() *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateStartTime()
	})
}

// SetDuration sets the "duration" field.
func (u *AppRunTimeUpsertBulk) SetDuration(v time.Duration) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *AppRunTimeUpsertBulk) AddDuration(v time.Duration) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AppRunTimeUpsertBulk) UpdateDuration() *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateDuration()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRunTimeUpsertBulk) SetUpdatedAt(v time.Time) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRunTimeUpsertBulk) UpdateUpdatedAt() *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppRunTimeUpsertBulk) SetCreatedAt(v time.Time) *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppRunTimeUpsertBulk) UpdateCreatedAt() *AppRunTimeUpsertBulk {
	return u.Update(func(s *AppRunTimeUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppRunTimeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppRunTimeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppRunTimeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppRunTimeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
