// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelinfo"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinellibrary"
)

// SentinelInfoUpdate is the builder for updating SentinelInfo entities.
type SentinelInfoUpdate struct {
	config
	hooks    []Hook
	mutation *SentinelInfoMutation
}

// Where appends a list predicates to the SentinelInfoUpdate builder.
func (siu *SentinelInfoUpdate) Where(ps ...predicate.SentinelInfo) *SentinelInfoUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetURL sets the "url" field.
func (siu *SentinelInfoUpdate) SetURL(s string) *SentinelInfoUpdate {
	siu.mutation.SetURL(s)
	return siu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (siu *SentinelInfoUpdate) SetNillableURL(s *string) *SentinelInfoUpdate {
	if s != nil {
		siu.SetURL(*s)
	}
	return siu
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (siu *SentinelInfoUpdate) SetAlternativeUrls(s []string) *SentinelInfoUpdate {
	siu.mutation.SetAlternativeUrls(s)
	return siu
}

// AppendAlternativeUrls appends s to the "alternative_urls" field.
func (siu *SentinelInfoUpdate) AppendAlternativeUrls(s []string) *SentinelInfoUpdate {
	siu.mutation.AppendAlternativeUrls(s)
	return siu
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (siu *SentinelInfoUpdate) ClearAlternativeUrls() *SentinelInfoUpdate {
	siu.mutation.ClearAlternativeUrls()
	return siu
}

// SetGetTokenPath sets the "get_token_path" field.
func (siu *SentinelInfoUpdate) SetGetTokenPath(s string) *SentinelInfoUpdate {
	siu.mutation.SetGetTokenPath(s)
	return siu
}

// SetNillableGetTokenPath sets the "get_token_path" field if the given value is not nil.
func (siu *SentinelInfoUpdate) SetNillableGetTokenPath(s *string) *SentinelInfoUpdate {
	if s != nil {
		siu.SetGetTokenPath(*s)
	}
	return siu
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (siu *SentinelInfoUpdate) ClearGetTokenPath() *SentinelInfoUpdate {
	siu.mutation.ClearGetTokenPath()
	return siu
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (siu *SentinelInfoUpdate) SetDownloadFileBasePath(s string) *SentinelInfoUpdate {
	siu.mutation.SetDownloadFileBasePath(s)
	return siu
}

// SetNillableDownloadFileBasePath sets the "download_file_base_path" field if the given value is not nil.
func (siu *SentinelInfoUpdate) SetNillableDownloadFileBasePath(s *string) *SentinelInfoUpdate {
	if s != nil {
		siu.SetDownloadFileBasePath(*s)
	}
	return siu
}

// SetUpdatedAt sets the "updated_at" field.
func (siu *SentinelInfoUpdate) SetUpdatedAt(t time.Time) *SentinelInfoUpdate {
	siu.mutation.SetUpdatedAt(t)
	return siu
}

// SetCreatedAt sets the "created_at" field.
func (siu *SentinelInfoUpdate) SetCreatedAt(t time.Time) *SentinelInfoUpdate {
	siu.mutation.SetCreatedAt(t)
	return siu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (siu *SentinelInfoUpdate) SetNillableCreatedAt(t *time.Time) *SentinelInfoUpdate {
	if t != nil {
		siu.SetCreatedAt(*t)
	}
	return siu
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (siu *SentinelInfoUpdate) SetLibraryReportSequence(i int64) *SentinelInfoUpdate {
	siu.mutation.ResetLibraryReportSequence()
	siu.mutation.SetLibraryReportSequence(i)
	return siu
}

// SetNillableLibraryReportSequence sets the "library_report_sequence" field if the given value is not nil.
func (siu *SentinelInfoUpdate) SetNillableLibraryReportSequence(i *int64) *SentinelInfoUpdate {
	if i != nil {
		siu.SetLibraryReportSequence(*i)
	}
	return siu
}

// AddLibraryReportSequence adds i to the "library_report_sequence" field.
func (siu *SentinelInfoUpdate) AddLibraryReportSequence(i int64) *SentinelInfoUpdate {
	siu.mutation.AddLibraryReportSequence(i)
	return siu
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (siu *SentinelInfoUpdate) SetAppBinaryReportSequence(i int64) *SentinelInfoUpdate {
	siu.mutation.ResetAppBinaryReportSequence()
	siu.mutation.SetAppBinaryReportSequence(i)
	return siu
}

// SetNillableAppBinaryReportSequence sets the "app_binary_report_sequence" field if the given value is not nil.
func (siu *SentinelInfoUpdate) SetNillableAppBinaryReportSequence(i *int64) *SentinelInfoUpdate {
	if i != nil {
		siu.SetAppBinaryReportSequence(*i)
	}
	return siu
}

// AddAppBinaryReportSequence adds i to the "app_binary_report_sequence" field.
func (siu *SentinelInfoUpdate) AddAppBinaryReportSequence(i int64) *SentinelInfoUpdate {
	siu.mutation.AddAppBinaryReportSequence(i)
	return siu
}

// AddSentinelLibraryIDs adds the "sentinel_library" edge to the SentinelLibrary entity by IDs.
func (siu *SentinelInfoUpdate) AddSentinelLibraryIDs(ids ...int) *SentinelInfoUpdate {
	siu.mutation.AddSentinelLibraryIDs(ids...)
	return siu
}

// AddSentinelLibrary adds the "sentinel_library" edges to the SentinelLibrary entity.
func (siu *SentinelInfoUpdate) AddSentinelLibrary(s ...*SentinelLibrary) *SentinelInfoUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.AddSentinelLibraryIDs(ids...)
}

// Mutation returns the SentinelInfoMutation object of the builder.
func (siu *SentinelInfoUpdate) Mutation() *SentinelInfoMutation {
	return siu.mutation
}

// ClearSentinelLibrary clears all "sentinel_library" edges to the SentinelLibrary entity.
func (siu *SentinelInfoUpdate) ClearSentinelLibrary() *SentinelInfoUpdate {
	siu.mutation.ClearSentinelLibrary()
	return siu
}

// RemoveSentinelLibraryIDs removes the "sentinel_library" edge to SentinelLibrary entities by IDs.
func (siu *SentinelInfoUpdate) RemoveSentinelLibraryIDs(ids ...int) *SentinelInfoUpdate {
	siu.mutation.RemoveSentinelLibraryIDs(ids...)
	return siu
}

// RemoveSentinelLibrary removes "sentinel_library" edges to SentinelLibrary entities.
func (siu *SentinelInfoUpdate) RemoveSentinelLibrary(s ...*SentinelLibrary) *SentinelInfoUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.RemoveSentinelLibraryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *SentinelInfoUpdate) Save(ctx context.Context) (int, error) {
	siu.defaults()
	return withHooks(ctx, siu.sqlSave, siu.mutation, siu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siu *SentinelInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *SentinelInfoUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *SentinelInfoUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *SentinelInfoUpdate) defaults() {
	if _, ok := siu.mutation.UpdatedAt(); !ok {
		v := sentinelinfo.UpdateDefaultUpdatedAt()
		siu.mutation.SetUpdatedAt(v)
	}
}

func (siu *SentinelInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sentinelinfo.Table, sentinelinfo.Columns, sqlgraph.NewFieldSpec(sentinelinfo.FieldID, field.TypeInt64))
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.URL(); ok {
		_spec.SetField(sentinelinfo.FieldURL, field.TypeString, value)
	}
	if value, ok := siu.mutation.AlternativeUrls(); ok {
		_spec.SetField(sentinelinfo.FieldAlternativeUrls, field.TypeJSON, value)
	}
	if value, ok := siu.mutation.AppendedAlternativeUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sentinelinfo.FieldAlternativeUrls, value)
		})
	}
	if siu.mutation.AlternativeUrlsCleared() {
		_spec.ClearField(sentinelinfo.FieldAlternativeUrls, field.TypeJSON)
	}
	if value, ok := siu.mutation.GetTokenPath(); ok {
		_spec.SetField(sentinelinfo.FieldGetTokenPath, field.TypeString, value)
	}
	if siu.mutation.GetTokenPathCleared() {
		_spec.ClearField(sentinelinfo.FieldGetTokenPath, field.TypeString)
	}
	if value, ok := siu.mutation.DownloadFileBasePath(); ok {
		_spec.SetField(sentinelinfo.FieldDownloadFileBasePath, field.TypeString, value)
	}
	if value, ok := siu.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := siu.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := siu.mutation.LibraryReportSequence(); ok {
		_spec.SetField(sentinelinfo.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := siu.mutation.AddedLibraryReportSequence(); ok {
		_spec.AddField(sentinelinfo.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := siu.mutation.AppBinaryReportSequence(); ok {
		_spec.SetField(sentinelinfo.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if value, ok := siu.mutation.AddedAppBinaryReportSequence(); ok {
		_spec.AddField(sentinelinfo.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if siu.mutation.SentinelLibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sentinelinfo.SentinelLibraryTable,
			Columns: []string{sentinelinfo.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedSentinelLibraryIDs(); len(nodes) > 0 && !siu.mutation.SentinelLibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sentinelinfo.SentinelLibraryTable,
			Columns: []string{sentinelinfo.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.SentinelLibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sentinelinfo.SentinelLibraryTable,
			Columns: []string{sentinelinfo.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinelinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siu.mutation.done = true
	return n, nil
}

// SentinelInfoUpdateOne is the builder for updating a single SentinelInfo entity.
type SentinelInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SentinelInfoMutation
}

// SetURL sets the "url" field.
func (siuo *SentinelInfoUpdateOne) SetURL(s string) *SentinelInfoUpdateOne {
	siuo.mutation.SetURL(s)
	return siuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (siuo *SentinelInfoUpdateOne) SetNillableURL(s *string) *SentinelInfoUpdateOne {
	if s != nil {
		siuo.SetURL(*s)
	}
	return siuo
}

// SetAlternativeUrls sets the "alternative_urls" field.
func (siuo *SentinelInfoUpdateOne) SetAlternativeUrls(s []string) *SentinelInfoUpdateOne {
	siuo.mutation.SetAlternativeUrls(s)
	return siuo
}

// AppendAlternativeUrls appends s to the "alternative_urls" field.
func (siuo *SentinelInfoUpdateOne) AppendAlternativeUrls(s []string) *SentinelInfoUpdateOne {
	siuo.mutation.AppendAlternativeUrls(s)
	return siuo
}

// ClearAlternativeUrls clears the value of the "alternative_urls" field.
func (siuo *SentinelInfoUpdateOne) ClearAlternativeUrls() *SentinelInfoUpdateOne {
	siuo.mutation.ClearAlternativeUrls()
	return siuo
}

// SetGetTokenPath sets the "get_token_path" field.
func (siuo *SentinelInfoUpdateOne) SetGetTokenPath(s string) *SentinelInfoUpdateOne {
	siuo.mutation.SetGetTokenPath(s)
	return siuo
}

// SetNillableGetTokenPath sets the "get_token_path" field if the given value is not nil.
func (siuo *SentinelInfoUpdateOne) SetNillableGetTokenPath(s *string) *SentinelInfoUpdateOne {
	if s != nil {
		siuo.SetGetTokenPath(*s)
	}
	return siuo
}

// ClearGetTokenPath clears the value of the "get_token_path" field.
func (siuo *SentinelInfoUpdateOne) ClearGetTokenPath() *SentinelInfoUpdateOne {
	siuo.mutation.ClearGetTokenPath()
	return siuo
}

// SetDownloadFileBasePath sets the "download_file_base_path" field.
func (siuo *SentinelInfoUpdateOne) SetDownloadFileBasePath(s string) *SentinelInfoUpdateOne {
	siuo.mutation.SetDownloadFileBasePath(s)
	return siuo
}

// SetNillableDownloadFileBasePath sets the "download_file_base_path" field if the given value is not nil.
func (siuo *SentinelInfoUpdateOne) SetNillableDownloadFileBasePath(s *string) *SentinelInfoUpdateOne {
	if s != nil {
		siuo.SetDownloadFileBasePath(*s)
	}
	return siuo
}

// SetUpdatedAt sets the "updated_at" field.
func (siuo *SentinelInfoUpdateOne) SetUpdatedAt(t time.Time) *SentinelInfoUpdateOne {
	siuo.mutation.SetUpdatedAt(t)
	return siuo
}

// SetCreatedAt sets the "created_at" field.
func (siuo *SentinelInfoUpdateOne) SetCreatedAt(t time.Time) *SentinelInfoUpdateOne {
	siuo.mutation.SetCreatedAt(t)
	return siuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (siuo *SentinelInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *SentinelInfoUpdateOne {
	if t != nil {
		siuo.SetCreatedAt(*t)
	}
	return siuo
}

// SetLibraryReportSequence sets the "library_report_sequence" field.
func (siuo *SentinelInfoUpdateOne) SetLibraryReportSequence(i int64) *SentinelInfoUpdateOne {
	siuo.mutation.ResetLibraryReportSequence()
	siuo.mutation.SetLibraryReportSequence(i)
	return siuo
}

// SetNillableLibraryReportSequence sets the "library_report_sequence" field if the given value is not nil.
func (siuo *SentinelInfoUpdateOne) SetNillableLibraryReportSequence(i *int64) *SentinelInfoUpdateOne {
	if i != nil {
		siuo.SetLibraryReportSequence(*i)
	}
	return siuo
}

// AddLibraryReportSequence adds i to the "library_report_sequence" field.
func (siuo *SentinelInfoUpdateOne) AddLibraryReportSequence(i int64) *SentinelInfoUpdateOne {
	siuo.mutation.AddLibraryReportSequence(i)
	return siuo
}

// SetAppBinaryReportSequence sets the "app_binary_report_sequence" field.
func (siuo *SentinelInfoUpdateOne) SetAppBinaryReportSequence(i int64) *SentinelInfoUpdateOne {
	siuo.mutation.ResetAppBinaryReportSequence()
	siuo.mutation.SetAppBinaryReportSequence(i)
	return siuo
}

// SetNillableAppBinaryReportSequence sets the "app_binary_report_sequence" field if the given value is not nil.
func (siuo *SentinelInfoUpdateOne) SetNillableAppBinaryReportSequence(i *int64) *SentinelInfoUpdateOne {
	if i != nil {
		siuo.SetAppBinaryReportSequence(*i)
	}
	return siuo
}

// AddAppBinaryReportSequence adds i to the "app_binary_report_sequence" field.
func (siuo *SentinelInfoUpdateOne) AddAppBinaryReportSequence(i int64) *SentinelInfoUpdateOne {
	siuo.mutation.AddAppBinaryReportSequence(i)
	return siuo
}

// AddSentinelLibraryIDs adds the "sentinel_library" edge to the SentinelLibrary entity by IDs.
func (siuo *SentinelInfoUpdateOne) AddSentinelLibraryIDs(ids ...int) *SentinelInfoUpdateOne {
	siuo.mutation.AddSentinelLibraryIDs(ids...)
	return siuo
}

// AddSentinelLibrary adds the "sentinel_library" edges to the SentinelLibrary entity.
func (siuo *SentinelInfoUpdateOne) AddSentinelLibrary(s ...*SentinelLibrary) *SentinelInfoUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.AddSentinelLibraryIDs(ids...)
}

// Mutation returns the SentinelInfoMutation object of the builder.
func (siuo *SentinelInfoUpdateOne) Mutation() *SentinelInfoMutation {
	return siuo.mutation
}

// ClearSentinelLibrary clears all "sentinel_library" edges to the SentinelLibrary entity.
func (siuo *SentinelInfoUpdateOne) ClearSentinelLibrary() *SentinelInfoUpdateOne {
	siuo.mutation.ClearSentinelLibrary()
	return siuo
}

// RemoveSentinelLibraryIDs removes the "sentinel_library" edge to SentinelLibrary entities by IDs.
func (siuo *SentinelInfoUpdateOne) RemoveSentinelLibraryIDs(ids ...int) *SentinelInfoUpdateOne {
	siuo.mutation.RemoveSentinelLibraryIDs(ids...)
	return siuo
}

// RemoveSentinelLibrary removes "sentinel_library" edges to SentinelLibrary entities.
func (siuo *SentinelInfoUpdateOne) RemoveSentinelLibrary(s ...*SentinelLibrary) *SentinelInfoUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.RemoveSentinelLibraryIDs(ids...)
}

// Where appends a list predicates to the SentinelInfoUpdate builder.
func (siuo *SentinelInfoUpdateOne) Where(ps ...predicate.SentinelInfo) *SentinelInfoUpdateOne {
	siuo.mutation.Where(ps...)
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *SentinelInfoUpdateOne) Select(field string, fields ...string) *SentinelInfoUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated SentinelInfo entity.
func (siuo *SentinelInfoUpdateOne) Save(ctx context.Context) (*SentinelInfo, error) {
	siuo.defaults()
	return withHooks(ctx, siuo.sqlSave, siuo.mutation, siuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *SentinelInfoUpdateOne) SaveX(ctx context.Context) *SentinelInfo {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *SentinelInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *SentinelInfoUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *SentinelInfoUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdatedAt(); !ok {
		v := sentinelinfo.UpdateDefaultUpdatedAt()
		siuo.mutation.SetUpdatedAt(v)
	}
}

func (siuo *SentinelInfoUpdateOne) sqlSave(ctx context.Context) (_node *SentinelInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(sentinelinfo.Table, sentinelinfo.Columns, sqlgraph.NewFieldSpec(sentinelinfo.FieldID, field.TypeInt64))
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SentinelInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sentinelinfo.FieldID)
		for _, f := range fields {
			if !sentinelinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sentinelinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.URL(); ok {
		_spec.SetField(sentinelinfo.FieldURL, field.TypeString, value)
	}
	if value, ok := siuo.mutation.AlternativeUrls(); ok {
		_spec.SetField(sentinelinfo.FieldAlternativeUrls, field.TypeJSON, value)
	}
	if value, ok := siuo.mutation.AppendedAlternativeUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, sentinelinfo.FieldAlternativeUrls, value)
		})
	}
	if siuo.mutation.AlternativeUrlsCleared() {
		_spec.ClearField(sentinelinfo.FieldAlternativeUrls, field.TypeJSON)
	}
	if value, ok := siuo.mutation.GetTokenPath(); ok {
		_spec.SetField(sentinelinfo.FieldGetTokenPath, field.TypeString, value)
	}
	if siuo.mutation.GetTokenPathCleared() {
		_spec.ClearField(sentinelinfo.FieldGetTokenPath, field.TypeString)
	}
	if value, ok := siuo.mutation.DownloadFileBasePath(); ok {
		_spec.SetField(sentinelinfo.FieldDownloadFileBasePath, field.TypeString, value)
	}
	if value, ok := siuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sentinelinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := siuo.mutation.CreatedAt(); ok {
		_spec.SetField(sentinelinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := siuo.mutation.LibraryReportSequence(); ok {
		_spec.SetField(sentinelinfo.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := siuo.mutation.AddedLibraryReportSequence(); ok {
		_spec.AddField(sentinelinfo.FieldLibraryReportSequence, field.TypeInt64, value)
	}
	if value, ok := siuo.mutation.AppBinaryReportSequence(); ok {
		_spec.SetField(sentinelinfo.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if value, ok := siuo.mutation.AddedAppBinaryReportSequence(); ok {
		_spec.AddField(sentinelinfo.FieldAppBinaryReportSequence, field.TypeInt64, value)
	}
	if siuo.mutation.SentinelLibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sentinelinfo.SentinelLibraryTable,
			Columns: []string{sentinelinfo.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedSentinelLibraryIDs(); len(nodes) > 0 && !siuo.mutation.SentinelLibraryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sentinelinfo.SentinelLibraryTable,
			Columns: []string{sentinelinfo.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.SentinelLibraryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sentinelinfo.SentinelLibraryTable,
			Columns: []string{sentinelinfo.SentinelLibraryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sentinellibrary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SentinelInfo{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sentinelinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siuo.mutation.done = true
	return _node, nil
}
