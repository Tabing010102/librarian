// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinary"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeapp"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeappbinary"
	"github.com/tuihub/librarian/internal/model"
)

// StoreAppBinary is the model entity for the StoreAppBinary schema.
type StoreAppBinary struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StoreAppID holds the value of the "store_app_id" field.
	StoreAppID model.InternalID `json:"store_app_id,omitempty"`
	// SentinelAppBinaryUnionID holds the value of the "sentinel_app_binary_union_id" field.
	SentinelAppBinaryUnionID model.InternalID `json:"sentinel_app_binary_union_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoreAppBinaryQuery when eager-loading is set.
	Edges        StoreAppBinaryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StoreAppBinaryEdges holds the relations/edges for other nodes in the graph.
type StoreAppBinaryEdges struct {
	// StoreApp holds the value of the store_app edge.
	StoreApp *StoreApp `json:"store_app,omitempty"`
	// SentinelAppBinary holds the value of the sentinel_app_binary edge.
	SentinelAppBinary *SentinelAppBinary `json:"sentinel_app_binary,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StoreAppOrErr returns the StoreApp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoreAppBinaryEdges) StoreAppOrErr() (*StoreApp, error) {
	if e.StoreApp != nil {
		return e.StoreApp, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: storeapp.Label}
	}
	return nil, &NotLoadedError{edge: "store_app"}
}

// SentinelAppBinaryOrErr returns the SentinelAppBinary value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoreAppBinaryEdges) SentinelAppBinaryOrErr() (*SentinelAppBinary, error) {
	if e.SentinelAppBinary != nil {
		return e.SentinelAppBinary, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: sentinelappbinary.Label}
	}
	return nil, &NotLoadedError{edge: "sentinel_app_binary"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StoreAppBinary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storeappbinary.FieldID, storeappbinary.FieldStoreAppID, storeappbinary.FieldSentinelAppBinaryUnionID:
			values[i] = new(sql.NullInt64)
		case storeappbinary.FieldUpdatedAt, storeappbinary.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StoreAppBinary fields.
func (sab *StoreAppBinary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storeappbinary.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sab.ID = int(value.Int64)
		case storeappbinary.FieldStoreAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_app_id", values[i])
			} else if value.Valid {
				sab.StoreAppID = model.InternalID(value.Int64)
			}
		case storeappbinary.FieldSentinelAppBinaryUnionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sentinel_app_binary_union_id", values[i])
			} else if value.Valid {
				sab.SentinelAppBinaryUnionID = model.InternalID(value.Int64)
			}
		case storeappbinary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sab.UpdatedAt = value.Time
			}
		case storeappbinary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sab.CreatedAt = value.Time
			}
		default:
			sab.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StoreAppBinary.
// This includes values selected through modifiers, order, etc.
func (sab *StoreAppBinary) Value(name string) (ent.Value, error) {
	return sab.selectValues.Get(name)
}

// QueryStoreApp queries the "store_app" edge of the StoreAppBinary entity.
func (sab *StoreAppBinary) QueryStoreApp() *StoreAppQuery {
	return NewStoreAppBinaryClient(sab.config).QueryStoreApp(sab)
}

// QuerySentinelAppBinary queries the "sentinel_app_binary" edge of the StoreAppBinary entity.
func (sab *StoreAppBinary) QuerySentinelAppBinary() *SentinelAppBinaryQuery {
	return NewStoreAppBinaryClient(sab.config).QuerySentinelAppBinary(sab)
}

// Update returns a builder for updating this StoreAppBinary.
// Note that you need to call StoreAppBinary.Unwrap() before calling this method if this StoreAppBinary
// was returned from a transaction, and the transaction was committed or rolled back.
func (sab *StoreAppBinary) Update() *StoreAppBinaryUpdateOne {
	return NewStoreAppBinaryClient(sab.config).UpdateOne(sab)
}

// Unwrap unwraps the StoreAppBinary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sab *StoreAppBinary) Unwrap() *StoreAppBinary {
	_tx, ok := sab.config.driver.(*txDriver)
	if !ok {
		panic("ent: StoreAppBinary is not a transactional entity")
	}
	sab.config.driver = _tx.drv
	return sab
}

// String implements the fmt.Stringer.
func (sab *StoreAppBinary) String() string {
	var builder strings.Builder
	builder.WriteString("StoreAppBinary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sab.ID))
	builder.WriteString("store_app_id=")
	builder.WriteString(fmt.Sprintf("%v", sab.StoreAppID))
	builder.WriteString(", ")
	builder.WriteString("sentinel_app_binary_union_id=")
	builder.WriteString(fmt.Sprintf("%v", sab.SentinelAppBinaryUnionID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sab.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sab.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StoreAppBinaries is a parsable slice of StoreAppBinary.
type StoreAppBinaries []*StoreAppBinary
