// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/storeappbinary"
	"github.com/tuihub/librarian/internal/model"
)

// StoreAppBinary is the model entity for the StoreAppBinary schema.
type StoreAppBinary struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SizeBytes holds the value of the "size_bytes" field.
	SizeBytes int64 `json:"size_bytes,omitempty"`
	// PublicURL holds the value of the "public_url" field.
	PublicURL string `json:"public_url,omitempty"`
	// Sha256 holds the value of the "sha256" field.
	Sha256 []byte `json:"sha256,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StoreAppBinary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storeappbinary.FieldSha256:
			values[i] = new([]byte)
		case storeappbinary.FieldID, storeappbinary.FieldSizeBytes:
			values[i] = new(sql.NullInt64)
		case storeappbinary.FieldName, storeappbinary.FieldPublicURL:
			values[i] = new(sql.NullString)
		case storeappbinary.FieldUpdatedAt, storeappbinary.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StoreAppBinary fields.
func (sab *StoreAppBinary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storeappbinary.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sab.ID = model.InternalID(value.Int64)
			}
		case storeappbinary.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sab.Name = value.String
			}
		case storeappbinary.FieldSizeBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bytes", values[i])
			} else if value.Valid {
				sab.SizeBytes = value.Int64
			}
		case storeappbinary.FieldPublicURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_url", values[i])
			} else if value.Valid {
				sab.PublicURL = value.String
			}
		case storeappbinary.FieldSha256:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sha256", values[i])
			} else if value != nil {
				sab.Sha256 = *value
			}
		case storeappbinary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sab.UpdatedAt = value.Time
			}
		case storeappbinary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sab.CreatedAt = value.Time
			}
		default:
			sab.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StoreAppBinary.
// This includes values selected through modifiers, order, etc.
func (sab *StoreAppBinary) Value(name string) (ent.Value, error) {
	return sab.selectValues.Get(name)
}

// Update returns a builder for updating this StoreAppBinary.
// Note that you need to call StoreAppBinary.Unwrap() before calling this method if this StoreAppBinary
// was returned from a transaction, and the transaction was committed or rolled back.
func (sab *StoreAppBinary) Update() *StoreAppBinaryUpdateOne {
	return NewStoreAppBinaryClient(sab.config).UpdateOne(sab)
}

// Unwrap unwraps the StoreAppBinary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sab *StoreAppBinary) Unwrap() *StoreAppBinary {
	_tx, ok := sab.config.driver.(*txDriver)
	if !ok {
		panic("ent: StoreAppBinary is not a transactional entity")
	}
	sab.config.driver = _tx.drv
	return sab
}

// String implements the fmt.Stringer.
func (sab *StoreAppBinary) String() string {
	var builder strings.Builder
	builder.WriteString("StoreAppBinary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sab.ID))
	builder.WriteString("name=")
	builder.WriteString(sab.Name)
	builder.WriteString(", ")
	builder.WriteString("size_bytes=")
	builder.WriteString(fmt.Sprintf("%v", sab.SizeBytes))
	builder.WriteString(", ")
	builder.WriteString("public_url=")
	builder.WriteString(sab.PublicURL)
	builder.WriteString(", ")
	builder.WriteString("sha256=")
	builder.WriteString(fmt.Sprintf("%v", sab.Sha256))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sab.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sab.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StoreAppBinaries is a parsable slice of StoreAppBinary.
type StoreAppBinaries []*StoreAppBinary
