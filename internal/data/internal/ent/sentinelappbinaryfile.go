// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinaryfile"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelAppBinaryFile is the model entity for the SentinelAppBinaryFile schema.
type SentinelAppBinaryFile struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// SentinelID holds the value of the "sentinel_id" field.
	SentinelID model.InternalID `json:"sentinel_id,omitempty"`
	// SentinelLibraryReportedID holds the value of the "sentinel_library_reported_id" field.
	SentinelLibraryReportedID int64 `json:"sentinel_library_reported_id,omitempty"`
	// LibrarySnapshot holds the value of the "library_snapshot" field.
	LibrarySnapshot time.Time `json:"library_snapshot,omitempty"`
	// SentinelAppBinaryGeneratedID holds the value of the "sentinel_app_binary_generated_id" field.
	SentinelAppBinaryGeneratedID string `json:"sentinel_app_binary_generated_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SizeBytes holds the value of the "size_bytes" field.
	SizeBytes int64 `json:"size_bytes,omitempty"`
	// Sha256 holds the value of the "sha256" field.
	Sha256 []byte `json:"sha256,omitempty"`
	// ServerFilePath holds the value of the "server_file_path" field.
	ServerFilePath string `json:"server_file_path,omitempty"`
	// ChunksInfo holds the value of the "chunks_info" field.
	ChunksInfo string `json:"chunks_info,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SentinelAppBinaryFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sentinelappbinaryfile.FieldSha256:
			values[i] = new([]byte)
		case sentinelappbinaryfile.FieldID, sentinelappbinaryfile.FieldSentinelID, sentinelappbinaryfile.FieldSentinelLibraryReportedID, sentinelappbinaryfile.FieldSizeBytes:
			values[i] = new(sql.NullInt64)
		case sentinelappbinaryfile.FieldSentinelAppBinaryGeneratedID, sentinelappbinaryfile.FieldName, sentinelappbinaryfile.FieldServerFilePath, sentinelappbinaryfile.FieldChunksInfo:
			values[i] = new(sql.NullString)
		case sentinelappbinaryfile.FieldLibrarySnapshot, sentinelappbinaryfile.FieldUpdatedAt, sentinelappbinaryfile.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SentinelAppBinaryFile fields.
func (sabf *SentinelAppBinaryFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sentinelappbinaryfile.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sabf.ID = model.InternalID(value.Int64)
			}
		case sentinelappbinaryfile.FieldSentinelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sentinel_id", values[i])
			} else if value.Valid {
				sabf.SentinelID = model.InternalID(value.Int64)
			}
		case sentinelappbinaryfile.FieldSentinelLibraryReportedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sentinel_library_reported_id", values[i])
			} else if value.Valid {
				sabf.SentinelLibraryReportedID = value.Int64
			}
		case sentinelappbinaryfile.FieldLibrarySnapshot:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field library_snapshot", values[i])
			} else if value.Valid {
				sabf.LibrarySnapshot = value.Time
			}
		case sentinelappbinaryfile.FieldSentinelAppBinaryGeneratedID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sentinel_app_binary_generated_id", values[i])
			} else if value.Valid {
				sabf.SentinelAppBinaryGeneratedID = value.String
			}
		case sentinelappbinaryfile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sabf.Name = value.String
			}
		case sentinelappbinaryfile.FieldSizeBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bytes", values[i])
			} else if value.Valid {
				sabf.SizeBytes = value.Int64
			}
		case sentinelappbinaryfile.FieldSha256:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sha256", values[i])
			} else if value != nil {
				sabf.Sha256 = *value
			}
		case sentinelappbinaryfile.FieldServerFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_file_path", values[i])
			} else if value.Valid {
				sabf.ServerFilePath = value.String
			}
		case sentinelappbinaryfile.FieldChunksInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chunks_info", values[i])
			} else if value.Valid {
				sabf.ChunksInfo = value.String
			}
		case sentinelappbinaryfile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sabf.UpdatedAt = value.Time
			}
		case sentinelappbinaryfile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sabf.CreatedAt = value.Time
			}
		default:
			sabf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SentinelAppBinaryFile.
// This includes values selected through modifiers, order, etc.
func (sabf *SentinelAppBinaryFile) Value(name string) (ent.Value, error) {
	return sabf.selectValues.Get(name)
}

// Update returns a builder for updating this SentinelAppBinaryFile.
// Note that you need to call SentinelAppBinaryFile.Unwrap() before calling this method if this SentinelAppBinaryFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (sabf *SentinelAppBinaryFile) Update() *SentinelAppBinaryFileUpdateOne {
	return NewSentinelAppBinaryFileClient(sabf.config).UpdateOne(sabf)
}

// Unwrap unwraps the SentinelAppBinaryFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sabf *SentinelAppBinaryFile) Unwrap() *SentinelAppBinaryFile {
	_tx, ok := sabf.config.driver.(*txDriver)
	if !ok {
		panic("ent: SentinelAppBinaryFile is not a transactional entity")
	}
	sabf.config.driver = _tx.drv
	return sabf
}

// String implements the fmt.Stringer.
func (sabf *SentinelAppBinaryFile) String() string {
	var builder strings.Builder
	builder.WriteString("SentinelAppBinaryFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sabf.ID))
	builder.WriteString("sentinel_id=")
	builder.WriteString(fmt.Sprintf("%v", sabf.SentinelID))
	builder.WriteString(", ")
	builder.WriteString("sentinel_library_reported_id=")
	builder.WriteString(fmt.Sprintf("%v", sabf.SentinelLibraryReportedID))
	builder.WriteString(", ")
	builder.WriteString("library_snapshot=")
	builder.WriteString(sabf.LibrarySnapshot.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sentinel_app_binary_generated_id=")
	builder.WriteString(sabf.SentinelAppBinaryGeneratedID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sabf.Name)
	builder.WriteString(", ")
	builder.WriteString("size_bytes=")
	builder.WriteString(fmt.Sprintf("%v", sabf.SizeBytes))
	builder.WriteString(", ")
	builder.WriteString("sha256=")
	builder.WriteString(fmt.Sprintf("%v", sabf.Sha256))
	builder.WriteString(", ")
	builder.WriteString("server_file_path=")
	builder.WriteString(sabf.ServerFilePath)
	builder.WriteString(", ")
	builder.WriteString("chunks_info=")
	builder.WriteString(sabf.ChunksInfo)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sabf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sabf.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SentinelAppBinaryFiles is a parsable slice of SentinelAppBinaryFile.
type SentinelAppBinaryFiles []*SentinelAppBinaryFile
