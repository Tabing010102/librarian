// Code generated by ent, DO NOT EDIT.

package storeapp

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the storeapp type in the database.
	Label = "store_app"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAppBinary holds the string denoting the app_binary edge name in mutations.
	EdgeAppBinary = "app_binary"
	// EdgeStoreAppBinary holds the string denoting the store_app_binary edge name in mutations.
	EdgeStoreAppBinary = "store_app_binary"
	// Table holds the table name of the storeapp in the database.
	Table = "store_apps"
	// AppBinaryTable is the table that holds the app_binary relation/edge. The primary key declared below.
	AppBinaryTable = "store_app_binaries"
	// AppBinaryInverseTable is the table name for the SentinelAppBinary entity.
	// It exists in this package in order to avoid circular dependency with the "sentinelappbinary" package.
	AppBinaryInverseTable = "sentinel_app_binaries"
	// StoreAppBinaryTable is the table that holds the store_app_binary relation/edge.
	StoreAppBinaryTable = "store_app_binaries"
	// StoreAppBinaryInverseTable is the table name for the StoreAppBinary entity.
	// It exists in this package in order to avoid circular dependency with the "storeappbinary" package.
	StoreAppBinaryInverseTable = "store_app_binaries"
	// StoreAppBinaryColumn is the table column denoting the store_app_binary relation/edge.
	StoreAppBinaryColumn = "store_app_id"
)

// Columns holds all SQL columns for storeapp fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldUpdatedAt,
	FieldCreatedAt,
}

var (
	// AppBinaryPrimaryKey and AppBinaryColumn2 are the table columns denoting the
	// primary key for the app_binary relation (M2M).
	AppBinaryPrimaryKey = []string{"store_app_id", "sentinel_app_binary_union_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the StoreApp queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAppBinaryCount orders the results by app_binary count.
func ByAppBinaryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppBinaryStep(), opts...)
	}
}

// ByAppBinary orders the results by app_binary terms.
func ByAppBinary(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppBinaryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStoreAppBinaryCount orders the results by store_app_binary count.
func ByStoreAppBinaryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStoreAppBinaryStep(), opts...)
	}
}

// ByStoreAppBinary orders the results by store_app_binary terms.
func ByStoreAppBinary(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreAppBinaryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAppBinaryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppBinaryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AppBinaryTable, AppBinaryPrimaryKey...),
	)
}
func newStoreAppBinaryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreAppBinaryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, StoreAppBinaryTable, StoreAppBinaryColumn),
	)
}
