// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinel"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinellibrary"
	"github.com/tuihub/librarian/internal/model"
)

// SentinelLibrary is the model entity for the SentinelLibrary schema.
type SentinelLibrary struct {
	config `json:"-"`
	// ID of the ent.
	ID model.InternalID `json:"id,omitempty"`
	// SentinelID holds the value of the "sentinel_id" field.
	SentinelID model.InternalID `json:"sentinel_id,omitempty"`
	// ReportedID holds the value of the "reported_id" field.
	ReportedID int64 `json:"reported_id,omitempty"`
	// DownloadBasePath holds the value of the "download_base_path" field.
	DownloadBasePath string `json:"download_base_path,omitempty"`
	// ActiveSnapshot holds the value of the "active_snapshot" field.
	ActiveSnapshot time.Time `json:"active_snapshot,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LibraryReportSequence holds the value of the "library_report_sequence" field.
	LibraryReportSequence int64 `json:"library_report_sequence,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SentinelLibraryQuery when eager-loading is set.
	Edges        SentinelLibraryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SentinelLibraryEdges holds the relations/edges for other nodes in the graph.
type SentinelLibraryEdges struct {
	// Sentinel holds the value of the sentinel edge.
	Sentinel *Sentinel `json:"sentinel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SentinelOrErr returns the Sentinel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SentinelLibraryEdges) SentinelOrErr() (*Sentinel, error) {
	if e.Sentinel != nil {
		return e.Sentinel, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sentinel.Label}
	}
	return nil, &NotLoadedError{edge: "sentinel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SentinelLibrary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sentinellibrary.FieldID, sentinellibrary.FieldSentinelID, sentinellibrary.FieldReportedID, sentinellibrary.FieldLibraryReportSequence:
			values[i] = new(sql.NullInt64)
		case sentinellibrary.FieldDownloadBasePath:
			values[i] = new(sql.NullString)
		case sentinellibrary.FieldActiveSnapshot, sentinellibrary.FieldUpdatedAt, sentinellibrary.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SentinelLibrary fields.
func (sl *SentinelLibrary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sentinellibrary.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sl.ID = model.InternalID(value.Int64)
			}
		case sentinellibrary.FieldSentinelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sentinel_id", values[i])
			} else if value.Valid {
				sl.SentinelID = model.InternalID(value.Int64)
			}
		case sentinellibrary.FieldReportedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reported_id", values[i])
			} else if value.Valid {
				sl.ReportedID = value.Int64
			}
		case sentinellibrary.FieldDownloadBasePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_base_path", values[i])
			} else if value.Valid {
				sl.DownloadBasePath = value.String
			}
		case sentinellibrary.FieldActiveSnapshot:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field active_snapshot", values[i])
			} else if value.Valid {
				sl.ActiveSnapshot = value.Time
			}
		case sentinellibrary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sl.UpdatedAt = value.Time
			}
		case sentinellibrary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = value.Time
			}
		case sentinellibrary.FieldLibraryReportSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field library_report_sequence", values[i])
			} else if value.Valid {
				sl.LibraryReportSequence = value.Int64
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SentinelLibrary.
// This includes values selected through modifiers, order, etc.
func (sl *SentinelLibrary) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// QuerySentinel queries the "sentinel" edge of the SentinelLibrary entity.
func (sl *SentinelLibrary) QuerySentinel() *SentinelQuery {
	return NewSentinelLibraryClient(sl.config).QuerySentinel(sl)
}

// Update returns a builder for updating this SentinelLibrary.
// Note that you need to call SentinelLibrary.Unwrap() before calling this method if this SentinelLibrary
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SentinelLibrary) Update() *SentinelLibraryUpdateOne {
	return NewSentinelLibraryClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the SentinelLibrary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SentinelLibrary) Unwrap() *SentinelLibrary {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SentinelLibrary is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SentinelLibrary) String() string {
	var builder strings.Builder
	builder.WriteString("SentinelLibrary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("sentinel_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.SentinelID))
	builder.WriteString(", ")
	builder.WriteString("reported_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.ReportedID))
	builder.WriteString(", ")
	builder.WriteString("download_base_path=")
	builder.WriteString(sl.DownloadBasePath)
	builder.WriteString(", ")
	builder.WriteString("active_snapshot=")
	builder.WriteString(sl.ActiveSnapshot.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("library_report_sequence=")
	builder.WriteString(fmt.Sprintf("%v", sl.LibraryReportSequence))
	builder.WriteByte(')')
	return builder.String()
}

// SentinelLibraries is a parsable slice of SentinelLibrary.
type SentinelLibraries []*SentinelLibrary
