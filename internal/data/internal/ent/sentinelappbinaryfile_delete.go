// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/data/internal/ent/sentinelappbinaryfile"
)

// SentinelAppBinaryFileDelete is the builder for deleting a SentinelAppBinaryFile entity.
type SentinelAppBinaryFileDelete struct {
	config
	hooks    []Hook
	mutation *SentinelAppBinaryFileMutation
}

// Where appends a list predicates to the SentinelAppBinaryFileDelete builder.
func (sabfd *SentinelAppBinaryFileDelete) Where(ps ...predicate.SentinelAppBinaryFile) *SentinelAppBinaryFileDelete {
	sabfd.mutation.Where(ps...)
	return sabfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sabfd *SentinelAppBinaryFileDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sabfd.sqlExec, sabfd.mutation, sabfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sabfd *SentinelAppBinaryFileDelete) ExecX(ctx context.Context) int {
	n, err := sabfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sabfd *SentinelAppBinaryFileDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sentinelappbinaryfile.Table, sqlgraph.NewFieldSpec(sentinelappbinaryfile.FieldID, field.TypeInt64))
	if ps := sabfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sabfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sabfd.mutation.done = true
	return affected, err
}

// SentinelAppBinaryFileDeleteOne is the builder for deleting a single SentinelAppBinaryFile entity.
type SentinelAppBinaryFileDeleteOne struct {
	sabfd *SentinelAppBinaryFileDelete
}

// Where appends a list predicates to the SentinelAppBinaryFileDelete builder.
func (sabfdo *SentinelAppBinaryFileDeleteOne) Where(ps ...predicate.SentinelAppBinaryFile) *SentinelAppBinaryFileDeleteOne {
	sabfdo.sabfd.mutation.Where(ps...)
	return sabfdo
}

// Exec executes the deletion query.
func (sabfdo *SentinelAppBinaryFileDeleteOne) Exec(ctx context.Context) error {
	n, err := sabfdo.sabfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sentinelappbinaryfile.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sabfdo *SentinelAppBinaryFileDeleteOne) ExecX(ctx context.Context) {
	if err := sabfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
