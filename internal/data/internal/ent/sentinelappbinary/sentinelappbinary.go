// Code generated by ent, DO NOT EDIT.

package sentinelappbinary

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the sentinelappbinary type in the database.
	Label = "sentinel_app_binary"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSentinelID holds the string denoting the sentinel_id field in the database.
	FieldSentinelID = "sentinel_id"
	// FieldSentinelLibraryReportedID holds the string denoting the sentinel_library_reported_id field in the database.
	FieldSentinelLibraryReportedID = "sentinel_library_reported_id"
	// FieldGeneratedID holds the string denoting the generated_id field in the database.
	FieldGeneratedID = "generated_id"
	// FieldSizeBytes holds the string denoting the size_bytes field in the database.
	FieldSizeBytes = "size_bytes"
	// FieldNeedToken holds the string denoting the need_token field in the database.
	FieldNeedToken = "need_token"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldDeveloper holds the string denoting the developer field in the database.
	FieldDeveloper = "developer"
	// FieldPublisher holds the string denoting the publisher field in the database.
	FieldPublisher = "publisher"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldAppBinaryReportSequence holds the string denoting the app_binary_report_sequence field in the database.
	FieldAppBinaryReportSequence = "app_binary_report_sequence"
	// Table holds the table name of the sentinelappbinary in the database.
	Table = "sentinel_app_binaries"
)

// Columns holds all SQL columns for sentinelappbinary fields.
var Columns = []string{
	FieldID,
	FieldSentinelID,
	FieldSentinelLibraryReportedID,
	FieldGeneratedID,
	FieldSizeBytes,
	FieldNeedToken,
	FieldName,
	FieldVersion,
	FieldDeveloper,
	FieldPublisher,
	FieldUpdatedAt,
	FieldCreatedAt,
	FieldAppBinaryReportSequence,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the SentinelAppBinary queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySentinelID orders the results by the sentinel_id field.
func BySentinelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentinelID, opts...).ToFunc()
}

// BySentinelLibraryReportedID orders the results by the sentinel_library_reported_id field.
func BySentinelLibraryReportedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentinelLibraryReportedID, opts...).ToFunc()
}

// ByGeneratedID orders the results by the generated_id field.
func ByGeneratedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeneratedID, opts...).ToFunc()
}

// BySizeBytes orders the results by the size_bytes field.
func BySizeBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeBytes, opts...).ToFunc()
}

// ByNeedToken orders the results by the need_token field.
func ByNeedToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNeedToken, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByDeveloper orders the results by the developer field.
func ByDeveloper(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeveloper, opts...).ToFunc()
}

// ByPublisher orders the results by the publisher field.
func ByPublisher(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublisher, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAppBinaryReportSequence orders the results by the app_binary_report_sequence field.
func ByAppBinaryReportSequence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppBinaryReportSequence, opts...).ToFunc()
}
