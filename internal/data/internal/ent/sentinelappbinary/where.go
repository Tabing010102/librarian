// Code generated by ent, DO NOT EDIT.

package sentinelappbinary

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tuihub/librarian/internal/data/internal/ent/predicate"
	"github.com/tuihub/librarian/internal/model"
)

// ID filters vertices based on their ID field.
func ID(id model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id model.InternalID) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldID, id))
}

// SentinelLibraryID applies equality check predicate on the "sentinel_library_id" field. It's identical to SentinelLibraryIDEQ.
func SentinelLibraryID(v model.InternalID) predicate.SentinelAppBinary {
	vc := int64(v)
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldSentinelLibraryID, vc))
}

// GeneratedID applies equality check predicate on the "generated_id" field. It's identical to GeneratedIDEQ.
func GeneratedID(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldGeneratedID, v))
}

// SizeBytes applies equality check predicate on the "size_bytes" field. It's identical to SizeBytesEQ.
func SizeBytes(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldSizeBytes, v))
}

// NeedToken applies equality check predicate on the "need_token" field. It's identical to NeedTokenEQ.
func NeedToken(v bool) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldNeedToken, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldVersion, v))
}

// Developer applies equality check predicate on the "developer" field. It's identical to DeveloperEQ.
func Developer(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldDeveloper, v))
}

// Publisher applies equality check predicate on the "publisher" field. It's identical to PublisherEQ.
func Publisher(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldPublisher, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldCreatedAt, v))
}

// ReportSequence applies equality check predicate on the "report_sequence" field. It's identical to ReportSequenceEQ.
func ReportSequence(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldReportSequence, v))
}

// SentinelLibraryIDEQ applies the EQ predicate on the "sentinel_library_id" field.
func SentinelLibraryIDEQ(v model.InternalID) predicate.SentinelAppBinary {
	vc := int64(v)
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldSentinelLibraryID, vc))
}

// SentinelLibraryIDNEQ applies the NEQ predicate on the "sentinel_library_id" field.
func SentinelLibraryIDNEQ(v model.InternalID) predicate.SentinelAppBinary {
	vc := int64(v)
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldSentinelLibraryID, vc))
}

// SentinelLibraryIDIn applies the In predicate on the "sentinel_library_id" field.
func SentinelLibraryIDIn(vs ...model.InternalID) predicate.SentinelAppBinary {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.SentinelAppBinary(sql.FieldIn(FieldSentinelLibraryID, v...))
}

// SentinelLibraryIDNotIn applies the NotIn predicate on the "sentinel_library_id" field.
func SentinelLibraryIDNotIn(vs ...model.InternalID) predicate.SentinelAppBinary {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldSentinelLibraryID, v...))
}

// GeneratedIDEQ applies the EQ predicate on the "generated_id" field.
func GeneratedIDEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldGeneratedID, v))
}

// GeneratedIDNEQ applies the NEQ predicate on the "generated_id" field.
func GeneratedIDNEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldGeneratedID, v))
}

// GeneratedIDIn applies the In predicate on the "generated_id" field.
func GeneratedIDIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldGeneratedID, vs...))
}

// GeneratedIDNotIn applies the NotIn predicate on the "generated_id" field.
func GeneratedIDNotIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldGeneratedID, vs...))
}

// GeneratedIDGT applies the GT predicate on the "generated_id" field.
func GeneratedIDGT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldGeneratedID, v))
}

// GeneratedIDGTE applies the GTE predicate on the "generated_id" field.
func GeneratedIDGTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldGeneratedID, v))
}

// GeneratedIDLT applies the LT predicate on the "generated_id" field.
func GeneratedIDLT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldGeneratedID, v))
}

// GeneratedIDLTE applies the LTE predicate on the "generated_id" field.
func GeneratedIDLTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldGeneratedID, v))
}

// GeneratedIDContains applies the Contains predicate on the "generated_id" field.
func GeneratedIDContains(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContains(FieldGeneratedID, v))
}

// GeneratedIDHasPrefix applies the HasPrefix predicate on the "generated_id" field.
func GeneratedIDHasPrefix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasPrefix(FieldGeneratedID, v))
}

// GeneratedIDHasSuffix applies the HasSuffix predicate on the "generated_id" field.
func GeneratedIDHasSuffix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasSuffix(FieldGeneratedID, v))
}

// GeneratedIDEqualFold applies the EqualFold predicate on the "generated_id" field.
func GeneratedIDEqualFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEqualFold(FieldGeneratedID, v))
}

// GeneratedIDContainsFold applies the ContainsFold predicate on the "generated_id" field.
func GeneratedIDContainsFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContainsFold(FieldGeneratedID, v))
}

// SizeBytesEQ applies the EQ predicate on the "size_bytes" field.
func SizeBytesEQ(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldSizeBytes, v))
}

// SizeBytesNEQ applies the NEQ predicate on the "size_bytes" field.
func SizeBytesNEQ(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldSizeBytes, v))
}

// SizeBytesIn applies the In predicate on the "size_bytes" field.
func SizeBytesIn(vs ...int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldSizeBytes, vs...))
}

// SizeBytesNotIn applies the NotIn predicate on the "size_bytes" field.
func SizeBytesNotIn(vs ...int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldSizeBytes, vs...))
}

// SizeBytesGT applies the GT predicate on the "size_bytes" field.
func SizeBytesGT(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldSizeBytes, v))
}

// SizeBytesGTE applies the GTE predicate on the "size_bytes" field.
func SizeBytesGTE(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldSizeBytes, v))
}

// SizeBytesLT applies the LT predicate on the "size_bytes" field.
func SizeBytesLT(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldSizeBytes, v))
}

// SizeBytesLTE applies the LTE predicate on the "size_bytes" field.
func SizeBytesLTE(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldSizeBytes, v))
}

// NeedTokenEQ applies the EQ predicate on the "need_token" field.
func NeedTokenEQ(v bool) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldNeedToken, v))
}

// NeedTokenNEQ applies the NEQ predicate on the "need_token" field.
func NeedTokenNEQ(v bool) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldNeedToken, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContainsFold(FieldName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContainsFold(FieldVersion, v))
}

// DeveloperEQ applies the EQ predicate on the "developer" field.
func DeveloperEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldDeveloper, v))
}

// DeveloperNEQ applies the NEQ predicate on the "developer" field.
func DeveloperNEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldDeveloper, v))
}

// DeveloperIn applies the In predicate on the "developer" field.
func DeveloperIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldDeveloper, vs...))
}

// DeveloperNotIn applies the NotIn predicate on the "developer" field.
func DeveloperNotIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldDeveloper, vs...))
}

// DeveloperGT applies the GT predicate on the "developer" field.
func DeveloperGT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldDeveloper, v))
}

// DeveloperGTE applies the GTE predicate on the "developer" field.
func DeveloperGTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldDeveloper, v))
}

// DeveloperLT applies the LT predicate on the "developer" field.
func DeveloperLT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldDeveloper, v))
}

// DeveloperLTE applies the LTE predicate on the "developer" field.
func DeveloperLTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldDeveloper, v))
}

// DeveloperContains applies the Contains predicate on the "developer" field.
func DeveloperContains(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContains(FieldDeveloper, v))
}

// DeveloperHasPrefix applies the HasPrefix predicate on the "developer" field.
func DeveloperHasPrefix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasPrefix(FieldDeveloper, v))
}

// DeveloperHasSuffix applies the HasSuffix predicate on the "developer" field.
func DeveloperHasSuffix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasSuffix(FieldDeveloper, v))
}

// DeveloperIsNil applies the IsNil predicate on the "developer" field.
func DeveloperIsNil() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIsNull(FieldDeveloper))
}

// DeveloperNotNil applies the NotNil predicate on the "developer" field.
func DeveloperNotNil() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotNull(FieldDeveloper))
}

// DeveloperEqualFold applies the EqualFold predicate on the "developer" field.
func DeveloperEqualFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEqualFold(FieldDeveloper, v))
}

// DeveloperContainsFold applies the ContainsFold predicate on the "developer" field.
func DeveloperContainsFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContainsFold(FieldDeveloper, v))
}

// PublisherEQ applies the EQ predicate on the "publisher" field.
func PublisherEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldPublisher, v))
}

// PublisherNEQ applies the NEQ predicate on the "publisher" field.
func PublisherNEQ(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldPublisher, v))
}

// PublisherIn applies the In predicate on the "publisher" field.
func PublisherIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldPublisher, vs...))
}

// PublisherNotIn applies the NotIn predicate on the "publisher" field.
func PublisherNotIn(vs ...string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldPublisher, vs...))
}

// PublisherGT applies the GT predicate on the "publisher" field.
func PublisherGT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldPublisher, v))
}

// PublisherGTE applies the GTE predicate on the "publisher" field.
func PublisherGTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldPublisher, v))
}

// PublisherLT applies the LT predicate on the "publisher" field.
func PublisherLT(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldPublisher, v))
}

// PublisherLTE applies the LTE predicate on the "publisher" field.
func PublisherLTE(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldPublisher, v))
}

// PublisherContains applies the Contains predicate on the "publisher" field.
func PublisherContains(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContains(FieldPublisher, v))
}

// PublisherHasPrefix applies the HasPrefix predicate on the "publisher" field.
func PublisherHasPrefix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasPrefix(FieldPublisher, v))
}

// PublisherHasSuffix applies the HasSuffix predicate on the "publisher" field.
func PublisherHasSuffix(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldHasSuffix(FieldPublisher, v))
}

// PublisherIsNil applies the IsNil predicate on the "publisher" field.
func PublisherIsNil() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIsNull(FieldPublisher))
}

// PublisherNotNil applies the NotNil predicate on the "publisher" field.
func PublisherNotNil() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotNull(FieldPublisher))
}

// PublisherEqualFold applies the EqualFold predicate on the "publisher" field.
func PublisherEqualFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEqualFold(FieldPublisher, v))
}

// PublisherContainsFold applies the ContainsFold predicate on the "publisher" field.
func PublisherContainsFold(v string) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldContainsFold(FieldPublisher, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldCreatedAt, v))
}

// ReportSequenceEQ applies the EQ predicate on the "report_sequence" field.
func ReportSequenceEQ(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldEQ(FieldReportSequence, v))
}

// ReportSequenceNEQ applies the NEQ predicate on the "report_sequence" field.
func ReportSequenceNEQ(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNEQ(FieldReportSequence, v))
}

// ReportSequenceIn applies the In predicate on the "report_sequence" field.
func ReportSequenceIn(vs ...int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldIn(FieldReportSequence, vs...))
}

// ReportSequenceNotIn applies the NotIn predicate on the "report_sequence" field.
func ReportSequenceNotIn(vs ...int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldNotIn(FieldReportSequence, vs...))
}

// ReportSequenceGT applies the GT predicate on the "report_sequence" field.
func ReportSequenceGT(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGT(FieldReportSequence, v))
}

// ReportSequenceGTE applies the GTE predicate on the "report_sequence" field.
func ReportSequenceGTE(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldGTE(FieldReportSequence, v))
}

// ReportSequenceLT applies the LT predicate on the "report_sequence" field.
func ReportSequenceLT(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLT(FieldReportSequence, v))
}

// ReportSequenceLTE applies the LTE predicate on the "report_sequence" field.
func ReportSequenceLTE(v int64) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.FieldLTE(FieldReportSequence, v))
}

// HasSentinelLibrary applies the HasEdge predicate on the "sentinel_library" edge.
func HasSentinelLibrary() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SentinelLibraryTable, SentinelLibraryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentinelLibraryWith applies the HasEdge predicate on the "sentinel_library" edge with a given conditions (other predicates).
func HasSentinelLibraryWith(preds ...predicate.SentinelLibrary) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(func(s *sql.Selector) {
		step := newSentinelLibraryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSentinelAppBinaryFile applies the HasEdge predicate on the "sentinel_app_binary_file" edge.
func HasSentinelAppBinaryFile() predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SentinelAppBinaryFileTable, SentinelAppBinaryFileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentinelAppBinaryFileWith applies the HasEdge predicate on the "sentinel_app_binary_file" edge with a given conditions (other predicates).
func HasSentinelAppBinaryFileWith(preds ...predicate.SentinelAppBinaryFile) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(func(s *sql.Selector) {
		step := newSentinelAppBinaryFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SentinelAppBinary) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SentinelAppBinary) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SentinelAppBinary) predicate.SentinelAppBinary {
	return predicate.SentinelAppBinary(sql.NotPredicates(p))
}
