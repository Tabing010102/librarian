// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuihub/librarian/internal/data/internal/ent/appcategory"
	"github.com/tuihub/librarian/internal/model"
)

// AppCategoryCreate is the builder for creating a AppCategory entity.
type AppCategoryCreate struct {
	config
	mutation *AppCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (acc *AppCategoryCreate) SetUserID(mi model.InternalID) *AppCategoryCreate {
	acc.mutation.SetUserID(mi)
	return acc
}

// SetAppID sets the "app_id" field.
func (acc *AppCategoryCreate) SetAppID(mi model.InternalID) *AppCategoryCreate {
	acc.mutation.SetAppID(mi)
	return acc
}

// SetStartTime sets the "start_time" field.
func (acc *AppCategoryCreate) SetStartTime(t time.Time) *AppCategoryCreate {
	acc.mutation.SetStartTime(t)
	return acc
}

// SetRunDuration sets the "run_duration" field.
func (acc *AppCategoryCreate) SetRunDuration(t time.Duration) *AppCategoryCreate {
	acc.mutation.SetRunDuration(t)
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AppCategoryCreate) SetUpdatedAt(t time.Time) *AppCategoryCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AppCategoryCreate) SetNillableUpdatedAt(t *time.Time) *AppCategoryCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetCreatedAt sets the "created_at" field.
func (acc *AppCategoryCreate) SetCreatedAt(t time.Time) *AppCategoryCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AppCategoryCreate) SetNillableCreatedAt(t *time.Time) *AppCategoryCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// Mutation returns the AppCategoryMutation object of the builder.
func (acc *AppCategoryCreate) Mutation() *AppCategoryMutation {
	return acc.mutation
}

// Save creates the AppCategory in the database.
func (acc *AppCategoryCreate) Save(ctx context.Context) (*AppCategory, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppCategoryCreate) SaveX(ctx context.Context) *AppCategory {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppCategoryCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppCategoryCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppCategoryCreate) defaults() {
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := appcategory.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := appcategory.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppCategoryCreate) check() error {
	if _, ok := acc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "AppCategory.user_id"`)}
	}
	if _, ok := acc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppCategory.app_id"`)}
	}
	if _, ok := acc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "AppCategory.start_time"`)}
	}
	if _, ok := acc.mutation.RunDuration(); !ok {
		return &ValidationError{Name: "run_duration", err: errors.New(`ent: missing required field "AppCategory.run_duration"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppCategory.updated_at"`)}
	}
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppCategory.created_at"`)}
	}
	return nil
}

func (acc *AppCategoryCreate) sqlSave(ctx context.Context) (*AppCategory, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AppCategoryCreate) createSpec() (*AppCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &AppCategory{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(appcategory.Table, sqlgraph.NewFieldSpec(appcategory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = acc.conflict
	if value, ok := acc.mutation.UserID(); ok {
		_spec.SetField(appcategory.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := acc.mutation.AppID(); ok {
		_spec.SetField(appcategory.FieldAppID, field.TypeInt64, value)
		_node.AppID = value
	}
	if value, ok := acc.mutation.StartTime(); ok {
		_spec.SetField(appcategory.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := acc.mutation.RunDuration(); ok {
		_spec.SetField(appcategory.FieldRunDuration, field.TypeInt64, value)
		_node.RunDuration = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.SetField(appcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(appcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCategory.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCategoryUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (acc *AppCategoryCreate) OnConflict(opts ...sql.ConflictOption) *AppCategoryUpsertOne {
	acc.conflict = opts
	return &AppCategoryUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acc *AppCategoryCreate) OnConflictColumns(columns ...string) *AppCategoryUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &AppCategoryUpsertOne{
		create: acc,
	}
}

type (
	// AppCategoryUpsertOne is the builder for "upsert"-ing
	//  one AppCategory node.
	AppCategoryUpsertOne struct {
		create *AppCategoryCreate
	}

	// AppCategoryUpsert is the "OnConflict" setter.
	AppCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *AppCategoryUpsert) SetUserID(v model.InternalID) *AppCategoryUpsert {
	u.Set(appcategory.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppCategoryUpsert) UpdateUserID() *AppCategoryUpsert {
	u.SetExcluded(appcategory.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *AppCategoryUpsert) AddUserID(v model.InternalID) *AppCategoryUpsert {
	u.Add(appcategory.FieldUserID, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppCategoryUpsert) SetAppID(v model.InternalID) *AppCategoryUpsert {
	u.Set(appcategory.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCategoryUpsert) UpdateAppID() *AppCategoryUpsert {
	u.SetExcluded(appcategory.FieldAppID)
	return u
}

// AddAppID adds v to the "app_id" field.
func (u *AppCategoryUpsert) AddAppID(v model.InternalID) *AppCategoryUpsert {
	u.Add(appcategory.FieldAppID, v)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *AppCategoryUpsert) SetStartTime(v time.Time) *AppCategoryUpsert {
	u.Set(appcategory.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppCategoryUpsert) UpdateStartTime() *AppCategoryUpsert {
	u.SetExcluded(appcategory.FieldStartTime)
	return u
}

// SetRunDuration sets the "run_duration" field.
func (u *AppCategoryUpsert) SetRunDuration(v time.Duration) *AppCategoryUpsert {
	u.Set(appcategory.FieldRunDuration, v)
	return u
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *AppCategoryUpsert) UpdateRunDuration() *AppCategoryUpsert {
	u.SetExcluded(appcategory.FieldRunDuration)
	return u
}

// AddRunDuration adds v to the "run_duration" field.
func (u *AppCategoryUpsert) AddRunDuration(v time.Duration) *AppCategoryUpsert {
	u.Add(appcategory.FieldRunDuration, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCategoryUpsert) SetUpdatedAt(v time.Time) *AppCategoryUpsert {
	u.Set(appcategory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCategoryUpsert) UpdateUpdatedAt() *AppCategoryUpsert {
	u.SetExcluded(appcategory.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppCategoryUpsert) SetCreatedAt(v time.Time) *AppCategoryUpsert {
	u.Set(appcategory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCategoryUpsert) UpdateCreatedAt() *AppCategoryUpsert {
	u.SetExcluded(appcategory.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AppCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppCategoryUpsertOne) UpdateNewValues() *AppCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppCategoryUpsertOne) Ignore() *AppCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCategoryUpsertOne) DoNothing() *AppCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCategoryCreate.OnConflict
// documentation for more info.
func (u *AppCategoryUpsertOne) Update(set func(*AppCategoryUpsert)) *AppCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppCategoryUpsertOne) SetUserID(v model.InternalID) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AppCategoryUpsertOne) AddUserID(v model.InternalID) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppCategoryUpsertOne) UpdateUserID() *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateUserID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppCategoryUpsertOne) SetAppID(v model.InternalID) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *AppCategoryUpsertOne) AddAppID(v model.InternalID) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCategoryUpsertOne) UpdateAppID() *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateAppID()
	})
}

// SetStartTime sets the "start_time" field.
func (u *AppCategoryUpsertOne) SetStartTime(v time.Time) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppCategoryUpsertOne) UpdateStartTime() *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateStartTime()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *AppCategoryUpsertOne) SetRunDuration(v time.Duration) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *AppCategoryUpsertOne) AddRunDuration(v time.Duration) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *AppCategoryUpsertOne) UpdateRunDuration() *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateRunDuration()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCategoryUpsertOne) SetUpdatedAt(v time.Time) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCategoryUpsertOne) UpdateUpdatedAt() *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppCategoryUpsertOne) SetCreatedAt(v time.Time) *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCategoryUpsertOne) UpdateCreatedAt() *AppCategoryUpsertOne {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppCategoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppCategoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCategoryCreateBulk is the builder for creating many AppCategory entities in bulk.
type AppCategoryCreateBulk struct {
	config
	err      error
	builders []*AppCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the AppCategory entities in the database.
func (accb *AppCategoryCreateBulk) Save(ctx context.Context) ([]*AppCategory, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppCategory, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppCategoryCreateBulk) SaveX(ctx context.Context) []*AppCategory {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppCategoryUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (accb *AppCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppCategoryUpsertBulk {
	accb.conflict = opts
	return &AppCategoryUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (accb *AppCategoryCreateBulk) OnConflictColumns(columns ...string) *AppCategoryUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &AppCategoryUpsertBulk{
		create: accb,
	}
}

// AppCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of AppCategory nodes.
type AppCategoryUpsertBulk struct {
	create *AppCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppCategoryUpsertBulk) UpdateNewValues() *AppCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppCategoryUpsertBulk) Ignore() *AppCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppCategoryUpsertBulk) DoNothing() *AppCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *AppCategoryUpsertBulk) Update(set func(*AppCategoryUpsert)) *AppCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AppCategoryUpsertBulk) SetUserID(v model.InternalID) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *AppCategoryUpsertBulk) AddUserID(v model.InternalID) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AppCategoryUpsertBulk) UpdateUserID() *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateUserID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppCategoryUpsertBulk) SetAppID(v model.InternalID) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *AppCategoryUpsertBulk) AddAppID(v model.InternalID) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppCategoryUpsertBulk) UpdateAppID() *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateAppID()
	})
}

// SetStartTime sets the "start_time" field.
func (u *AppCategoryUpsertBulk) SetStartTime(v time.Time) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *AppCategoryUpsertBulk) UpdateStartTime() *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateStartTime()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *AppCategoryUpsertBulk) SetRunDuration(v time.Duration) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *AppCategoryUpsertBulk) AddRunDuration(v time.Duration) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *AppCategoryUpsertBulk) UpdateRunDuration() *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateRunDuration()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppCategoryUpsertBulk) SetUpdatedAt(v time.Time) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppCategoryUpsertBulk) UpdateUpdatedAt() *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppCategoryUpsertBulk) SetCreatedAt(v time.Time) *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppCategoryUpsertBulk) UpdateCreatedAt() *AppCategoryUpsertBulk {
	return u.Update(func(s *AppCategoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *AppCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
