// Code generated by ent, DO NOT EDIT.

package sentinelappbinaryfile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sentinelappbinaryfile type in the database.
	Label = "sentinel_app_binary_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSentinelAppBinaryID holds the string denoting the sentinel_app_binary_id field in the database.
	FieldSentinelAppBinaryID = "sentinel_app_binary_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSizeBytes holds the string denoting the size_bytes field in the database.
	FieldSizeBytes = "size_bytes"
	// FieldSha256 holds the string denoting the sha256 field in the database.
	FieldSha256 = "sha256"
	// FieldServerFilePath holds the string denoting the server_file_path field in the database.
	FieldServerFilePath = "server_file_path"
	// FieldChunksInfo holds the string denoting the chunks_info field in the database.
	FieldChunksInfo = "chunks_info"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldAppBinaryReportSequence holds the string denoting the app_binary_report_sequence field in the database.
	FieldAppBinaryReportSequence = "app_binary_report_sequence"
	// EdgeSentinelAppBinary holds the string denoting the sentinel_app_binary edge name in mutations.
	EdgeSentinelAppBinary = "sentinel_app_binary"
	// Table holds the table name of the sentinelappbinaryfile in the database.
	Table = "sentinel_app_binary_files"
	// SentinelAppBinaryTable is the table that holds the sentinel_app_binary relation/edge.
	SentinelAppBinaryTable = "sentinel_app_binary_files"
	// SentinelAppBinaryInverseTable is the table name for the SentinelAppBinary entity.
	// It exists in this package in order to avoid circular dependency with the "sentinelappbinary" package.
	SentinelAppBinaryInverseTable = "sentinel_app_binaries"
	// SentinelAppBinaryColumn is the table column denoting the sentinel_app_binary relation/edge.
	SentinelAppBinaryColumn = "sentinel_app_binary_id"
)

// Columns holds all SQL columns for sentinelappbinaryfile fields.
var Columns = []string{
	FieldID,
	FieldSentinelAppBinaryID,
	FieldName,
	FieldSizeBytes,
	FieldSha256,
	FieldServerFilePath,
	FieldChunksInfo,
	FieldUpdatedAt,
	FieldCreatedAt,
	FieldAppBinaryReportSequence,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the SentinelAppBinaryFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySentinelAppBinaryID orders the results by the sentinel_app_binary_id field.
func BySentinelAppBinaryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentinelAppBinaryID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySizeBytes orders the results by the size_bytes field.
func BySizeBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeBytes, opts...).ToFunc()
}

// ByServerFilePath orders the results by the server_file_path field.
func ByServerFilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerFilePath, opts...).ToFunc()
}

// ByChunksInfo orders the results by the chunks_info field.
func ByChunksInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChunksInfo, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAppBinaryReportSequence orders the results by the app_binary_report_sequence field.
func ByAppBinaryReportSequence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppBinaryReportSequence, opts...).ToFunc()
}

// BySentinelAppBinaryField orders the results by sentinel_app_binary field.
func BySentinelAppBinaryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentinelAppBinaryStep(), sql.OrderByField(field, opts...))
	}
}
func newSentinelAppBinaryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentinelAppBinaryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SentinelAppBinaryTable, SentinelAppBinaryColumn),
	)
}
